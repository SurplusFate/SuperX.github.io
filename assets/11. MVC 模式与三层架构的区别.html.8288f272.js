import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,a as e,b as i,d as l,e as t,r as n}from"./app.9a4f068f.js";const c={},s=e("h1",{id:"_11-mvc-模式与三层架构的区别",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_11-mvc-模式与三层架构的区别","aria-hidden":"true"},"#"),i(" 11. MVC 模式与三层架构的区别")],-1),d={href:"https://www.jianshu.com/p/71ae09665214",target:"_blank",rel:"noopener noreferrer"},h=t('<h2 id="三层架构" tabindex="-1"><a class="header-anchor" href="#三层架构" aria-hidden="true">#</a> 三层架构</h2><p>三层架构是指：视图层 View、服务层 Service，与持久层 Dao。它们分别完成不同的功能。</p><blockquote><p>View 层：用于接收用户提交请求的代码在这里编写。</p><p>Service 层：系统的业务逻辑主要在这里完成。</p><p>Dao 层：直接操作数据库的代码在这里编写。</p></blockquote><p>为了更好的降低各层间的耦合度，在三层架构程序设计中，采用面向抽象编程。</p><p>即上层对下层的调用，是通过接口实现的。</p><p>而下层对上层的真正服务提供者，是下层接口的实现类。</p><p>服务标准（接口）是相同的，服务提供者（实现类）可以更换。</p><p>这就实现了层间解耦合。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202209241728303.webp" alt="img"></p><h2 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc" aria-hidden="true">#</a> MVC</h2><p>MVC 是指：Model 模型、View 视图、Controller 控件器。</p><blockquote><ul><li><p>View：视图，为用户提供使用界面，与用户直接进行交互。</p></li><li><p>Model：模型，承载数据，并对用户提交请求进行计算的模块。其分为两类，一类称为数据承载 Bean，一类称为业务处理 Bean。所谓数据承载 Bean 是指实体类，专门承载业务数据的，如 Student、User 等。而业务处理 Bean 则是指 Service 或 Dao 对象，专门用于处理用户提交请求的。</p></li><li><p>Controller：控制器，用于将用户请求转发给相应的 Model 进行处理，并处理 Model 的计算结果向用户提供相应响应。</p></li></ul></blockquote><p>MVC 架构程序的工作流程是这样的：</p><blockquote><ol><li><p>用户通过 View 页面向服务端提出请求，可以是表单请求、超链接请求、AJAX 请求等。</p></li><li><p>服务端 Controller 控制器接收到请求后对请求进行解析，找到相应 的 Model 对用户请求进行处理。</p></li><li><p>Model 处理后，将处理结果再交给 Controller。</p></li><li><p>Controller 在接到处理结果后，根据处理结果找到要作为向客户端发回的响应 View 页面。页面经渲染（数据填充）后，再发送给客户端。</p></li></ol></blockquote><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202209241731229.webp" alt="img"></p><h2 id="mvc-与三层架构的关系" tabindex="-1"><a class="header-anchor" href="#mvc-与三层架构的关系" aria-hidden="true">#</a> MVC 与三层架构的关系</h2><p>三层架构中的 View 层简单的说就是跟用户发生直接关系的层，MVC 中的 V 和 C 就是这样的存在，所以 MVC 中的 V 和 C 均属于三层架构的 View 层。</p><p>同时，我们知道 MVC 中的 M（Model）包括了数据承载 Bean 和业务处理 Bean，其中业务处理 Bean 分为 Service 或 Dao 对象，分别对应业务逻辑处理和数据库操作，相应的，它们对应的是三层架构中的 Service 层和 Dao 层。</p><p>故，它们的关系如下图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202209241732588.webp" alt="img"></p><h2 id="ssm-与三层架构的关系" tabindex="-1"><a class="header-anchor" href="#ssm-与三层架构的关系" aria-hidden="true">#</a> SSM 与三层架构的关系</h2><p>SSM 即 SpringMVC、Spring、Mybatis 三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。</p><blockquote><ul><li><p>SpringMVC：作为 View 层的实现者，完成用户的请求接收功能。SpringMVC 的 Controller 作为整个应用的控制器，完成用户请求的转发及对用户的响应。</p></li><li><p>MyBatis：作为 Dao 层的实现者，完成对数据库的增、删、改、查功能。</p></li><li><p>Spring：以整个应用大管家的身份出现。整个应用中所有的 Bean 的生命周期行为，均由 Spring 来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由 Spring 进行管理。</p></li></ul></blockquote><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202209241733181.webp" alt="img"></p>',24);function _(m,u){const a=n("ExternalLinkIcon");return o(),p("div",null,[s,e("p",null,[e("a",d,[i("MVC与三层架构 - 简书 (jianshu.com)"),l(a)])]),h])}const M=r(c,[["render",_],["__file","11. MVC 模式与三层架构的区别.html.vue"]]);export{M as default};
