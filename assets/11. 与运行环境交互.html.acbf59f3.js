import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,a as s,b as n,d as c,e as a,r as l}from"./app.03ab472a.js";const i={},u=a(`<h1 id="_11-与运行环境交互" tabindex="-1"><a class="header-anchor" href="#_11-与运行环境交互" aria-hidden="true">#</a> 11. 与运行环境交互</h1><p>Java 提供了 <code>String</code>、<code>StringBuffer</code> 和 <code>StringBuilder</code> 来处理字符串。Java 还提供了 <code>Date</code> 和 <code>Calendar</code> 来处理日期、时间，其中 <code>Date</code> 是一个已经过时的 API，通常推荐使用 <code>Calendar</code> 来处理日期、时间。</p><p>正则表达式是一个强大的文本处理工具，通过正则表达式可以对文本内容进行查找、替换、分割等操作。从 JDK 1.4 以后，Java 也增加了对正则表达式的支持，包括新增的 <code>Pattern</code> 和 <code>Matcher</code> 两个类，并改写了 <code>String</code> 类，让 <code>String</code> 类增加了正则表达式支持，增加了正则表达式功能后的 <code>String</code> 类更加强大。</p><p>Java 还提供了非常简单的国际化支持，Java 使用 <code>Locale</code> 对象封装一个国家、语言环境，再使用 <code>ResourceBundle</code> 根据 <code>Locale</code> 加载语言资源包，当 <code>ResourceBundle</code> 加载了指定 <code>Locale</code> 对应的语言资源文件后，<code>ResourceBundle</code> 对象就可调用 <code>getString()</code> 方法来取出指定 <code>key</code> 所对应的消息字符串。</p><h2 id="与用户互动" tabindex="-1"><a class="header-anchor" href="#与用户互动" aria-hidden="true">#</a> 与用户互动</h2><p>绝大部分程序都需要处理用户动作，包括接收用户的键盘输入、鼠标动作等。</p><h3 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> <code>main</code></h3><p>回忆 Java 程序的入口——<code>main</code> 方法的方法签名：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>public</code> 修饰符：</p><blockquote><p>Java 类由 JVM 调用，为了让 JVM 可以自由调用这个 <code>main</code> 方法，所以使用 <code>public</code> 修饰符把这个方法暴露出来。</p></blockquote><p><code>static</code> 修饰符：</p><blockquote><p>JVM 调用这个主方法时，不会先创建该主类的对象，然后通过对象来调用该主方法。JVM 直接通过该类来调用主方法，因此使用 <code>static</code> 修饰该主方法。</p></blockquote><p><code>void</code> 返回值：</p><blockquote><p>因为主方法被 JVM 调用，该方法的返回值将返回给 JVM，这没有任何意义，因此 <code>main</code> 方法没有返回值。</p></blockquote><p>上面方法中还包括一个字符串数组形参，根据方法调用的规则：谁调用方法，谁负责为形参赋值。也就是说，<code>main</code> 方法由 JVM 调用，即 <code>args</code> 形参应该由 JVM 负责赋值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArgsTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输出args数组的长度</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历args数组的每个元素</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>java ArgsTest</code> 命令运行上面程序，看到程序仅仅输出一个 0，这表明 <code>args</code> 数组是一个长度为 0 的空数组——这是合理的。因为计算机是没有思考能力的，它只能忠实地执行用户交给它的任务，既然我们没有给 <code>args</code> 数组设定参数值，那么 JVM 就不知道 <code>args</code> 数组的元素，所以 JVM 将 <code>args</code> 数组设置成一个长度为 0 的数组。</p><p>改为如下命令来运行上面程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> ArgsTest Java Spring
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208031757373.png" alt="image-20220803175758216"></p><p>如果运行 Java 程序时在类名后紧跟一个或多个字符串（多个字符串之间以空格隔开），JVM 就会把这些字符串依次赋给 <code>args</code> 数组元素。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208031758001.jpeg" alt="img"></p><p>如果某参数本身包含了空格，则应该将该参数用双引号 <code>&quot;&quot;</code> 括起来，否则 JVM 会把这个空格当成参数分隔符，而不是当成参数本身。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> ArgsTest <span class="token string">&quot;Java Spring&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208031800277.png" alt="image-20220803180015126"></p><h3 id="scanner" tabindex="-1"><a class="header-anchor" href="#scanner" aria-hidden="true">#</a> <code>Scanner</code></h3><p>使用 <code>Scanner</code> 类可以很方便地获取用户的键盘输入，<code>Scanner</code> 是一个基于正则表达式的文本扫描器，它可以从文件、输入流、字符串中解析出基本类型值和字符串值。</p><p><code>Scanner</code> 类提供了多个构造器，不同的构造器可以接收文件、输入流、字符串作为数据源，用于从文件、输入流、字符串中解析数据。</p><p><code>Scanner</code> 主要提供了两个方法来扫描输入。</p><ol><li><code>hasNextXxx()</code>：是否还有下一个输入项，其中 <code>Xxx</code> 可以是 <code>Int</code>、<code>Long</code> 等代表基本数据类型的字符串。如果需要判断是否包含下一个字符串，则可以省略 <code>Xxx</code>。</li><li><code>nextXxx()</code>：获取下一个输入项。<code>Xxx</code> 的含义与前一个方法中的 <code>Xxx</code> 相同。</li></ol><p>在默认情况下，<code>Scanner</code> 使用空白（包括空格、Tab 空白、回车）作为多个输入项之间的分隔符。</p><p>下面程序使用 <code>Scanner</code> 来获得用户的键盘输入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerKeyBoardTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// System.in代表标准输入，就是键盘输入</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 增加下面一行将只把回车作为分隔符</span>
        <span class="token comment">// sc.useDelimiter(&quot;&#39;\\n&quot;);</span>
        <span class="token comment">//判断是否还有下一个输入项</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 输出输入项</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;键盘输入的内容是:&quot;</span> <span class="token operator">+</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面程序，程序通过 <code>Scanner</code> 不断从键盘读取键盘输入，每次读到键盘输入后，直接将输入内容打印在控制台。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208031804642.png" alt="image-20220803180458463"></p><p>如果希望改变 <code>Scanner</code> 的分隔符（不使用空白作为分隔符），例如，程序需要每次读取一行，不管这一行中是否包含空格，<code>Scanner</code> 都把它当成一个输入项。在这种需求下，我们可以把 <code>Scanner</code> 的分隔符设置为回车符，不再使用默认的空白作为分隔符。</p><p><code>Scanner</code> 的读取操作可能被阻塞（当前执行顺序流暂停）来等待信息的输入。如果输入源没有结束， <code>Scanner</code> 又读不到更多输入项时（尤其在键盘输入时比较常见），<code>Scanner</code> 的 <code>hasNext()</code> 和 <code>next()</code> 方法都有可能阻塞，<code>hasNext()</code> 方法是否阻塞与和其相关的 <code>next()</code> 方法是否阻塞无关。</p><p>为 <code>Scanner</code> 设置分隔符使用 <code>useDelimiter(String pattern)</code> 方法即可，该方法的参数应该是一个正则表达式。只要把上面程序中粗体字代码行的注释去掉，该程序就会把键盘的每行输入当成一个输入项，不会以空格、Tab 空白等作为分隔符。</p><p><code>Scanner</code> 提供了两个简单的方法来逐行读取。</p><ol><li><code>boolean hasNextLine()</code>：返回输入源中是否还有下一行。</li><li><code>String nextLine()</code>：返回输入源中下一行的字符串。</li></ol><p><code>Scanner</code> 不仅可以获取字符串输入项，也可以获取任何基本类型的输入项：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerLongTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// System.in代表标准输入，就是键盘输入</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//判断是否还有下一个long整数</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 输出输入项</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;键盘输入的内容是:&quot;</span> <span class="token operator">+</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如通过 <code>hasNextLong()</code> 和 <code>nextLong()</code> 两个方法，<code>Scanner</code> 可以直接从输入流中获得 <code>long</code> 型整数输入项。与此类似的是，如果需要获取其他基本类型的输入项，则可以使用相应的方法。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>上面程序不如 <code>ScannerKeyBoardTest</code> 程序适应性强，因为 <code>ScannerLongTest</code> 程序要求键盘输入必须是整数，否则程序就会退出。</p></div><p><code>Scanner</code> 不仅能读取用户的键盘输入，还可以读取文件输入。</p><p>只要在创建 <code>Scanner</code> 对象时传入一个 <code>File</code> 对象作为参数，就可以让 <code>Scanner</code> 读取该文件的内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">test</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerFileTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将一个File对象作为Scanner的构造器参数，Scanner读取文件内容</span>
        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/test/ScannerFileTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ScannerFileTest.java文件内容如下:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否还有下一行</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 输出文件中的下一行</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208031829920.png" alt="image-20220803182945675"></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>因为上面程序涉及文件输入，可能引发文件 <code>IO</code> 相关异常，故主程序声明 <code>throws Exception</code> 表明 <code>main</code> 方法不处理任何异常。</p></div><h3 id="bufferedreader" tabindex="-1"><a class="header-anchor" href="#bufferedreader" aria-hidden="true">#</a> <code>BufferedReader</code></h3><p><code>BufferedReader</code> 是 Java <code>IO</code> 流中的一个字符、包装流，它必须建立在另一个字符流的基础之上。但标准输入：<code>System.in</code> 是字节流，程序需要使用转换流 <code>InputStreamReader</code> 将其包装成字符流。所以程序中用于获取键盘输入的 <code>BufferedReader</code> 对象采用如下代码创建：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦获得了 <code>BufferedReader</code> 对象之后，就可以调用该对象的 <code>readLine()</code> 方法来逐行读取键盘输入；如果没有键盘输入，<code>readLine()</code> 方法将会阻塞来等待键盘输入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyboardInTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 以System.in字节流为基础，创建一个BufferedReader对象</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 逐行读取键盘输入</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;用户键盘输入是:&quot;</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>BufferedReader</code> 可以逐行读取用户的键盘输入，用户的每次键盘输入都被 <code>BufferedReader</code> 当成 <code>String</code> 对象。与 <code>Scanner</code> 不同的是，<code>BufferedReader</code> 不能读取基本类型输入项，它总是读取 <code>String</code> 对象。</p><h2 id="系统相关" tabindex="-1"><a class="header-anchor" href="#系统相关" aria-hidden="true">#</a> 系统相关</h2><p>Java 提供了 <code>System</code> 类和 <code>Runtime</code> 类来与程序的运行平台进行交互。</p><h3 id="system" tabindex="-1"><a class="header-anchor" href="#system" aria-hidden="true">#</a> <code>System</code></h3><p><code>System</code> 类代表当前 Java 程序的运行平台，程序不能创建 <code>System</code> 类的对象，<code>System</code> 类提供了一些类 Field 和类方法，允许直接通过 <code>System</code> 类来调用这些 Field 和方法。</p><p><code>System</code> 类提供了代表标准输入、标准输出和错误输出的类 Field，并提供了一些静态方法用于访问环境变量、系统属性的方法，还提供了加载文件和动态链接库的方法。下面程序通过 <code>System</code> 类来访问操作的环境变量和系统属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取系统所有的环境变量</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> env <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> env<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; ---&gt; &quot;</span> <span class="token operator">+</span> env<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取指定环境变量的值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">&quot;JAVA_HOME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取所有的系统属性</span>
        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将所有的系统属性保存到props.txt文件中</span>
        props<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;props.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;System Properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出特定的系统属性</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序通过调用 <code>System</code> 类的 <code>getenv()</code>、<code>getProperties()</code>、<code>getProperty()</code> 等方法来访问程序所在平台的环境变量和系统属性，程序运行的结果会输出操作系统所有的环境变量值，并输出 <code>JAVA_HOME</code> 环境变量，以及 <code>os.name</code> 系统属性的值。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208041651303.png" alt="image-20220804165126821"></p><p>该程序运行结束后还会在当前路径下生成一个 <code>props.txt</code> 文件，该文件中记录了当前平台的所有系统属性。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208041657302.png" alt="image-20220804165714939"></p><p><code>System</code> 类提供了通知系统进行垃圾回收的 <code>gc()</code> 方法，以及通知系统进行资源清理的 <code>runFinalization()</code> 方法。</p><p><code>System</code> 类还有两个获取系统当前时间的方法：<code>currentTimeMillis()</code> 和 <code>nanoTime()</code>，它们都返回一个 <code>long</code> 型整数。</p><p>实际上它们都返回当前时间与 UTC 1970 年 1 月 1 日午夜的时间差，前者以毫秒作为测量单位，后者以纳秒作为测量单位。</p><p>这两个方法的返回值的粒度取决于底层操作系统，可能所在的操作系统根本不支持以毫秒、纳秒作为计时单位。</p><p>除此之外，<code>System</code> 类的 <code>in</code>、<code>out</code> 和 <code>err</code> 分别代表系统的标准输入（通常是键盘）、标准输出（通常是显示器）和错误输出流，并提供了 <code>setIn</code>、<code>setOut</code> 和 <code>setErr</code> 方法来改变系统的标准输入、标准输出和标准错误输出流。</p><p><code>System</code> 类还提供了一个 <code>identityHashCode(Object x)</code> 方法，该方法返回指定对象的精确 <code>hashCode</code> 值，也就是根据该对象的地址计算得到的 <code>hashCode</code> 值。</p><p>当某个类的 <code>hashCode()</code> 方法被重写后，该类实例的 <code>hashCode()</code> 方法就不能唯一地标识该对象；但通过 <code>identityHashCode()</code> 方法返回的 <code>hashCode</code> 值，依然是根据该对象的地址计算得到的 <code>hashCode</code> 值。</p><p>所以，如果两个对象的 <code>identityHashCode</code> 值相同，则两个对象绝对是同一个对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdentityHashCodeTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 下面程序中s1和s2是两个不同的对象</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// String重写了hashCode()方法——改为根据字符序列计算hashCode值</span>
        <span class="token comment">// 因为s1和s2的字符序列相同，所以它们的hashCode()方法返回值相同</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;----&quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// s1和s2是不同的字符串对象，所以它们的identityHashCode值不同</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;----&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// s3和s4是相同的字符串对象，所以它们的identityHashCode值相同</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;----&quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="runtime" tabindex="-1"><a class="header-anchor" href="#runtime" aria-hidden="true">#</a> <code>Runtime</code></h3><p><code>Runtime</code> 类代表 Java 程序的运行时环境，每个 Java 程序都有一个与之对应的 <code>Runtime</code> 实例，应用程序通过该对象与其运行时环境相连。应用程序不能创建自己的 <code>Runtime</code> 实例，但可以通过 <code>getRuntime()</code> 方法获取与之关联的 <code>Runtime</code> 对象。</p><p>与 <code>System</code> 类似的是，<code>Runtime</code> 类也提供了 <code>gc()</code> 方法和 <code>runFinalization()</code> 方法来通知系统进行垃圾回收、清理系统资源，并提供了 <code>load(String filename)</code> 和 <code>loadLibrary(String libname)</code> 方法来加载文件和动态链接库。</p><p><code>Runtime</code> 类代表 Java 程序的运行时环境，可以访问 JVM 的相关信息，如处理器数量、内存信息等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取Java程序关联的运行时对象</span>
        <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;处理器数量：&quot;</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;空闲内存数：&quot;</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;总内存数：&quot;</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;可用最大内存数：&quot;</span> <span class="token operator">+</span> rt<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，<code>Runtime</code> 类还有一个功能——它可以直接单独启动一个进程来运行操作系统的命令，如下程序所示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 运行记事本程序</span>
        rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;notepad.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用类" tabindex="-1"><a class="header-anchor" href="#常用类" aria-hidden="true">#</a> 常用类</h2><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> <code>Object</code></h3><p><code>Object</code> 类是所有类、数组、枚举类的父类，也就是说，Java 允许把任何类型的对象赋给 <code>Object</code> 类型的变量。当定义一个类时没有使用 <code>extends</code> 关键字为它显式指定父类，则该类默认继承 <code>Object</code> 父类。</p><p>因为所有的 Java 类都是 <code>Object</code> 类的子类，所以任何 Java 对象都可以调用 <code>Object</code> 类的方法。<code>Object</code> 类提供了如下几个常用方法。</p><blockquote><ol><li><code>boolean equals(Object obj)</code>：判断指定对象与该对象是否相等。此处相等的标准是，两个对象是同一个对象，因此该 <code>equals()</code> 方法通常没有太大的实用价值。</li><li><code>protected void finalize()</code>：当系统中没有引用变量引用到该对象时，垃圾回收器调用此方法来清理该对象的资源。</li><li><code>Class&lt;?&gt; getClass()</code>：返回该对象的运行时类。</li><li><code>int hashCode()</code>：返回该对象的 <code>hashCode</code> 值。在默认情况下，<code>Object</code> 类的 <code>hashCode()</code> 方法根据该对象的地址来计算（即与 <code>System.identityHashCode(Object x)</code> 方法的计算结果相同）。但很多类都重写了 <code>Object</code> 类的 <code>hashCode()</code> 方法，不再根据地址来计算其 <code>hashCode()</code> 方法值。</li><li><code>String toString()</code>：返回该对象的字符串表示，当我们使用 <code>System.out.println()</code> 方法输出一个对象，或者把某个对象和字符串进行连接运算时，系统会自动调用该对象的 <code>toString()</code> 方法返回该对象的字符串表示。<code>Object</code> 类的 <code>toString()</code> 方法返回 <code>运行时类名@十六进制 hashCode 值</code> 格式的字符串，但很多类都重写了 <code>Object</code> 类的 <code>toString()</code> 方法，用于返回可以表述该对象信息的字符串。</li></ol></blockquote><p>除此之外，<code>Object</code> 类还提供了 <code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code> 几个方法，通过这几个方法可以控制线程的暂停和运行。</p><p>Java 还提供了一个 <code>protected</code> 修饰的 <code>clone()</code> 方法，该方法用于帮助其他对象来实现“自我克隆”，所谓“自我克隆”就是得到一个当前对象的副本，而且二者之间完全隔离。由于 <code>Object</code> 类提供的 <code>clone()</code> 方法使用了 <code>protected</code> 修饰，因此该方法只能被子类重写或调用。</p><p>自定义类实现“克隆”的步骤如下。</p><ol><li>自定义类实现 <code>Cloneable</code> 接口。这是一个标记性的接口，实现该接口的对象可以实现“自我克隆”，接口里没有定义任何方法。</li><li>自定义类实现自己的 <code>clone()</code> 方法。</li><li>实现 <code>clone()</code> 方法时通过 <code>super.clone();</code> 调用 <code>Object</code> 实现的 <code>clone()</code> 方法来得到该对象的副本，并返回该副本。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> detail<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> detail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现Cloneable接口</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">&quot;广州天河&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 通过调用super.clone()来实现clone()方法</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloneTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// clone得到u1对象的副本</span>
        <span class="token class-name">User</span> u2 <span class="token operator">=</span> u1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ①判断u1、u2是否相同</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1 <span class="token operator">==</span> u2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ②判断u1、u2的address是否相同</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>address <span class="token operator">==</span> u2<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序让 <code>User</code> 类实现了 <code>Cloneable</code> 接口，而且实现了 <code>clone()</code> 方法，因此 <code>User</code> 对象就可实现“自我克隆”——克隆出来的对象只是原有对象的副本。程序在 ① 号代码处判断原有的 <code>User</code> 对象与克隆出来的 <code>User</code> 对象是否相同，程序返回 <code>false</code>。</p><p><code>Object</code> 类提供的 <code>Clone</code> 机制只对对象里各实例变量进行“简单复制”，如果实例变量的类型是引用类型，<code>Object</code> 的 <code>Clone</code> 机制也只是简单地复制这个引用变量，这样原有对象的引用类型的实例变量与克隆对象的引用类型的实例变量依然指向内存中的同一个实例，所以上面程序在 ② 号代码处输出 <code>true</code>。上面程序“克隆”出来的 <code>u1</code>、<code>u2</code> 所指向的对象在内存中的存储示意图如图所示。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208041801054.jpeg" alt="img"></p><p><code>Object</code> 类提供的 <code>clone()</code> 方法不仅能简单地处理“复制”对象的问题，而且这种“自我克隆”机制十分高效。比如 <code>clone</code> 一个包含 100 个元素的 <code>int[]</code> 数组，用系统默认的 <code>clone</code> 方法比静态 <code>copy</code> 方法快近 2 倍。</p><p><code>Object</code> 类的 <code>clone()</code> 方法虽然简单、易用，但它只是一种“浅克隆”——它只克隆该对象的所有 Field 值，不会对引用类型的 Field 值所引用的对象进行克隆。如果开发者需要对对象进行“深克隆”，则需要开发者自己进行“递归”克隆，保证所有引用类型的 Field 值所引用的对象都被复制了。</p><h3 id="objects" tabindex="-1"><a class="header-anchor" href="#objects" aria-hidden="true">#</a> <code>Objects</code></h3><p>Java 7 新增了一个 <code>Objects</code> 工具类，它提供了一些工具方法来操作对象，这些工具方法大多是“空指针”安全的。比如，你不能明确地判断一个引用变量是否为 <code>null</code>，如果贸然地调用该变量的 <code>toString()</code> 方法，则可能引发 <code>NullPointerExcetpion</code> 异常；但如果使用 <code>Objects</code> 类提供的 <code>toString(Object o)</code> 方法，就不会引发空指针异常，当 <code>o</code> 为 <code>null</code> 时，程序将返回一个 <code>&quot;null&quot;</code> 字符串。</p><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>Java 为工具类的命名习惯是添加一个字母 <code>s</code>，比如操作数组的工具类是 <code>Arrays</code>，操作集合的工具类是 <code>Collections</code>。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectsTest</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义一个obj变量，它的默认值是null</span>
    <span class="token keyword">static</span> <span class="token class-name">ObjectsTest</span> obj<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输出一个null对象的hashCode值，输出0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出一个null对象的toString，输出null</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 要求obj不能为null，如果obj为null则引发异常</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;obj参数不能是null！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序还示范了 <code>Objects</code> 提供的 <code>requireNonNull()</code> 方法，当传入的参数不为 <code>null</code> 时，该方法返回参数本身；否则将会引发 <code>NullPointerException</code> 异常。</p><p>该方法主要用来对方法形参进行输入校验，例如如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token class-name">Bar</span> bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 校验bar参数，如果bar参数为null将引发异常；否则this.bar被赋值为bar参数</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串处理类" tabindex="-1"><a class="header-anchor" href="#字符串处理类" aria-hidden="true">#</a> 字符串处理类</h3><p>字符串就是一连串的字符序列，Java 提供了 <code>String</code> 和 <code>StringBuffer</code> 两个类来封装字符串，并提供了一系列方法来操作字符串对象。</p><p><code>String</code> 类是不可变类，即一旦一个 <code>String</code> 对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被销毁。</p><p><code>StringBuffer</code> 对象则代表一个字符序列可变的字符串，当一个 <code>StringBuffer</code> 被创建以后，通过 <code>StringBuffer</code> 提供的 <code>append()</code>、<code>insert()</code>、<code>reverse()</code>、<code>setCharAt()</code>、<code>setLength()</code> 等方法可以改变这个字符串对象的字符序列。</p><p>一旦通过 <code>StringBuffer</code> 生成了最终想要的字符串，就可以调用它的 <code>toString()</code> 方法将其转换为一个 <code>String</code> 对象。</p><p>从 JDK 1.5 开始出现的 <code>StringBuilder</code> 类，也代表字符串对象。实际上，<code>StringBuilder</code> 和 <code>StringBuffer</code> 基本相似，两个类的构造器和方法也基本相同。</p><p>不同的是，<mark><code>StringBuffer</code> 是线程安全的，而 <code>StringBuilder</code> 则没有实现线程安全功能</mark>，所以性能略高。因此在通常情况下，如果需要创建一个内容可变的字符串对象，则应该优先考虑使用 <code>StringBuilder</code> 类。</p><p><code>String</code> 类提供了大量构造器来创建 <code>String</code> 对象，其中如下几个有特殊用途。</p><blockquote><ol><li><code>String()</code>：创建一个包含 0 个字符串序列的 <code>String</code> 对象（并不是返回 <code>null</code>）。</li><li><code>String(byte[] bytes, Charset charset)</code>：使用指定的字符集将指定的 <code>byte[]</code> 数组解码成一个新的 <code>String</code> 对象。</li><li><code>String(byte[] bytes, int offset, int length)</code>：使用平台的默认字符集将从指定 <code>byte[]</code> 数组的 <code>offset</code> 开始、长度为 <code>length</code> 的子数组解码成一个新的 <code>String</code> 对象。</li><li><code>String(byte[] bytes, int offset, int length, String charsetName)</code>：使用指定的字符集将指定的 <code>byte[]</code> 数组从 <code>offset</code> 开始、长度为 <code>length</code> 的子数组解码成一个新的 <code>String</code> 对象。</li><li><code>String(byte[] bytes, String charsetName)</code>：使用指定的字符集将指定的 <code>byte[]</code> 数组解码成一个新的 <code>String</code> 对象。</li><li><code>String(char[] value, int offset, int count)</code>：将指定的字符数组从 <code>offset</code> 开始、长度为 <code>count</code> 的字符元素连缀成字符串。</li><li><code>String(String original)</code>：根据字符串直接量来创建一个 <code>String</code> 对象。也就是说，新创建的 <code>String</code> 对象是该参数字符串的副本。</li><li><code>String(StringBuffer buffer)</code>：根据 <code>StringBuffer</code> 对象来创建对应的 <code>String</code> 对象。</li><li><code>String(StringBuilder builder)</code>：根据 <code>StringBuilder</code> 对象来创建对应的 <code>String</code> 对象。</li></ol></blockquote><p><code>String</code> 类也提供了大量方法来操作字符串对象，下面详细介绍这些常用方法。</p><ul><li><code>char charAt(int index)</code>：获取字符串中指定位置的字符。其中，参数 <code>index</code> 指的是字符串的序数，字符串的序数从 0 开始到 length()-1。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s.charAt(5): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s.charAt(5): f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>int compareTo(String anotherString)</code>：比较两个字符串的大小。如果两个字符串的字符序列相等，则返回 0；不相等时，从两个字符串第 0 个字符开始比较，返回第一个不相等的字符差。另一种情况，较长字符串的前面部分恰巧是较短的字符串，则返回它们的长度差。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abcdefghijklmn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abcdefghij&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abcdefghijalmn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回长度差</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.compareTo(s2): &quot;</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回&#39;k&#39;-&#39;a&#39;的差</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.compareTo(s3): &quot;</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s1.compareTo(s2): 4</span>
<span class="token comment">// s1.compareTo(s3): 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>String concat(String str)</code>：将该 <code>String</code> 对象与 <code>str</code> 连接在一起。与 Java 提供的字符串连接运算符“+”的功能相同。</p></li><li><p><code>boolean contentEquals(StringBuffer sb)</code>：将该 <code>String</code> 对象与 <code>StringBuffer</code> 对象 <code>sb</code> 进行比较，当它们包含的字符序列相同时返回 <code>true</code>。</p></li><li><p><code>static String copyValueOf(char[] data)</code>：将字符数组连缀成字符串，与 <code>String[char[] content]</code> 构造器的功能相同。</p></li><li><p><code>static String copyValueOf(char[] data, int offset, int count)</code>：将 <code>char</code> 数组的子数组中的元素连缀成字符串，与 <code>String(char[] value, int offset, int count)</code> 构造器的功能相同。</p></li><li><p><code>boolean endsWith(String suffix)</code>：返回该 <code>String</code> 对象是否以 <code>suffix</code> 结尾。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abcdefghij&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ghij&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s1.endsWith(s2): &quot;</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s1.endsWith(s2): true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>boolean equals(Object anObject)</code>：将该字符串与指定对象比较，如果二者包含的字符序列相等，则返回 <code>true</code>；否则返回 <code>false</code>。</p></li><li><p><code>boolean equalsIgnoreCase(String str)</code>：与前一个方法基本相似，只是忽略字符的大小写。</p></li><li><p><code>byte[] getBytes()</code>：将该 <code>String</code> 对象转换成 <code>byte</code> 数组。</p></li><li><p><code>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</code>：该方法将字符串中从 <code>srcBegin</code> 开始，到 <code>srcEnd</code> 结束的字符复制到 <code>dst</code> 字符数组中，其中 <code>dstBegin</code> 为目标字符数组的起始复制位置。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// s1 = I love java</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;I&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;v&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39; &#39;</span><span class="token punctuation">,</span><span class="token char">&#39;j&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;v&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;ejb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s1 = I love ejba</span>
s2<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>s1<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// I love ejba</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>int indexOf(int ch)</code>：找出 <code>ch</code> 字符在该字符串中第一次出现的位置。</p></li><li><p><code>int indexOf(int ch, int fromIndex)</code>：找出 <code>ch</code> 字符在该字符串中从 <code>fromIndex</code> 开始后第一次出现的位置。</p></li><li><p><code>int indexOf(String str)</code>：找出 <code>str</code> 子字符串在该字符串中第一次出现的位置。</p></li><li><p><code>int indexOf(String str, int fromIndex)</code>：找出 <code>str</code> 子字符串在该字符串中从 <code>fromIndex</code> 开始后第一次出现的位置。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;write once, run anywhere!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s.indexOf(&#39;r&#39;): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s.indexOf(&#39;r&#39;,2): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s.indexOf(ss): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
    s.indexOf(&#39;r&#39;): 1
    s.indexOf(&#39;r&#39;,2): 12
    s.indexOf(ss): 12
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>int lastIndexOf(int ch)</code>：找出 <code>ch</code> 字符在该字符串中最后一次出现的位置。</p></li><li><p><code>int lastIndexOf(int ch, int fromIndex)</code>：找出 <code>ch</code> 字符在该字符串中从 <code>fromIndex</code> 开始后最后一次出现的位置。</p></li><li><p><code>int lastIndexOf(String str)</code>：找出 <code>str</code> 子字符串在该字符串中最后一次出现的位置。</p></li><li><p><code>int lastIndexOf(String str, int fromIndex)</code>：找出 <code>str</code> 子字符串在该字符串中从 <code>fromIndex</code> 开始后最后一次出现的位置。</p></li><li><p><code>int length()</code>：返回当前字符串长度。</p></li><li><p><code>String replace(char oldChar, char newChar)</code>：将字符串中的第一个 <code>oldChar</code> 替换成 <code>newChar</code>。</p></li><li><p><code>boolean startsWith(String prefix)</code>：该 <code>String</code> 对象是否以 <code>prefix</code> 开始。</p></li><li><p><code>boolean startsWith(String prefix, int toffset)</code>：该 <code>String</code> 对象从 <code>toffset</code> 位置算起，是否以 <code>prefix</code> 开始。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;write once, run anywhere!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;write&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;once&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s.startsWith(ss): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s.startsWith(sss,6): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>sss<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
    s.startsWith(ss): true
    s.startsWith(sss,6): true
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>String substring(int beginIndex)</code>：获取从 <code>beginIndex</code> 位置开始到结束的子字符串。</p></li><li><p><code>String substring(int beginIndex, int endIndex)</code>：获取从 <code>beginIndex</code> 位置开始到 <code>endIndex</code> 位置的子字符串。</p></li><li><p><code>char[] toCharArray()</code>：将该 <code>String</code> 对象转换成 <code>char</code> 数组。</p></li><li><p><code>String toLowerCase()</code>：将字符串转换成小写。</p></li><li><p><code>String toUpperCase()</code>：将字符串转换成大写。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Class String&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s.toUpperCase(): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;s.toLowerCase(): &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
    s.toUpperCase(): JAVA.LANG.CLASS STRING
    s.toLowerCase(): java.lang.class string
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>static String valueOf(X x)</code>：一系列用于将基本类型值转换为 <code>String</code> 对象的方法。</li></ul><p><code>String</code> 类是不可变的，<code>String</code> 的实例一旦生成就不会再改变了，例如如下代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">;</span>
str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> <span class="token string">&quot;struts&quot;</span><span class="token punctuation">;</span>
str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> <span class="token string">&quot;spring&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序除了使用了 3 个字符串直接量之外，还会额外生成 2 个字符串直接量—— <code>&quot;java&quot;</code> 和 <code>&quot;struts&quot;</code> 连接生成的 <code>&quot;javastruts&quot;</code>，接着 <code>&quot;javastruts&quot;</code> 与 <code>&quot;spring&quot;</code> 连接生成的 <code>&quot;javastrutsspring&quot;</code>，程序中的 <code>str1</code> 依次指向 3 个不同的字符串对象。</p><blockquote><p>因为 <code>String</code> 是不可变的，所以会额外产生很多临时变量，使用 <code>StringBuffer</code> 或 <code>StringBuilder</code> 就可以避免这个问题。</p><p><code>StringBuilder</code> 提供了一系列插入、追加、改变该字符串里包含的字符序列的方法。</p><p>而 <code>StringBuffer</code> 与其用法完全相同，只是 <code>StringBuffer</code> 是线程安全的。</p><p><code>StringBuilder</code>、<code>StringBuffer</code> 有两个属性：<code>length</code> 和 <code>capacity</code>，其中 <code>length</code> 属性表示其包含的字符序列的长度。</p><p>与 <code>String</code> 对象的 <code>length</code> 不同的是，<code>StringBuilder</code>、<code>StringBuffer</code> 的 <code>length</code> 是可以改变的，可以通过<code>length()</code>、<code>setLength(int len)</code>方法来访问和修改其字符序列的长度。</p><p><code>capacity</code> 属性表示 <code>StringBuilder</code> 的容量， <code>capacity</code> 通常比 <code>length</code> 大，程序通常无须关心 <code>capacity</code> 属性。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 追加字符串 sb = &quot;java&quot;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 插入 sb = &quot;hello java&quot;</span>
        sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;hello &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 替换 sb = &quot;hello, java&quot;</span>
        sb<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 删除 sb = &quot;hellojava&quot;</span>
        sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 反转 sb = &quot;avajolleh&quot;</span>
        sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出9</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出16</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 改变StringBuilder的长度，只保留前面部分 sb = &quot;avajo&quot;</span>
        sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序示范了 <code>StringBuilder</code> 类的追加、插入、替换、删除等操作，这些操作改变了 <code>StringBuilder</code> 里的字符序列，这就是 <code>StringBuilder</code> 与 <code>String</code> 之间最大的区别：<code>StringBuilder</code> 的字符序列是可变的。从程序看到 <code>StringBuilder</code> 的 <code>length()</code> 方法返回其字符序列的长度，而 <code>capacity()</code> 返回值则比 <code>length()</code> 返回值大。</p><h3 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> <code>Math</code></h3><p>Java 提供了基本的+、-、*、/、%等基本算术运算的运算符，但对于更复杂的数学运算，例如，三角函数、对数运算、指数运算等则无能为力。</p><p>Java 提供了 <code>Math</code> 工具类来完成这些复杂的运算，<code>Math</code> 类是一个工具类，它的构造器被定义成 <code>private</code> 的，因此无法创建 <code>Math</code> 类的对象；<code>Math</code> 类中的所有方法都是类方法，可以直接通过类名来调用它们。</p><p><code>Math</code> 类除了提供了大量静态方法之外，还提供了两个静态 Field：<code>PI</code> 和 <code>E</code>，它们的值分别等于 <code>π</code> 和 <code>e</code>。</p><p><code>Math</code> 类的所有方法名都明确标识了该方法的作用，可查阅 API 来了解 <code>Math</code> 类各方法的说明。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/*---------下面是三角运算---------*/</span>
        <span class="token comment">// 将弧度转换成角度</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.toDegrees(1.57)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toDegrees</span><span class="token punctuation">(</span><span class="token number">1.57</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将角度转换为弧度</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.toRadians(90)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算反余弦，返回的角度范围在 0.0 到 pi 之间</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.acos(1.2)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算反正弦，返回的角度范围在 -pi/2 到 pi/2 之间</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.asin(0.8)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算反正切，返回的角度范围在 -pi/2 到 pi/2 之间</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.atan(2.3)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算三角余弦</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.cos(1.57)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">1.57</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算双曲余弦</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.cosh(1.2 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cosh</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算正弦</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.sin(1.57 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">1.57</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算双曲正弦</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.sinh(1.2 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sinh</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算三角正切</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.tan(0.8 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算双曲正切</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.tanh(2.1 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">tanh</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将矩形坐标 (x, y) 转换成极坐标 (r, thet))</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.atan2(0.1, 0.2)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*---------下面是取整运算---------*/</span>
        <span class="token comment">// 取整，返回小于目标数的最大整数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.floor(-1.2 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取整，返回大于目标数的最小整数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.ceil(1.2)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 四舍五入取整</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.round(2.3 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*---------下面是乘方、开方、指数运算---------*/</span>
        <span class="token comment">// 计算平方根</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.sqrt(2.3 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算立方根</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.cbrt(9)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回欧拉数 e 的n次幂</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.exp(2)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回 sqrt(x2 +y2)，没有中间溢出或下溢</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.hypot(4 , 4)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 按照 IEEE 754 标准的规定，对两个参数进行余数运算</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.IEEEremainder(5 , 2)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math<span class="token punctuation">.</span>IEEEremainder</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算乘方</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.pow(3, 2)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算自然对数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.log(12)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算底数为10的对数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.log10(9)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回参数与1之和的自然对数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.log1p(9)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log1p</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*---------下面是符号相关的运算---------*/</span>
        <span class="token comment">// 计算绝对值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.abs(-4.5)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 符号赋值，返回带有第二个浮点数符号的第一个浮点参数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.copySign(1.2, -1.0)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">copySign</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 符号函数，如果参数为 0，则返回 0；如果参数大于 0</span>
        <span class="token comment">// 则返回 1.0；如果参数小于 0，则返回 -1.0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.signum(2.3)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*---------下面是大小相关的运算---------*/</span>
        <span class="token comment">// 找出最大值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.max(2.3 , 4.5)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2.3</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算最小值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.min(1.2 , 3.4)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回第一个参数和第二个参数之间与第一个参数相邻的浮点数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.nextAfter(1.2, 1.0)：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">nextAfter</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回比目标数略大的浮点数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.nextUp(1.2 )：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">nextUp</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回一个伪随机数，该值大于等于 0.0 且小于 1.0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Math.random()：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="随机数" tabindex="-1"><a class="header-anchor" href="#随机数" aria-hidden="true">#</a> 随机数</h3><p><code>Random</code> 类专门用于生成一个伪随机数，它有两个构造器：一个构造器使用默认的种子（以当前时间作为种子），另一个构造器需要程序员显式传入一个 <code>long</code> 型整数的种子。</p><p><code>ThreadLocalRandom</code> 类是 Java 7 新增的一个类，它是 <code>Random</code> 的增强版。在并发访问的环境下，使用 <code>ThreadLocalRandom</code> 来代替 <code>Random</code> 可以减少多线程资源竞争，最终保证系统具有较好的性能。</p><p><code>ThreadLocalRandom</code> 类的用法与 <code>Random</code> 类的用法基本相似，它提供了一个静态的 <code>current()</code> 方法来获取 <code>ThreadLocalRandom</code> 对象，获取该对象之后即可调用各种 <code>nextXxx()</code> 方法来获取伪随机数了。</p><p><code>ThreadLocalRandom</code> 与 <code>Random</code> 都比 <code>Math</code> 的 <code>random()</code> 方法提供了更多的方式来生成各种伪随机数，可以生成浮点类型的伪随机数，也可以生成整数类型的伪随机数，还可以指定生成随机数的范围。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rand.nextBoolean()：&quot;</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        rand<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成0.0~1.0之间的伪随机double数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rand.nextDouble()：&quot;</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成0.0~1.0之间的伪随机float数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rand.nextFloat()：&quot;</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成平均值是 0.0，标准差是 1.0的伪高斯数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rand.nextGaussian()：&quot;</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成一个处于int整数取值范围的伪随机整数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rand.nextInt()：&quot;</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成0~26之间的伪随机整数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rand.nextInt(26)：&quot;</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 生成一个处于long整数取值范围的伪随机整数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;rand.nextLong()：&quot;</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Random</code> 使用一个 48 位的种子，如果这个类的两个实例是用同一个种子创建的，对它们以同样的顺序调用方法，则它们会产生相同的数字序列。</p><p>当使用默认的种子构造 <code>Random</code> 对象时，它们属于同一个种子。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeedTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Random</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第一个种子为50的Random对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r1.nextBoolean():\\t&quot;</span> <span class="token operator">+</span> r1<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r1.nextInt():\\t\\t&quot;</span> <span class="token operator">+</span> r1<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r1.nextDouble():\\t&quot;</span> <span class="token operator">+</span> r1<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r1.nextGaussian():\\t&quot;</span> <span class="token operator">+</span> r1<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Random</span> r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第二个种子为50的Random对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r2.nextBoolean():\\t&quot;</span> <span class="token operator">+</span> r2<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r2.nextInt():\\t\\t&quot;</span> <span class="token operator">+</span> r2<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r2.nextDouble():\\t&quot;</span> <span class="token operator">+</span> r2<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r2.nextGaussian():\\t&quot;</span> <span class="token operator">+</span> r2<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Random</span> r3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;种子为100的Random对象&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r3.nextBoolean():\\t&quot;</span> <span class="token operator">+</span> r3<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r3.nextInt():\\t\\t&quot;</span> <span class="token operator">+</span> r3<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r3.nextDouble():\\t&quot;</span> <span class="token operator">+</span> r3<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;r3.nextGaussian():\\t&quot;</span> <span class="token operator">+</span> r3<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208042345738.png" alt="image-20220804234505441"></p><p>如果两个 <code>Random</code> 对象的种子相同，而且方法的调用顺序也相同，则它们会产生相同的数字序列。就是说，<code>Random</code> 产生的数字并不是真正随机的，而是一种伪随机。</p><p>为了避免两个 <code>Random</code> 对象产生相同的数字序列，通常推荐使用当前时间作为 <code>Random</code> 对象的种子，如下代码所示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在多线程环境下使用 <code>ThreadLocalRandom</code> 的方式与使用 <code>Random</code> 基本类似，如下程序片段示范了 <code>ThreadLocalRandom</code> 的用法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ThreadLocalRandom</span> rand <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 生成一个4～20之间的伪随机整数</span>
<span class="token keyword">int</span> val1 <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 生成一个2.0～10.0之间的伪随机浮点数</span>
<span class="token keyword">int</span> val2 <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal" aria-hidden="true">#</a> <code>BigDecimal</code></h3><p>前面在介绍 <code>float</code>、<code>double</code> 两种基本浮点类型时已经指出，这两个基本类型的浮点数容易引起精度丢失。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 + 0.01=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0.05</span> <span class="token operator">+</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1.0 - 0.42=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> <span class="token number">0.42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;4.015 * 100=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4.015</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;123.3 / 100=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">123.3</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208042349704.png" alt="image-20220804234925449"></p><p>不仅是 Java，很多编程语言也存在这样的问题。</p><p>为了能精确表示、计算浮点数，Java 提供了 <code>BigDecimal</code> 类，该类提供了大量的构造器用于创建 <code>BigDecimal</code> 对象，包括把所有的基本数值型变量转换成一个 <code>BigDecimal</code> 对象，也包括利用数字字符串、数字字符数组来创建 <code>BigDecimal</code> 对象。</p><p>查看 <code>BigDecimal</code> 类的 <code>BigDecimal(double val)</code> 构造器的详细说明时，可以看到不推荐使用该构造器的说明，主要是因为使用该构造器时有一定的不可预知性。</p><p>当程序使用 <code>new BigDecimal(0.1)</code> 来创建一个 <code>BigDecimal</code> 对象时，它的值并不是 0.1，它实际上等于 0.1000000000000000055511151231257827021181583404541015625。</p><p>这是因为 0.1 无法准确地表示为 <code>double</code> 浮点数，所以传入 <code>BigDecimal</code> 构造器的值不会正好等于 0.1（虽然表面上等于该值）。</p><p>如果使用 <code>BigDecimal(String val)</code> 构造器的结果是可预知的——写入 <code>new BigDecimal(&quot;0.1&quot;)</code> 将创建一个 <code>BigDecimal</code>，它正好等于预期的 0.1。</p><p>因此通常建议优先使用基于 <code>String</code> 的构造器。</p><p>如果必须使用 <code>double</code> 浮点数作为 <code>BigDecimal</code> 构造器的参数时，不要直接将该 <code>double</code> 浮点数作为构造器参数创建 <code>BigDecimal</code> 对象，而是应该通过 <code>BigDecimal.valueOf(double value)</code> 静态方法来创建 <code>BigDecimal</code> 对象。</p><p><code>BigDecimal</code> 类提供了 <code>add()</code>、<code>subtract()</code>、<code>multiply()</code>、<code>divide()</code>、<code>pow()</code> 等方法对精确浮点数进行常规算术运算。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.05&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> f2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用String作为BigDecimal构造器参数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 + 0.01=&quot;</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 - 0.01=&quot;</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 * 0.01=&quot;</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 / 0.01=&quot;</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;使用double作为BigDecimal构造器参数：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 + 0.01=&quot;</span> <span class="token operator">+</span> f3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 - 0.01=&quot;</span> <span class="token operator">+</span> f3<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 * 0.01=&quot;</span> <span class="token operator">+</span> f3<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 / 0.01=&quot;</span> <span class="token operator">+</span> f3<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208042352500.png" alt="image-20220804235226231"></p><p>从上面运行结果可以看出 <code>BigDecimal</code> 进行算术运算的效果，而且可以看出创建 <code>BigDecimal</code> 对象时，一定要使用 <code>String</code> 对象作为构造器参数，而不是直接使用 <code>double</code> 数字。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>创建 <code>BigDecimal</code> 对象时，不要直接使用 <code>double</code> 浮点数作为参数来调用 <code>BigDecimal</code> 构造器，否则同样会发生精度丢失的问题。</p></div><p>如果程序中要求对 <code>double</code> 浮点数进行加、减、乘、除基本运算，则需要先将 <code>double</code> 类型数值包装成 <code>BigDecimal</code> 对象，调用 <code>BigDecimal</code> 对象的方法执行运算后再将结果转换成 <code>double</code> 型变量。</p><p>这是比较烦琐的过程，可以考虑以 <code>BigDecimal</code> 为基础定义一个 <code>Arith</code> 工具类，该工具类代码如下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Arith</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认除法运算精度</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEF_DIV_SCALE</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">// 构造器私有，让这个类不能实例化</span>
    <span class="token keyword">private</span> <span class="token class-name">Arith</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 提供精确的加法运算
     *
     * <span class="token keyword">@param</span> <span class="token parameter">v1</span> 被加数
     * <span class="token keyword">@param</span> <span class="token parameter">v2</span> 加数
     * <span class="token keyword">@return</span> 两个参数的和
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 提供精确的减法运算
     *
     * <span class="token keyword">@param</span> <span class="token parameter">v1</span> 被减数
     * <span class="token keyword">@param</span> <span class="token parameter">v2</span> 减数
     * <span class="token keyword">@return</span> 两个参数的差
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 提供精确的乘法运算
     *
     * <span class="token keyword">@param</span> <span class="token parameter">v1</span> 被乘数
     * <span class="token keyword">@param</span> <span class="token parameter">v2</span> 乘数
     * <span class="token keyword">@return</span> 两个参数的积
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到 小数点以后10位的数字四舍五入
     *
     * <span class="token keyword">@param</span> <span class="token parameter">v1</span> 被除数
     * <span class="token keyword">@param</span> <span class="token parameter">v2</span> 除数
     * <span class="token keyword">@return</span> 两个参数的商
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">double</span> v1<span class="token punctuation">,</span> <span class="token keyword">double</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BigDecimal</span> b1 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BigDecimal</span> b2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token constant">DEF_DIV_SCALE</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0.05 + 0.01=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arith</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1.0 - 0.42=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arith</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;4.015 * 100=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arith</span><span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">4.015</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;123.3 / 100=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arith</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">123.3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208042355986.png" alt="image-20220804235504721"></p><h2 id="处理日期的类" tabindex="-1"><a class="header-anchor" href="#处理日期的类" aria-hidden="true">#</a> 处理日期的类</h2><p>Java 还提供了一系列用于处理日期、时间的类，包括创建日期、时间对象，获取系统当前日期、时间等操作。</p><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> <code>Date</code></h3><p>此处的 <code>Date</code> 是指 <code>java.util</code> 包下的 <code>Date</code> 类，而不是 <code>java.sql</code> 包下的 <code>Date</code> 类，<code>Date</code> 对象既包含日期，也包含时间。</p><p><code>Date</code> 类提供了 6 个构造器，其中 4 个已经 <code>Deprecated</code>（Java 不再推荐使用，使用不再推荐的构造器时编译器会提出警告信息，并导致程序性能、安全性等方面的问题），剩下的两个构造器如下所示。</p><blockquote><ol><li><code>Date()</code>：生成一个代表当前日期时间的 <code>Date</code> 对象。该构造器在底层调用 <code>System.currentTimeMillis()</code> 获得 <code>long</code> 整数作为日期参数。</li><li><code>Date(long date)</code>：根据指定的 <code>long</code> 型整数来生成一个 <code>Date</code> 对象。该构造器的参数表示创建的 <code>Date</code> 对象和 GMT 1970 年 1 月 1 日 00:00:00 之间的时间差，以毫秒作为计时单位。</li></ol></blockquote><p><code>Date</code> 对象的大部分方法也 <code>Deprecated</code> 了，剩下为数不多的几个方法。</p><blockquote><ol><li><code>boolean after(Date when)</code>：测试该日期是否在指定日期 <code>when</code> 之后。</li><li><code>boolean before(Date when)</code>：测试该日期是否在指定日期 <code>when</code> 之前。</li><li><code>int compareTo(Date anotherDate)</code>：比较两个日期的大小，后面的时间大于前面的时间时返回-1，否则返回 1。</li><li><code>boolean equals(Object obj)</code>：当两个时间表示同一时刻时返回 <code>true</code>。</li><li><code>long getTime()</code>：返回该时间对应的 <code>long</code> 型整数，即从 GMT 1970-01-0100:00:00 到该 <code>Date</code> 对象之间的时间差，以毫秒作为计时单位。</li><li><code>void setTime(long time)</code>：设置该 <code>Date</code> 对象的时间。</li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取当前时间之后100ms的时间</span>
        <span class="token class-name">Date</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>Date</code> 类的很多方法已经不推荐使用了，所以 <code>Date</code> 类的功能已经被大大削弱了。</p><p>例如，对时间进行加减运算，获取指定 <code>Date</code> 对象里年、月、日的所有方法都已被 <code>Deprecated</code>，如果需要对日期进行这些运算，则应该使用 <code>Calendar</code> 工具类。</p><h3 id="calendar" tabindex="-1"><a class="header-anchor" href="#calendar" aria-hidden="true">#</a> <code>Calendar</code></h3><p><code>Calendar</code> 是一个抽象类，它用于表示日历。</p><p>历史上有着许多种纪年方法，它们的差异实在太大了，比如说一个人的生日是“七月七日”，那么一种可能是阳（公）历的七月七日，但也可以是阴（农）历的日期。为了统一计时，全世界通常选择最普及、最通用的日历：<code>Gregorian</code> <code>Calendar</code>，也就是我们在讲述年份时常用的“公元几几年”。</p><p><code>Calendar</code> 类本身是一个抽象类，它是所有日历类的模板，并提供了一些所有日历通用的方法；但它本身不能直接实例化，程序只能创建 <code>Calendar</code> 子类的实例，Java 本身提供了一个 <code>GregorianCalendar</code> 类，一个代表 <code>GregorianCalendar</code> 的子类，它代表了我们通常所说的公历。</p>`,193),k=s("code",null,"Calendar",-1),d=s("code",null,"Calendar",-1),r={href:"http://www.alphaworks.ibm.com/tech/calendars",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"Internet",-1),v=a(`<p><code>Calendar</code> 类是一个抽象类，所以不能使用构造器来创建 <code>Calendar</code> 对象。但它提供了几个静态 <code>getInstance()</code> 方法来获取 <code>Calendar</code> 对象，这些方法根据 <code>TimeZone</code>，<code>Locale</code> 类来获取特定的 <code>Calendar</code>，如果不指定 <code>TimeZone</code>、<code>Locale</code>，则使用默认的 <code>TimeZone</code>、<code>Locale</code> 来创建 <code>Calendar</code>。</p><p><code>Calendar</code> 与 <code>Date</code> 都是表示日期的工具类，它们直接可以自由转换，如下代码所示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从Calendar 对象中取出Date 对象</span>
<span class="token class-name">Date</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过Date对象获得对应的Calendar对象</span>
<span class="token comment">// 因为Calendar/GregorianCalendar没有构造函数可以接收Date对象</span>
<span class="token comment">// 所以必须先获得一个Calendar实例，然后调用其setTime()方法</span>
<span class="token class-name">Calendar</span> calendar2 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar2<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Calendar</code> 类提供了大量访问、修改日期时间的方法，常用方法如下。</p><blockquote><ol><li><code>void add(int field, int amount)</code>：根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li><li><code>int get(int field)</code>：返回指定日历字段的值。</li><li><code>int getActualMaximum(int field)</code>：返回指定日历字段可能拥有的最大值。例如月，最大值为 11。</li><li><code>int getActualMinimum(int field)</code>：返回指定日历字段可能拥有的最小值。例如月，最小值为 0。</li><li><code>void roll(int field, int amount)</code>：与 add()方法类似，区别在于加上 amount 后超过了该字段所能表示的最大范围时，也不会向上一个字段进位。</li><li><code>void set(int field, int value)</code>：将给定的日历字段设置为给定值。</li><li><code>void set(int year, int month, int date)</code>：设置 Calendar 对象的年、月、日 3 个字段的值。</li><li><code>void set(int year, int month, int date, int hourOfDay, int minute, int second)</code>：设置 Calendar 对象的年、月、日、时、分、秒 6 个字段的值。</li></ol></blockquote><p>上面的很多方法都需要一个 <code>int</code> 类型的 field 参数，field 是 <code>Calendar</code> 类的静态 Field，如 <code>Calendar.YEAR</code>、<code>Calendar.MONTH</code> 等分别代表了年、月、日、小时、分钟、秒等时间字段。</p><p><mark><code>Calendar.MONTH</code> 字段代表月份，月份的起始值不是 1，而是 0，所以要设置 8 月时，用 7 而不是 8。</mark></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span></span><span class="token punctuation">;</span>
<span class="token comment">// 静态导入</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalendarTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取出年</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取出月份</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取出日</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">DATE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 分别设置年、月、日、小时、分钟、秒</span>
        c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">08</span><span class="token punctuation">,</span> <span class="token number">09</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2022-08-09 12:32:23</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将Calendar的年前推1年</span>
        c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">YEAR</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2022-08-09 12:32:23</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将Calendar的月前推8个月</span>
        c<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2022-08-09 12:32:23</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>上面程序使用了静态导入，它导入了 <code>Calendar</code> 类里的所有静态 Field，所以上面程序可以直接使用 <code>Calendar</code> 类的 <code>YEAR</code>、<code>MONTH</code>、<code>DATE</code> 等静态 Field。</p></div><p><code>Calendar</code> 类还有如下几个注意点。</p><p><strong><code>add</code> 与 <code>roll</code> 的区别：</strong></p><p><code>add(int field, int amount)</code>的功能非常强大，<code>add</code> 主要用于改变 <code>Calendar</code> 的特定字段的值。如果需要增加某字段的值，则让 <code>amount</code> 为正数；如果需要减少某字段的值，则让 <code>amount</code> 为负数即可。</p><p><code>add(int field, int amount)</code>有如下两条规则。</p><ul><li>当被修改的字段超出它允许的范围时，会发生进位，即上一级字段也会增大。例如：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Calendar</span> cal1 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2022-8-9</span>
cal1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2022-8-9=&gt; 2023-2-9</span>
cal1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果下一级字段也需要改变，那么该字段会修正到变化最小的值。例如：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Calendar</span> cal2 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2022-8-31</span>
cal2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 因为进位后月份改为2月，2月没有31日，自动变成28日</span>
<span class="token comment">// 2022-8-31=&gt; 2023-2-28</span>
cal2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>roll</code> 的规则与 <code>add</code> 的处理规则不同：当被修改的字段超出它允许的范围时，上一级字段不会增大。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Calendar</span> cal3 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2022-8-23</span>
cal3<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// MONTH字段“进位”，但YEAR字段并不增加</span>
<span class="token comment">// 2022-8-23=&gt; 2022-2-23</span>
cal3<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下一级字段的处理规则与 <code>add</code> 相似：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Calendar</span> cal4 <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2022-8-31</span>
cal4<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// MONTH字段“进位”后变成2，2月没有31日</span>
<span class="token comment">// YEAR字段不会改变，2022年2月只有28天</span>
<span class="token comment">// 2022-8-31=&gt; 2022-2-28</span>
cal4<span class="token punctuation">.</span><span class="token function">roll</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置 <code>Calendar</code> 的容错性：</strong></p><p>当我们调用 <code>Calendar</code> 对象的 <code>set</code> 方法来改变指定时间字段上的值时，有可能传入一个不合法的参数，例如为 <code>MONTH</code> 字段设置 13，这将会导致怎样的后果呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LenientTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Calendar</span> cal <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ①结果是YEAR字段加1，MONTH字段为1（2月）</span>
        cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭容错性</span>
        cal<span class="token punctuation">.</span><span class="token function">setLenient</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ②导致运行时异常</span>
        cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>① 处代码可以正常运行，因为设置 <code>MONTH</code> 字段的值为 13，将会导致 <code>YEAR</code> 字段加 1；② 处代码将会导致运行时异常，因为设置的 <code>MONTH</code> 字段值超出了 <code>MONTH</code> 字段允许的范围。</p><p><code>Calendar</code> 提供了一个 <code>setLenient()</code> 用于设置它的容错性，<code>Calendar</code> 默认支持较好的容错性，通过 <code>setLenient(false)</code> 可以关闭 <code>Calendar</code> 的容错性，让它进行严格的参数检查。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>Calendar</code> 有两种解释日历字段的模式：<code>lenient</code> 模式和 <code>non-lenient</code> 模式。当 <code>Calendar</code> 处于 <code>lenient</code> 模式时，每个时间字段可接受超出它允许范围的值；当 <code>Calendar</code> 处于 <code>non-lenient</code> 模式时，如果为某个时间字段设置的值超出了它允许的取值范围，程序将会抛出异常。</p></div><p><strong><code>set</code> 方法延迟修改：</strong></p><p><code>set(f, value)</code> 方法将日历字段 <code>f</code> 更改为 <code>value</code>，此外，它还设置了一个内部成员变量，以指示日历字段 <code>f</code> 已经被更改。</p><p>尽管日历字段 <code>f</code> 是立即更改的，但该 <code>Calendar</code> 所代表的时间却不会立即修改，直到下次调用 <code>get()</code>、<code>getTime()</code>、<code>getTimeInMillis()</code>、<code>add()</code>或 <code>roll()</code> 时才会重新计算日历的时间。</p><p>这被称为 <code>set</code> 方法的延迟修改，采用延迟修改的优势是多次调用 <code>set()</code> 不会触发多次不必要的计算（需要计算出一个代表实际时间的 <code>long</code> 型整数）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Calendar</span> cal <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2022-8-31</span>
        cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将月份设为9，但9月31日不存在</span>
        <span class="token comment">// 如果立即修改，系统将会把cal自动调整到10月1日</span>
        cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ①下面代码输出10月1日</span>
        <span class="token comment">// System.out.println(cal.getTime());</span>
        <span class="token comment">// ②设置DATE字段为5</span>
        cal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">DATE</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ③</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cal<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果程序在 ① 号代码处输出当前 <code>Calendar</code> 里的日期，也会看到输出 2022-10-1，③ 号代码处将输出 2022-10-5。</p><p>如果程序将 ① 处代码注释起来，因为 <code>Calendar</code> 的 <code>set()</code> 方法具有延迟修改的特性，即调用 <code>set()</code> 方法后 <code>Calendar</code> 实际上并未计算真实的日期，它只是使用内部成员变量表记录 <code>MONTH</code> 字段被修改为 8，接着程序设置 <code>DATE</code> 字段值为 5，程序内部再次记录 <code>DATE</code> 字段为 5——就是 9 月 5 日，因此看到 ③ 处输出 2022-9-5。</p><h3 id="timezone" tabindex="-1"><a class="header-anchor" href="#timezone" aria-hidden="true">#</a> <code>TimeZone</code></h3><p>在地理上，地球被划分成 24 个时区，中国北京时间属于东八区，而程序中对时间的默认实现是以格林威治时间为标准的，这样就产生了 8 小时的时间差。为了让程序更加通用，可以使用 <code>TimeZone</code> 设置程序中时间所属的时区，其中 <code>TimeZone</code> 就代表了时区。</p><p><code>TimeZone</code> 是一个抽象类，不能调用其构造器来创建实例，但可以调用它的静态方法：<code>getDefault()</code> 或 <code>getTimeZone()</code> 得到 <code>TimeZone</code> 实例。</p><p>其中 <code>getDefault()</code> 方法用于获得运行机器上的默认时区，默认时区可以通过修改操作系统的相关配置来进行调整；<code>getTimeZone()</code> 则根据时区 <code>ID</code> 来获取对应的时区。</p><p><code>TimeZone</code> 类提供了一些有用的方法用于获取时区的相关信息。</p><ol><li><code>static String[] getAvailableIDs()</code>：获取 Java 所支持的所有时区 <code>ID</code>。</li><li><code>static TimeZone getDefault()</code>：获取运行机器上默认的时区。</li><li><code>String getDisplayName()</code>：获取该 <code>TimeZone</code> 对象的时区名称。</li><li><code>String getID()</code>：获取该时区的 <code>ID</code>。</li><li><code>static TimeZone getTimeZone(String ID)</code>：获取指定 <code>ID</code> 对应的 <code>TimeZone</code> 对象。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeZoneTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 取得Java所支持的所有时区ID</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids <span class="token operator">=</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getAvailableIDs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TimeZone</span> my <span class="token operator">=</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取系统默认时区的ID：Asia/Shanghai</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取系统默认时区的名称：中国标准时间</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取指定ID的时区名称：纽芬兰标准时间</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">&quot;CNT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><p>正则表达式是一个强大的字符串处理工具，可以对字符串进行查找、提取、分割、替换等操作。 <code>String</code> 类里也提供了如下几个特殊的方法。</p><ol><li><code>boolean matches(String regex)</code>：判断该字符串是否匹配指定的正则表达式。</li><li><code>String replaceAll(String regex, String replacement)</code>：将该字符串中所有匹配 <code>regex</code> 的子串替换成 <code>replacement</code>。</li><li><code>String replaceFirst(String regex, String replacement)</code>：将该字符串中第一个匹配 <code>regex</code> 的子串替换成 <code>replacement</code>。</li><li><code>String[] split(String regex)</code>：以 <code>regex</code> 作为分隔符，把该字符串分割成多个子串。</li></ol><p>上面这些特殊的方法都依赖于 Java 提供的正则表达式支持，除此之外，Java 还提供了 <code>Pattern</code> 和 <code>Matcher</code> 两个类专门用于提供正则表达式支持。</p><p>正则表达式是一个用于匹配字符串的模板。可以说，我们定义的任意字符串都可以当成正则表达式使用，例如 <code>&quot;abc&quot;</code>，它也是一个正则表达式，只是它只能匹配 <code>&quot;abc&quot;</code> 字符串。</p><h3 id="创建正则表达式" tabindex="-1"><a class="header-anchor" href="#创建正则表达式" aria-hidden="true">#</a> 创建正则表达式</h3><p>正则表达式所支持的合法字符。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208091815685.jpeg" alt="img"></p><p>除此之外，正则表达式中有一些特殊字符，这些特殊字符在正则表达式中有其特殊的用途，比如前面介绍的反斜线 <code>\\</code>。如果需要匹配这些特殊字符，就必须首先将这些字符转义，也就是在前面添加一个反斜线 <code>\\</code>。</p><p>正则表达式中的特殊字符如表。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208091816973.jpeg" alt="img"></p><p>将上面多个字符拼起来，就可以创建一个正则表达式。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;<span class="token entity" title="\\\\">\\\\</span>u0041<span class="token entity" title="\\\\">\\\\</span>&quot;</span>  // 匹配a<span class="token punctuation">\\</span>
<span class="token string">&quot;<span class="token entity" title="\\\\">\\\\</span>0101<span class="token entity" title="\\t">\\t</span>&quot;</span>   // 匹配a<span class="token operator">&lt;</span>制表符<span class="token operator">&gt;</span>
<span class="token string">&quot;\\?\\[&quot;</span>   // 匹配?<span class="token punctuation">[</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的正则表达式依然只能匹配单个字符，这是因为还未在正则表达式中使用“通配符”，“通配符”是可以匹配多个字符的特殊字符。</p><p>正则表达式中的“通配符”远远超出了普通通配符的功能，它被称为预定义字符，正则表达式支持如表。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208091819588.jpeg" alt="img"></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>上面的 7 个预定义字符其实很容易记忆：</p><p><code>d</code> 是 <code>digit</code> 的意思，代表数字；</p><p><code>s</code> 是 <code>space</code> 的意思，代表空白；</p><p><code>w</code> 是 <code>word</code> 的意思，代表单词。</p><p><code>d</code>、<code>s</code>、<code>w</code> 的大写形式恰好匹配与之相反的字符。</p></div><p>有了上面的预定义字符后，我们就可以创建更强大的正则表达式。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>c<span class="token punctuation">\\</span>wt  // 可以匹配cat、cbt、cct、c0t、c9t等一批字符串
<span class="token punctuation">\\</span>d<span class="token punctuation">\\</span>d<span class="token punctuation">\\</span>d-<span class="token punctuation">\\</span>d<span class="token punctuation">\\</span>d<span class="token punctuation">\\</span>d-<span class="token punctuation">\\</span>d<span class="token punctuation">\\</span>d<span class="token punctuation">\\</span>d<span class="token punctuation">\\</span>d  // 匹配如000-000-0000形式的电话号码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在一些特殊情况下，例如，若只想匹配 a ～ f 的字母，或者匹配除了 ab 之外的所有小写字母，或者匹配中文字符，上面这些预定义字符就无能为力了，此时就需要使用方括号表达式，方括号表达式有如表。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208091822377.jpeg" alt="img"></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>方括号表达式比前面的预定义字符灵活多了，几乎可以匹配任何字符。</p><p>例如，若需要匹配所有的中文字符，就可以利用 <code>[\\u0041-\\u0056]</code> 形式——因为所有中文字符的 <code>Unicode</code> 值是连续的，只要找出所有中文字符中最小、最大的 <code>Unicode</code> 值，就可以利用上面形式来匹配所有的中文字符。</p></div><p>正则表示还支持圆括号表达式，用于将多个表达式组成一个子表达式，圆括号中可以使用或运算符 <code>|</code>。例如，正则表达式 <code>&quot;(public|protected|private)&quot;</code> 用于匹配 Java 的三个访问控制符其中之一。</p><p>除此之外，Java 正则表达式还支持如表所示的几个边界匹配符。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208091824086.jpeg" alt="img"></p><p>前面例子中需要建立一个匹配 000-000-0000 形式的电话号码时，我们使用了 <code>\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d</code> 正则表达式，这看起来比较烦琐。</p><p>实际上，正则表达式还提供了数量标识符，正则表达式支持的数量标识符有如下几种模式。</p><ol><li><code>Greedy</code>（贪婪模式）：数量表示符默认采用贪婪模式，除非另有表示。贪婪模式的表达式会一直匹配下去，直到无法匹配为止。如果你发现表达式匹配的结果与预期的不符，很有可能是因为——你以为表达式只会匹配前面几个字符，而实际上它是贪婪模式，所以会一直匹配下去。</li><li><code>Reluctant</code>（勉强模式）：用问号后缀 <code>?</code> 表示，它只会匹配最少的字符。也称为最小匹配模式。</li><li><code>Possessive</code>（占有模式）：用加号后缀 <code>+</code> 表示，目前只有 Java 支持占有模式，通常比较少用。</li></ol><p>三种模式的数量表示符如表所示。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208091826926.jpeg" alt="img"></p><p>关于贪婪模式和勉强模式的对比，看如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;hello , java!&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 贪婪模式的正则表达式</span>
        <span class="token comment">// 输出■ , java!</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;■&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 勉强模式的正则表达式</span>
        <span class="token comment">// 输出■hello , java!</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w*?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;■&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当从 <code>&quot;hello , java!&quot;</code> 字符串中查找匹配 <code>&quot;\\\\w*&quot;</code> 子串时，因为 <code>&quot;\\\\w*&quot;</code> 使用了贪婪模式，数量表示符 <code>*</code> 会一直匹配下去，所以该字符串前面的所有单词字符都被它匹配到，直到遇到空格，所以替换后的效果是 <code>&quot;■ , java!&quot;</code> 如果使用勉强模式，数量表示符 <code>*</code> 会尽量匹配最少字符，即匹配 0 个字符，所以替换后的结果是 <code>&quot;■hello , java!&quot;</code>。</p><h3 id="使用正则表达式" tabindex="-1"><a class="header-anchor" href="#使用正则表达式" aria-hidden="true">#</a> 使用正则表达式</h3><p>一旦在程序中定义了正则表达式，就可以使用 <code>Pattern</code> 和 <code>Matcher</code> 来使用正则表达式。</p><p><code>Pattern</code> 对象是正则表达式编译后在内存中的表示形式，因此，正则表达式字符串必须先被编译为 <code>Pattern</code> 对象，然后再利用该 <code>Pattern</code> 对象创建对应的 <code>Matcher</code> 对象。执行匹配所涉及的状态保留在 <code>Matcher</code> 对象中，多个 <code>Matcher</code> 对象可共享同一个 <code>Pattern</code> 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 将一个字符串编译成Pattern对象</span>
<span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;a*b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用Pattern对象创建Matcher对象</span>
<span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;aaaaab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回true</span>
<span class="token keyword">boolean</span> b <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义的 <code>Pattern</code> 对象可以多次重复使用。</p><p>如果某个正则表达式仅需一次使用，则可直接使用 <code>Pattern</code> 类的静态 <code>matches</code> 方法，此方法自动把指定字符串编译成匿名的 <code>Pattern</code> 对象，并执行匹配，如下所示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 返回true</span>
<span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;a*b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaaaab&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>采用这种语句每次都需要重新编译新的 <code>Pattern</code> 对象，不能重复利用已编译的 <code>Pattern</code> 对象，所以效率不高。</p><p><code>Pattern</code> 是不可变类，可供多个并发线程安全使用。</p><p><code>Matcher</code> 类提供了如下几个常用方法。</p><blockquote><ol><li><code>find()</code>：返回目标字符串中是否包含与 <code>Pattern</code> 匹配的子串。</li><li><code>group()</code>：返回上一次与 <code>Pattern</code> 匹配的子串。</li><li><code>start()</code>：返回上一次与 <code>Pattern</code> 匹配的子串在目标字符串中的开始位置。</li><li><code>end()</code>：返回上一次与 <code>Pattern</code> 匹配的子串在目标字符串中的结束位置加 1。</li><li><code>lookingAt()</code>：返回目标字符串前面部分与 <code>Pattern</code> 是否匹配。</li><li><code>matches()</code>：返回整个目标字符串与 <code>Pattern</code> 是否匹配。</li><li><code>reset()</code>，将现有的 <code>Matcher</code> 对象应用于一个新的字符序列。</li></ol></blockquote><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>在 <code>Pattern</code>、<code>Matcher</code> 类的介绍中经常会看到一个 <code>CharSequence</code> 接口，该接口代表一个字符序列，其中 <code>CharBuffer</code>、<code>String</code>、<code>StringBuffer</code>、<code>StringBuilder</code> 都是它的实现类。简单地说，<code>CharSequence</code> 代表一个各种表示形式的字符串。</p></div><p>通过 <code>Matcher</code> 类的 <code>find()</code> 和 <code>group()</code> 方法可以从目标字符串中依次取出特定子串（匹配正则表达式的子串）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FindGroup</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个Pattern对象，并用它建立一个Matcher对象</span>
        <span class="token class-name">Matcher</span> m <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">&quot;Java is very easy!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    Java
    is
    very
    easy
    Java ava va a is is s very very ery ry y easy easy asy sy y
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>find()</code> 方法依次查找字符串中与 <code>Pattern</code> 匹配的子串，一旦找到对应的子串，下次调用 <code>find()</code> 方法时将接着向下查找。</p><p>除此之外，<code>find()</code> 方法还可以传入一个 <code>int</code> 类型的参数，带 <code>int</code> 参数的 <code>find()</code> 方法从该 <code>int</code> 索引处向下搜索。</p><p><code>start()</code> 和 <code>end()</code> 方法主要用于确定子串在目标字符串中的位置，如下程序所示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartEnd</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个Pattern对象，并用它建立一个Matcher对象</span>
        <span class="token class-name">String</span> regStr <span class="token operator">=</span> <span class="token string">&quot;Java is very easy!&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;目标字符串是：&quot;</span> <span class="token operator">+</span> regStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> m <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>regStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;子串的起始位置：&quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;，其结束位置：&quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    目标字符串是：Java is very easy!
    Java子串的起始位置：0，其结束位置：4
    is子串的起始位置：5，其结束位置：7
    very子串的起始位置：8，其结束位置：12
    easy子串的起始位置：13，其结束位置：17
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序使用 <code>find()</code>、<code>group()</code> 方法逐项取出目标字符串中与指定正则表达式匹配的子串，并使用 <code>start()</code>、<code>end()</code> 方法返回子串在目标字符串中的位置。</p><p><code>matches()</code> 和 <code>lookingAt()</code> 方法有点相似，只是 <code>matches()</code> 方法要求整个字符串和 <code>Pattern</code> 完全匹配时才返回 <code>true</code>，而 <code>lookingAt()</code> 只要字符串以 <code>Pattern</code> 开头就会返回 <code>true</code>。<code>reset()</code> 方法可将现有的 <code>Matcher</code> 对象应用于新的字符序列。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MatchesTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mails <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;kongyeeku@163.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kongyeeku@gmail.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ligang@crazyit.org&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wawa@abc.xx&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> mailRegEx <span class="token operator">=</span> <span class="token string">&quot;\\\\w{3,20}@\\\\w+\\\\.(com|org|cn|net|gov)&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Pattern</span> mailPattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>mailRegEx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> mail <span class="token operator">:</span> mails<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                matcher <span class="token operator">=</span> mailPattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                matcher<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>mail<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">String</span> result <span class="token operator">=</span> mail <span class="token operator">+</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;是&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;不是&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;一个有效的邮件地址！&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序创建了一个邮件地址的 <code>Pattern</code>，接着用这个 <code>Pattern</code> 与多个邮件地址进行匹配。当程序中的 <code>Matcher</code> 为 <code>null</code> 时，程序调用 <code>matcher()</code> 方法来创建一个 <code>Matcher</code> 对象，一旦 <code>Matcher</code> 对象被创建，程序就调用 <code>Matcher</code> 的 <code>reset()</code> 方法将该 <code>Matcher</code> 应用于新的字符序列。</p><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>从某个角度来看，<code>Matcher</code> 的 <code>matches()</code>、<code>lookingAt()</code> 和 <code>String</code> 类的 <code>equals()</code>、<code>startsWith()</code> 有点相似。</p><p>区别是 <code>String</code> 类的 <code>equals()</code> 和 <code>startsWith()</code> 都是与字符串进行比较，而 <code>Matcher</code> 的 <code>matches()</code> 和 <code>lookingAt()</code> 则是与正则表达式进行匹配。</p></div><p>事实上，<code>String</code> 类里也提供了 <code>matches()</code> 方法，该方法返回该字符串是否匹配指定的正则表达式。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token string">&quot;kongyeeku@163.com&quot;</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\w{3,20}@\\\\w+\\\\.(com|org|cn|net|gov)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，还可以利用正则表达式对目标字符串进行分割、查找、替换等操作，看如下例子程序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplaceTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Java has regular expressions in 1.4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;regular expressions now expressing in Java&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Java represses oracular expressions&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;re\\\\w*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> msgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                matcher <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                matcher<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>msgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;哈哈:)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>String</code> 类中也提供了 <code>replaceAll()</code>、<code>replaceFirst()</code>、<code>split()</code> 等方法。</p><p>下面的例子程序直接使用 <code>String</code> 类提供的正则表达式功能来进行替换和分割。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringReg</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msgs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Java has regular expressions in 1.4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;regular expressions now expressing in Java&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Java represses oracular expressions&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">&quot;re\\\\w*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;哈哈:)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    Java has 哈哈:) expressions in 1.4
    [Java, has, regular, expressions, in, 1.4]
    哈哈:) expressions now expressing in Java
    [regular, expressions, now, expressing, in, Java]
    Java 哈哈:) oracular expressions
    [Java, represses, oracular, expressions]
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化" aria-hidden="true">#</a> 格式化</h2><h3 id="numberformat" tabindex="-1"><a class="header-anchor" href="#numberformat" aria-hidden="true">#</a> <code>NumberFormat</code></h3><p><code>MessageFormat</code> 是抽象类 <code>Format</code> 的子类，<code>Format</code> 抽象类还有两个子类：</p><p><code>NumberFormat</code> 和 <code>DateFormat</code>，它们分别用以实现数值、日期的格式化。</p><p><code>NumberFormat</code>、<code>DateFormat</code> 可以将数值、日期转换成字符串，也可以将字符串转换成数值、日期。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208091851749.jpeg" alt="img"></p><p><code>NumberFormat</code> 和 <code>DateFormat</code> 都包含了 <code>format()</code> 和 <code>parse()</code> 方法，其中 <code>format()</code> 用于将数值、日期格式化成字符串，<code>parse()</code> 用于将字符串解析成数值、日期。</p><p><code>NumberFormat</code> 也是一个抽象基类，所以无法通过它的构造器来创建 <code>NumberFormat</code> 对象，它提供了如下几个工厂方法来得到 <code>NumberFormat</code> 对象。</p><blockquote><ol><li><code>getCurrencyInstance()</code>：返回默认 Locale 的货币格式器。也可以在调用该方法时传入指定的 Locale，则获取指定 Locale 的货币格式器。</li><li><code>getIntegerInstance()</code>：返回默认 Locale 的整数格式器。也可以在调用该方法时传入指定的 Locale，则获取指定 Locale 的整数格式器。</li><li><code>getNumberInstance()</code>：返回默认 Locale 的通用数值格式器。也可以在调用该方法时传入指定的 Locale，则获取指定 Locale 的通用数值格式器。</li><li><code>getPercentInstance()</code>：返回默认 Locale 的百分数格式器。也可以在调用该方法时传入指定的 Locale，则获取指定 Locale 的百分数格式器。</li></ol></blockquote><p>一旦取得了 <code>NumberFormat</code> 对象后，就可以调用它的 <code>format()</code> 方法来格式化数值，包括整数和浮点数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumberFormatTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 需要被格式化的数字</span>
        <span class="token keyword">double</span> db <span class="token operator">=</span> <span class="token number">1234000.567</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建四个Locale，分别代表中国、日本、德国、美国</span>
        <span class="token class-name">Locale</span><span class="token punctuation">[</span><span class="token punctuation">]</span> locales <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">JAPAN</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">GERMAN</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">NumberFormat</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 为上面四个Locale创建12个NumberFormat对象</span>
        <span class="token comment">// 每个Locale分别有通用数值格式器、百分数格式器、货币格式器</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> locales<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nf<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getNumberInstance</span><span class="token punctuation">(</span>locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nf<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getPercentInstance</span><span class="token punctuation">(</span>locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nf<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">NumberFormat</span><span class="token punctuation">.</span><span class="token function">getCurrencyInstance</span><span class="token punctuation">(</span>locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> locales<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------中国的格式--------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------日本的格式--------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------德国的格式--------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------美国的格式--------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;通用数值格式：&quot;</span> <span class="token operator">+</span> nf<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;百分比数值格式：&quot;</span> <span class="token operator">+</span> nf<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;货币数值格式：&quot;</span> <span class="token operator">+</span> nf<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    -------中国的格式--------
    通用数值格式：1,234,000.567
    百分比数值格式：123,400,057%
    货币数值格式：￥1,234,000.57
    -------日本的格式--------
    通用数值格式：1,234,000.567
    百分比数值格式：123,400,057%
    货币数值格式：￥1,234,001
    -------德国的格式--------
    通用数值格式：1.234.000,567
    百分比数值格式：123.400.057%
    货币数值格式：¤ 1.234.000,57
    -------美国的格式--------
    通用数值格式：1,234,000.567
    百分比数值格式：123,400,057%
    货币数值格式：$1,234,000.57
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NumberFormat</code> 其实有国际化的作用！同样的数值在不同国家的写法是不同的，而 <code>NumberFormat</code> 的作用就是把数值转换成不同国家的本地写法。</p><h3 id="dateformat" tabindex="-1"><a class="header-anchor" href="#dateformat" aria-hidden="true">#</a> <code>DateFormat</code></h3><p>与 <code>NumberFormat</code> 相似的是，<code>DateFormat</code> 也是一个抽象类，它也提供了几个工厂方法用于获取 <code>DateFormat</code> 对象。</p><blockquote><ol><li><code>getDateInstance()</code>：返回一个日期格式器，它格式化后的字符串只有日期，没有时间。该方法可以传入多个参数，用于指定日期样式和 Locale 等参数；如果不指定这些参数，则使用默认参数。</li><li><code>getTimeInstance()</code>：返回一个时间格式器，它格式化后的字符串只有时间，没有日期。该方法可以传入多个参数，用于指定时间样式和 Locale 等参数；如果不指定这些参数，则使用默认参数。</li><li><code>getDateTimeInstance()</code>：返回一个日期、时间格式器，它格式化后的字符串既有日期，也有时间。该方法可以传入多个参数，用于指定日期样式、时间样式和 Locale 等参数；如果不指定这些参数，则使用默认参数。</li></ol></blockquote><p>上面 3 个方法可以指定日期样式、时间样式参数，它们是 <code>DateFormat</code> 的 4 个静态常量：<code>FULL</code>、<code>LONG</code>、<code>MEDIUM</code> 和 <code>SHORT</code>，通过这 4 个样式参数可以控制生成的格式化字符串。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 需要被格式化的时间</span>
        <span class="token class-name">Date</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建两个Locale，分别代表中国、美国</span>
        <span class="token class-name">Locale</span><span class="token punctuation">[</span><span class="token punctuation">]</span> locales <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">DateFormat</span><span class="token punctuation">[</span><span class="token punctuation">]</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFormat</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 为上面两个Locale创建16个DateFormat对象</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> locales<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token constant">SHORT</span><span class="token punctuation">,</span> locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token constant">MEDIUM</span><span class="token punctuation">,</span> locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token constant">LONG</span><span class="token punctuation">,</span> locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token constant">FULL</span><span class="token punctuation">,</span> locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getTimeInstance</span><span class="token punctuation">(</span><span class="token constant">SHORT</span><span class="token punctuation">,</span> locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getTimeInstance</span><span class="token punctuation">(</span><span class="token constant">MEDIUM</span><span class="token punctuation">,</span> locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getTimeInstance</span><span class="token punctuation">(</span><span class="token constant">LONG</span><span class="token punctuation">,</span> locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getTimeInstance</span><span class="token punctuation">(</span><span class="token constant">FULL</span><span class="token punctuation">,</span> locales<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> locales<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------中国日期格式--------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------美国日期格式--------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SHORT格式的日期格式：&quot;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MEDIUM格式的日期格式：&quot;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;LONG格式的日期格式：&quot;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FULL格式的日期格式：&quot;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SHORT格式的时间格式：&quot;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MEDIUM格式的时间格式：&quot;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;LONG格式的时间格式：&quot;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FULL格式的时间格式：&quot;</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    -------中国日期格式--------
    SHORT格式的日期格式：22-8-9
    MEDIUM格式的日期格式：2022-8-9
    LONG格式的日期格式：2022年8月9日
    FULL格式的日期格式：2022年8月9日 星期二
    SHORT格式的时间格式：下午7:01
    MEDIUM格式的时间格式：19:01:53
    LONG格式的时间格式：下午07时01分53秒
    FULL格式的时间格式：下午07时01分53秒 CST
    -------美国日期格式--------
    SHORT格式的日期格式：8/9/22
    MEDIUM格式的日期格式：Aug 9, 2022
    LONG格式的日期格式：August 9, 2022
    FULL格式的日期格式：Tuesday, August 9, 2022
    SHORT格式的时间格式：7:01 PM
    MEDIUM格式的时间格式：7:01:53 PM
    LONG格式的时间格式：7:01:53 PM CST
    FULL格式的时间格式：7:01:53 PM CST
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>获得了 <code>DateFormat</code> 之后，还可以调用它的 <code>setLenient(boolean lenient)</code> 方法来设置该格式器是否采用严格语法。</p><p>举例来说，如果采用不严格的日期语法（该方法的参数为 <code>true</code>），对于字符串 <code>&quot;2004-2-31&quot;</code> 将会转换成 2004 年 3 月 2 日；如果采用严格的日期语法，解析该字符串时将抛出异常。</p></div><p><code>DateFormat</code> 的 <code>parse()</code> 方法可以把一个字符串解析成 <code>Date</code> 对象，但它要求被解析的字符串必须符合日期字符串的要求，否则可能抛出 <code>ParseException</code> 异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;2007-12-12&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;2007年12月10日&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面输出 Wed Dec 12 00:00:00 CST 2007</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面输出 Mon Dec 10 00:00:00 CST 2007</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token constant">LONG</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面抛出 ParseException异常</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="simpledateformat" tabindex="-1"><a class="header-anchor" href="#simpledateformat" aria-hidden="true">#</a> <code>SimpleDateFormat</code></h3><p><code>DateFormat</code> 的 <code>parse()</code> 方法可以把字符串解析成 <code>Date</code> 对象，但实际上 <code>DataFormat</code> 的 <code>format()</code> 方法不够灵活——它要求被解析的字符串必须满足特定的格式！</p><p>为了更好地格式化日期、解析日期字符串，Java 提供了 <code>SimpleDateFormat</code> 类。</p><p><code>SimpleDateFormat</code> 是 <code>DateFormat</code> 的子类，正如它的名字所暗示的，它是“简单”的日期格式器。<code>SimpleDateFormat</code> 比 <code>DateFormat</code> 更简单，功能更强大。</p><p><code>SimpleDateFormat</code> 可以非常灵活地格式化 <code>Date</code>，也可以用于解析各种格式的日期字符串。</p><p>创建 <code>SimpleDateFormat</code> 对象时需要传入一个 <code>pattern</code> 字符串，这个 <code>pattern</code> 不是正则表达式，而是一个日期模板字符串。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleDateFormatTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Date</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个SimpleDateFormat对象</span>
        <span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;G yyyy年中第D天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将d格式化成日期，输出：公元2007年中第354天</span>
        <span class="token class-name">String</span> dateStr <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 一个非常特殊的日期字符串</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;07###三月##21&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sdf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;y###MMM##d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将日期字符串解析成日期，输出：Wed Mar 21 00:00:00 CST 2007</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>SimpleDateFormat</code> 可以将日期格式化成形如 <code>&quot;公元 2007 年中第 354 天&quot;</code> 这样的字符串，也可以把形如 <code>&quot;07###三月##21&quot;</code> 这样的字符串解析成日期，功能非常强大。</p><p><code>SimpleDateFormat</code> 把日期格式化成怎样的字符串，以及能把怎样的字符串解析成 <code>Date</code>，完全取决于创建该对象时指定的 <code>pattern</code> 参数，<code>pattern</code> 是一个使用日期字段占位符的日期模板。</p>`,134);function b(g,f){const t=l("ExternalLinkIcon");return e(),o("div",null,[u,s("p",null,[n("当然，也可以创建自己的 "),k,n(" 子类，然后将它作为 "),d,n(" 对象使用（这就是多态）。在 IBM 的"),s("a",r,[n("alphaWorks 站点"),c(t)]),n("上，IBM 的开发人员实现了多种日历。在 "),m,n(" 上，也有对中国农历的实现。")]),v])}const S=p(i,[["render",b],["__file","11. 与运行环境交互.html.vue"]]);export{S as default};
