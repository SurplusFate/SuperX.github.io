import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as r,a as e,b as a,d as i,e as n,r as t}from"./app.296a2f9c.js";const c={},o=n('<h1 id="_13-dockerfile-自定义镜像" tabindex="-1"><a class="header-anchor" href="#_13-dockerfile-自定义镜像" aria-hidden="true">#</a> 13. Dockerfile 自定义镜像</h1><p>常见的镜像在 DockerHub 就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="_13-1-镜像结构" tabindex="-1"><a class="header-anchor" href="#_13-1-镜像结构" aria-hidden="true">#</a> 13.1.镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以 MySQL 为例，来看看镜像的组成结构：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210731175806273.png" alt="image-20210731175806273"></p><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="_13-2-dockerfile-语法" tabindex="-1"><a class="header-anchor" href="#_13-2-dockerfile-语法" aria-hidden="true">#</a> 13.2.Dockerfile 语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><p>我们只需要告诉 Docker，我们的镜像的组成，需要哪些 BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来 Docker 会帮助我们构建镜像。</p><p>而描述上述信息的文件就是 Dockerfile 文件。</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层 Layer。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210731180321133.png" alt="image-20210731180321133"></p>',15),d={href:"https://docs.docker.com/engine/reference/builder",target:"_blank",rel:"noopener noreferrer"},m=n(`<h2 id="_13-3-构建-java-项目" tabindex="-1"><a class="header-anchor" href="#_13-3-构建-java-项目" aria-hidden="true">#</a> 13.3.构建 Java 项目</h2><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801101455590.png" alt="image-20210801101455590"></p><h3 id="_13-3-1-基于-ubuntu-构建-java-项目" tabindex="-1"><a class="header-anchor" href="#_13-3-1-基于-ubuntu-构建-java-项目" aria-hidden="true">#</a> 13.3.1.基于 Ubuntu 构建 Java 项目</h3><p>需求：基于 Ubuntu 镜像构建一个新镜像，运行一个 java 项目</p><ul><li><p>步骤 1：新建一个空文件夹 docker-demo</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801101207444.png" alt="image-20210801101207444"></p></li><li><p>步骤 2：拷贝 docker-demo.jar 文件到 docker-demo 这个目录</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801101314816.png" alt="image-20210801101314816"></p></li><li><p>步骤 3：拷贝 jdk8.tar.gz 文件到 docker-demo 这个目录</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801101410200.png" alt="image-20210801101410200"></p></li><li><p>步骤 4：拷贝 Dockerfile 到 docker-demo 这个目录</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801101455590.png" alt="image-20210801101455590"></p><p>其中的内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 指定基础镜像</span>
FROM ubuntu:16.04
<span class="token comment"># 配置环境变量，JDK的安装目录</span>
ENV <span class="token assign-left variable">JAVA_DIR</span><span class="token operator">=</span>/usr/local

<span class="token comment"># 拷贝jdk和java项目的包</span>
COPY ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/
COPY ./docker-demo.jar /tmp/app.jar

<span class="token comment"># 安装JDK</span>
RUN <span class="token builtin class-name">cd</span> <span class="token variable">$JAVA_DIR</span> <span class="token punctuation">\\</span>
 <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-xf</span> ./jdk8.tar.gz <span class="token punctuation">\\</span>
 <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> ./jdk1.8.0_144 ./java8

<span class="token comment"># 配置环境变量</span>
ENV <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_DIR</span>/java8
ENV <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin

<span class="token comment"># 暴露端口</span>
EXPOSE <span class="token number">8090</span>
<span class="token comment"># 入口，java项目的启动命令</span>
ENTRYPOINT <span class="token function">java</span> <span class="token parameter variable">-jar</span> /tmp/app.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>步骤 5：进入 docker-demo</p><p>将准备好的 docker-demo 上传到虚拟机任意目录，然后进入 docker-demo 目录下</p></li><li><p>步骤 6：运行命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul>`,5),u={href:"http://192.168.150.101:8090/hello/count",target:"_blank",rel:"noopener noreferrer"},v=n(`<h3 id="_13-3-2-基于-java8-构建-java-项目" tabindex="-1"><a class="header-anchor" href="#_13-3-2-基于-java8-构建-java-项目" aria-hidden="true">#</a> 13.3.2.基于 java8 构建 Java 项目</h3><p>虽然我们可以基于 Ubuntu 基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建 java 项目的镜像，可以在已经准备了 JDK 的基础镜像基础上构建。</p><p>需求：基于 java:8-alpine 镜像，将一个 Java 项目构建为镜像</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为 Dockerfile</p></li><li><p>② 拷贝课前资料提供的 docker-demo.jar 到这个目录中</p></li><li><p>③ 编写 Dockerfile 文件：</p><ul><li><p>a ）基于 java:8-alpine 作为基础镜像</p></li><li><p>b ）将 app.jar 拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口 ENTRYPOINT</p><p>内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> java:8-alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./app.jar /tmp/app.jar</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>④ 使用 docker build 命令构建镜像</p></li><li><p>⑤ 使用 docker run 创建容器并运行</p></li></ul><h2 id="_13-4-小结" tabindex="-1"><a class="header-anchor" href="#_13-4-小结" aria-hidden="true">#</a> 13.4.小结</h2><p>小结：</p><ol><li><p>Dockerfile 的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile 的第一行必须是 FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如 Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol>`,9);function k(g,h){const s=t("ExternalLinkIcon");return p(),r("div",null,[o,e("p",null,[a("更新详细语法说明，请参考官网文档： "),e("a",d,[a("https://docs.docker.com/engine/reference/builder"),i(s)])]),m,e("p",null,[a("最后访问 "),e("a",u,[a("http://192.168.150.101:8090/hello/count"),i(s)]),a("，其中的 ip 改成你的虚拟机 ip")]),v])}const j=l(c,[["render",k],["__file","13. Dockerfile 自定义镜像.html.vue"]]);export{j as default};
