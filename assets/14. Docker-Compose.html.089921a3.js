import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,a as n,b as s,d as e,e as p,r as i}from"./app.71a6f53c.js";const c={},r=p(`<h1 id="_14-docker-compose" tabindex="-1"><a class="header-anchor" href="#_14-docker-compose" aria-hidden="true">#</a> 14. Docker-Compose</h1><p>Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210731180921742.png" alt="image-20210731180921742"></p><h2 id="_14-1-初识-dockercompose" tabindex="-1"><a class="header-anchor" href="#_14-1-初识-dockercompose" aria-hidden="true">#</a> 14.1.初识 DockerCompose</h2><p>Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>version<span class="token operator">:</span> <span class="token string">&quot;3.8&quot;</span>
 services<span class="token operator">:</span>
  mysql<span class="token operator">:</span>
    image<span class="token operator">:</span> mysql<span class="token operator">:</span><span class="token number">5.7</span>.<span class="token number">25</span>
    environment<span class="token operator">:</span>
     MYSQL_ROOT_PASSWORD<span class="token operator">:</span> <span class="token number">123</span>
    volumes<span class="token operator">:</span>
     - <span class="token string">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span>
     - <span class="token string">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span>
  web<span class="token operator">:</span>
    build<span class="token operator">:</span> .
    ports<span class="token operator">:</span>
     - <span class="token string">&quot;8090:8090&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 Compose 文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时 8090</li></ul>`,8),u={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},d=p('<p>其实 DockerCompose 文件可以看做是将多个 docker run 命令写到一个文件，只是语法稍有差异。</p><h2 id="_14-2-部署微服务集群" tabindex="-1"><a class="header-anchor" href="#_14-2-部署微服务集群" aria-hidden="true">#</a> 14.2.部署微服务集群</h2><p><strong>需求</strong>：将之前学习的 cloud-demo 微服务集群利用 DockerCompose 部署</p><p><strong>实现思路</strong>：</p><p>① 查看资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件</p><p>② 修改自己的 cloud-demo 项目，将数据库、nacos 地址都命名为 docker-compose 中的服务名</p><p>③ 使用 maven 打包工具，将项目中的每个微服务都打包为 app.jar</p><p>④ 将打包好的 app.jar 拷贝到 cloud-demo 中的每一个对应的子目录中</p><p>⑤ 将 cloud-demo 上传至虚拟机，利用 docker-compose up -d 来部署</p><h3 id="_14-2-1-compose-文件" tabindex="-1"><a class="header-anchor" href="#_14-2-1-compose-文件" aria-hidden="true">#</a> 14.2.1.compose 文件</h3><p>docker-demo:</p>',11),m={href:"https://pan.baidu.com/s/1I6_xG7eVRSB_ui3y0omCqA?pwd=i6pe",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"docker-compose:",-1),v={href:"https://pan.baidu.com/s/1DC5ZgzxLITyJvcwe40bnAg?pwd=gkcz",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>里面已经编写好了 docker-compose 文件，而且每个微服务都准备了一个独立的目录：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210731181341330.png" alt="image-20210731181341330"></p><p>内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.2&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MODE</span><span class="token punctuation">:</span> standalone
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8848:8848&quot;</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.25
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span>
  <span class="token key atrule">userservice</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./user<span class="token punctuation">-</span>service
  <span class="token key atrule">orderservice</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./order<span class="token punctuation">-</span>service
  <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./gateway
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;10010:10010&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，其中包含 5 个 service 服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心 <ul><li><code>image: nacos/nacos-server</code>： 基于 nacos/nacos-server 镜像构建</li><li><code>environment</code>：环境变量 <ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了 8848 端口</li></ul></li><li><code>mysql</code>：数据库 <ul><li><code>image: mysql:5.7.25</code>：镜像版本是 mysql:5.7.25</li><li><code>environment</code>：环境变量 <ul><li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库 root 账户的密码为 123</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了 mysql 的 data、conf 目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于 Dockerfile 临时构建的</li></ul><p>查看 mysql 目录，可以看到其中已经准备好了 cloud_order、cloud_user 表：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801095205034.png" alt="image-20210801095205034"></p><p>查看微服务目录，可以看到都包含 Dockerfile 文件：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801095320586.png" alt="image-20210801095320586"></p><p>内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>FROM java:8-alpine
COPY ./app.jar /tmp/app.jar
ENTRYPOINT <span class="token function">java</span> <span class="token parameter variable">-jar</span> /tmp/app.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-2-2-修改微服务配置" tabindex="-1"><a class="header-anchor" href="#_14-2-2-修改微服务配置" aria-hidden="true">#</a> 14.2.2.修改微服务配置</h3><p>因为微服务将来要部署为 docker 容器，而容器之间互联不是通过 IP 地址，而是通过容器名。这里我们将 order-service、user-service、gateway 服务的 mysql、nacos 地址都修改为基于容器名的访问。</p><p>如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//mysql<span class="token punctuation">:</span>3306/cloud_order<span class="token punctuation">?</span>useSSL=false
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> orderservice
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> nacos<span class="token punctuation">:</span><span class="token number">8848</span> <span class="token comment"># nacos服务地址</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-2-3-打包" tabindex="-1"><a class="header-anchor" href="#_14-2-3-打包" aria-hidden="true">#</a> 14.2.3.打包</h3><p>接下来需要将我们的每个微服务都打包。因为之前查看到 Dockerfile 中的 jar 包名称都是 app.jar，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改 pom.xml 中的打包名称来实现，每个微服务都需要修改：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 服务打包的最终名称 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包后：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801095951030.png" alt="image-20210801095951030"></p><h3 id="_14-2-4-拷贝-jar-包到部署目录" tabindex="-1"><a class="header-anchor" href="#_14-2-4-拷贝-jar-包到部署目录" aria-hidden="true">#</a> 14.2.4.拷贝 jar 包到部署目录</h3><p>编译打包好的 app.jar 文件，需要放到 Dockerfile 的同级目录中。注意：每个微服务的 app.jar 放到与服务名称对应的目录，别搞错了。</p><p>user-service：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801100201253.png" alt="image-20210801100201253"></p><p>order-service：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801100231495.png" alt="image-20210801100231495"></p><p>gateway：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801100308102.png" alt="image-20210801100308102"></p><h3 id="_14-2-5-部署" tabindex="-1"><a class="header-anchor" href="#_14-2-5-部署" aria-hidden="true">#</a> 14.2.5.部署</h3><p>最后，我们需要将文件整个 cloud-demo 文件夹上传到虚拟机中，理由 DockerCompose 部署。</p><p>上传到任意目录：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210801100955653.png" alt="image-20210801100955653"></p><p>部署：</p><p>进入 cloud-demo 目录，然后运行下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,37);function b(h,_){const a=i("ExternalLinkIcon");return o(),l("div",null,[r,n("p",null,[s("DockerCompose 的详细语法参考官网："),n("a",u,[s("https://docs.docker.com/compose/compose-file/"),e(a)])]),d,n("p",null,[s("链接: "),n("a",m,[s("https://pan.baidu.com/s/1I6_xG7eVRSB_ui3y0omCqA?pwd=i6pe"),e(a)]),s(" 提取码: i6pe")]),k,n("p",null,[s("链接: "),n("a",v,[s("https://pan.baidu.com/s/1DC5ZgzxLITyJvcwe40bnAg?pwd=gkcz"),e(a)]),s(" 提取码: gkcz")]),g])}const q=t(c,[["render",b],["__file","14. Docker-Compose.html.vue"]]);export{q as default};
