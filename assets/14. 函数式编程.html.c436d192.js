import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,a as s,b as n,d as c,e as a,r as l}from"./app.b8060522.js";const i={},u=a(`<h1 id="_14-函数式编程" tabindex="-1"><a class="header-anchor" href="#_14-函数式编程" aria-hidden="true">#</a> 14. 函数式编程</h1><h2 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> Lambda 表达式</h2><blockquote><p>lambda表达式用于简化匿名内部类的实现，只作用于接口，抽象方法无法使用。</p></blockquote><p>Lambda 表达式是使用<strong>最小可能</strong>语法编写的函数定义：</p><ol><li>Lambda 作用于函数式接口（有且仅有一个抽象方法，但是可以有多个非抽象方法的接口）。</li><li>Lambda 表达式产生函数，而不是类。 虽然在 JVM（Java Virtual Machine，Java 虚拟机）上，一切都是类，但是幕后有各种操作执行让 Lambda 看起来像函数 —— 作为程序员，你可以高兴地假装它们“就是函数”。</li><li>Lambda 语法尽可能少，这正是为了使 Lambda 易于编写和使用。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Description</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">brief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Body</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">detailed</span><span class="token punctuation">(</span><span class="token class-name">String</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Multi</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">twoArg</span><span class="token punctuation">(</span><span class="token class-name">String</span> head<span class="token punctuation">,</span> <span class="token class-name">Double</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaExpressions</span> <span class="token punctuation">{</span>

  <span class="token keyword">static</span> <span class="token class-name">Body</span> bod <span class="token operator">=</span> h <span class="token operator">-&gt;</span> h <span class="token operator">+</span> <span class="token string">&quot; No Parens!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>

  <span class="token keyword">static</span> <span class="token class-name">Body</span> bod2 <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> h <span class="token operator">+</span> <span class="token string">&quot; More details&quot;</span><span class="token punctuation">;</span> <span class="token comment">// [2]</span>

  <span class="token keyword">static</span> <span class="token class-name">Description</span> desc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Short info&quot;</span><span class="token punctuation">;</span> <span class="token comment">// [3]</span>

  <span class="token keyword">static</span> <span class="token class-name">Multi</span> mult <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> h <span class="token operator">+</span> n<span class="token punctuation">;</span> <span class="token comment">// [4]</span>

  <span class="token keyword">static</span> <span class="token class-name">Description</span> moreLines <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// [5]</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;moreLines()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;from moreLines()&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bod<span class="token punctuation">.</span><span class="token function">detailed</span><span class="token punctuation">(</span><span class="token string">&quot;Oh!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bod2<span class="token punctuation">.</span><span class="token function">detailed</span><span class="token punctuation">(</span><span class="token string">&quot;Hi!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">brief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mult<span class="token punctuation">.</span><span class="token function">twoArg</span><span class="token punctuation">(</span><span class="token string">&quot;Pi! &quot;</span><span class="token punctuation">,</span> <span class="token number">3.14159</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>moreLines<span class="token punctuation">.</span><span class="token function">brief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
    Oh! No Parens!
    Hi! More details
    Short info
    Pi! 3.14159
    moreLines()
    from moreLines()
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从三个接口开始，每个接口都有一个单独的方法（很快就会理解它的重要性）。但是，每个方法都有不同数量的参数，以便演示 Lambda 表达式语法。</p><p>任何 Lambda 表达式的基本语法是：</p><ol><li>参数(parameters)，接口中的抽象方法的实参列表。</li><li>接着 <code>-&gt;</code>，lambda 操作符或箭头函数。</li><li><code>-&gt;</code> 之后的内容都是方法体{ statements; }。</li></ol><ul><li><strong>[1]</strong> 当只用一个参数，可以不需要括号 <code>()</code>。</li><li><strong>[2]</strong> 正常情况使用括号 <code>()</code> 包裹参数。</li><li><strong>[3]</strong> 如果没有参数，则必须使用括号 <code>()</code> 表示空参数列表。</li><li><strong>[4]</strong> 对于多个参数，将实参列表放在括号 <code>()</code> 中。</li></ul><p>到目前为止，所有 Lambda 表达式方法体都是单行。 该表达式的结果自动成为 Lambda 表达式的返回值，在此处使用 <strong>return</strong> 关键字是非法的。 这是 Lambda 表达式简化相应语法的另一种方式。</p><p><strong>[5]</strong> 如果在 Lambda 表达式中确实需要多行，则必须将这些行放在花括号中。 在这种情况下，就需要使用 <strong>return</strong>。</p><p>Lambda 表达式通常比<strong>匿名内部类</strong>产生更易读的代码。</p><h3 id="递归" tabindex="-1"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h3><p>递归函数是一个自我调用的函数。可以编写递归的 Lambda 表达式，但需要注意：递归方法必须是实例变量或静态变量，否则会出现编译时错误。 我们将为每个案例创建一个示例。</p><p>这两个示例都需要一个接受 <strong>int</strong> 型参数并生成 <strong>int</strong> 的接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">IntCall</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整数 n 的阶乘将所有小于或等于 n 的正整数相乘。 阶乘函数是一个常见的递归示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveFactorial</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">IntCall</span> fact<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fact <span class="token operator">=</span> n <span class="token operator">-&gt;</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> n <span class="token operator">*</span> fact<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fact<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
1
1
2
6
24
120
720
5040
40320
362880
3628800
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>fact</code> 是一个静态变量。 注意使用三元 <strong>if-else</strong>。 递归函数将一直调用自己，直到 <code>i == 0</code>。所有递归函数都有“停止条件”，否则将无限递归并产生异常。</p><p>我们可以将 <code>Fibonacci</code> 序列用递归的 Lambda 表达式来实现，这次使用实例变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveFibonacci</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntCall</span> fib<span class="token punctuation">;</span>

  <span class="token class-name">RecursiveFibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fib <span class="token operator">=</span> n <span class="token operator">-&gt;</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>
               n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span>
               fib<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> fib<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RecursiveFibonacci</span> rf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecursiveFibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
0
1
1
2
3
5
8
13
21
34
55
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>Fibonacci</code> 序列中的最后两个元素求和来产生下一个元素。</p><h2 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用" aria-hidden="true">#</a> 方法引用</h2><p>Java 8 方法引用没有历史包袱。方法引用组成：<code>类名或对象名 :: 方法名称</code>。</p><blockquote><ol><li>使用场景：当需要传递给 <code>lambda</code> 体的操作，已经有满足结构要求的方法了，可以使用方法引用。</li><li><code>lambda</code> 表达式是对匿名内部类的简写，方法引用就是拿其它类的方法来实现自己接口中的抽象方法。</li><li>被引用的方法所在的类不需要实现对应的函数式接口。</li></ol></blockquote><p>简单来说就是可以引用其它类中方法的具体实现来实例化我们需要的函数式接口。</p><p>方法结构要求：</p><blockquote><p>R：返回值</p><p>T1：参数1， T2：参数2</p><p>方法名：无需相同</p><p>抽象方法结构：R 方法名(T1) 引用方法结构：R 方法名(T1) 或 R T1.方法名()</p><p>抽象方法结构：R 方法名(T1 T2) 引用方法结构：R 方法名(T1， T2) 或 R T1.方法名(T2)</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">T1</span> t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Callable2</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">T1</span> t1<span class="token punctuation">,</span> <span class="token class-name">T2</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Describe</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Describe2</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">show3</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span><span class="token class-name">String</span> msg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">show4</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodReferences</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Describe</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Describe2</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Describe2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c1 <span class="token operator">=</span> d<span class="token operator">::</span><span class="token function">show</span><span class="token punctuation">;</span>
        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Describe</span><span class="token punctuation">&gt;</span></span> c2 <span class="token operator">=</span> <span class="token class-name">Describe</span><span class="token operator">::</span><span class="token function">show2</span><span class="token punctuation">;</span>
        <span class="token class-name">Callable2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c3 <span class="token operator">=</span> d2<span class="token operator">::</span><span class="token function">show3</span><span class="token punctuation">;</span>
        <span class="token class-name">Callable2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Describe2</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c4 <span class="token operator">=</span> <span class="token class-name">Describe2</span><span class="token operator">::</span><span class="token function">show4</span><span class="token punctuation">;</span>
        c1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;我是c1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c3<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;我是c3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;我是c3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        c4<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d2<span class="token punctuation">,</span> <span class="token string">&quot;我是c4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当引用方法是 <code>static</code> 或者结构为 T1.方法名([T2])时，方法引用是用类名引用。</p><p><code>static</code> 为正常的静态调用。</p><p>结构为 T1.方法名([T2])时（未绑定的方法引用），类名引用的意义是明确调用者的类型。</p></blockquote><h3 id="runnable-接口" tabindex="-1"><a class="header-anchor" href="#runnable-接口" aria-hidden="true">#</a> Runnable 接口</h3><p><strong>Runnable</strong> 接口自 1.0 版以来一直在 Java 中，因此不需要导入。它也符合特殊的单方法接口格式：它的方法 <code>run()</code> 不带参数，也没有返回值。因此，我们可以使用 Lambda 表达式和方法引用作为 <strong>Runnable</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Go</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Go::go()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableMethodReference</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Anonymous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lambda&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">Go</span><span class="token operator">::</span><span class="token function">go</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
Anonymous
lambda
Go::go()
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Thread</strong> 对象将 <strong>Runnable</strong> 作为其构造函数参数，并具有会调用 <code>run()</code> 的方法 <code>start()</code>。 注意这里只有<strong>匿名内部类</strong>才要求显式声明 <code>run()</code> 方法。</p><h3 id="未绑定的方法引用" tabindex="-1"><a class="header-anchor" href="#未绑定的方法引用" aria-hidden="true">#</a> 未绑定的方法引用</h3><p>未绑定的方法引用是指没有关联对象的普通（非静态）方法。 使用未绑定的引用时，我们必须先提供对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;X::f()&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">MakeString</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">TransformX</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">X</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnboundMethodReference</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// MakeString ms = X::f; // [1]</span>
    <span class="token class-name">TransformX</span> sp <span class="token operator">=</span> <span class="token class-name">X</span><span class="token operator">::</span><span class="token function">f</span><span class="token punctuation">;</span>
    <span class="token class-name">X</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sp<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2]</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同等效果</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
X::f()
X::f()
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，我们已经见过了方法引用和对应接口的签名（参数类型和返回类型）一致的几个赋值例子。</p><p>在 <strong>[1]</strong> 中，我们尝试同样的做法，把 <code>X</code> 的 <code>f()</code> 方法引用赋值给 <strong><code>MakeString</code></strong>。</p><p>结果即使 <code>make()</code> 与 <code>f()</code> 具有相同的签名，编译也会报“invalid method reference”（无效方法引用）错误。</p><p>问题在于，这里其实还需要另一个隐藏参数参与：我们的老朋友 <code>this</code>。</p><p>你不能在没有 <code>X</code> 对象的前提下调用 <code>f()</code>。 因此，<code>X :: f</code> 表示未绑定的方法引用。</p><p>要解决这个问题，我们需要一个 <code>X</code> 对象，因此我们的接口实际上需要一个额外的参数，正如在 <strong><code>TransformX</code></strong> 中看到的那样。 如果将 <code>X :: f</code> 赋值给 <strong><code>TransformX</code></strong>，在 Java 中是允许的。</p><p><strong>[2]</strong> 的结果有点像脑筋急转弯。我拿到未绑定的方法引用，并且调用它的<code>transform()</code>方法，将一个 <code>X</code> 类的对象传递给它，最后使得 <code>x.f()</code> 以某种方式被调用。Java 知道它必须拿第一个参数，该参数实际就是<code>this</code> 对象，然后对此调用方法。</p><p>如果你的方法有更多个参数，就以第一个参数接受 <code>this</code> 的模式来处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">This</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">void</span> <span class="token function">four</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">TwoArgs</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">call2</span><span class="token punctuation">(</span><span class="token class-name">This</span> athis<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ThreeArgs</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">call3</span><span class="token punctuation">(</span><span class="token class-name">This</span> athis<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">FourArgs</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">call4</span><span class="token punctuation">(</span>
    <span class="token class-name">This</span> athis<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiUnbound</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TwoArgs</span> twoargs <span class="token operator">=</span> <span class="token class-name">This</span><span class="token operator">::</span><span class="token function">two</span><span class="token punctuation">;</span>
    <span class="token class-name">ThreeArgs</span> threeargs <span class="token operator">=</span> <span class="token class-name">This</span><span class="token operator">::</span><span class="token function">three</span><span class="token punctuation">;</span>
    <span class="token class-name">FourArgs</span> fourargs <span class="token operator">=</span> <span class="token class-name">This</span><span class="token operator">::</span><span class="token function">four</span><span class="token punctuation">;</span>
    <span class="token class-name">This</span> athis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    twoargs<span class="token punctuation">.</span><span class="token function">call2</span><span class="token punctuation">(</span>athis<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    threeargs<span class="token punctuation">.</span><span class="token function">call3</span><span class="token punctuation">(</span>athis<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">&quot;Three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fourargs<span class="token punctuation">.</span><span class="token function">call4</span><span class="token punctuation">(</span>athis<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">&quot;Four&quot;</span><span class="token punctuation">,</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要指出的是，我将类命名为 <strong>This</strong>，并将函数式方法的第一个参数命名为 <strong><code>athis</code></strong>，但你在生产级代码中应该使用其他名字，以防止混淆。</p><h3 id="构造函数引用" tabindex="-1"><a class="header-anchor" href="#构造函数引用" aria-hidden="true">#</a> 构造函数引用</h3><p>你还可以捕获构造函数的引用，然后通过引用调用该构造函数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// For &quot;unknown&quot;</span>
  <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> <span class="token string">&quot;stray&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> nm<span class="token punctuation">)</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> nm<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> nm<span class="token punctuation">,</span> <span class="token keyword">int</span> yrs<span class="token punctuation">)</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> nm<span class="token punctuation">;</span> age <span class="token operator">=</span> yrs<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">MakeNoArgs</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dog</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Make1Arg</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dog</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">String</span> nm<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Make2Args</span> <span class="token punctuation">{</span>
  <span class="token class-name">Dog</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token class-name">String</span> nm<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CtorReference</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MakeNoArgs</span> mna <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>
    <span class="token class-name">Make1Arg</span> m1a <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>   <span class="token comment">// [2]</span>
    <span class="token class-name">Make2Args</span> m2a <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>  <span class="token comment">// [3]</span>

    <span class="token class-name">Dog</span> dn <span class="token operator">=</span> mna<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Dog</span> d1 <span class="token operator">=</span> m1a<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&quot;Comet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Dog</span> d2 <span class="token operator">=</span> m2a<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">&quot;Ralph&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Dog</strong> 有三个构造函数，函数式接口内的 <code>make()</code> 方法反映了构造函数参数列表（ <code>make()</code> 方法名称可以不同）。</p><p><strong>注意</strong>我们如何对 <strong>[1]</strong>，<strong>[2]</strong> 和 <strong>[3]</strong> 中的每一个使用 <code>Dog :: new</code>。 这三个构造函数只有一个相同名称：<code>:: new</code>，但在每种情况下赋值给不同的接口，编译器可以从中知道具体使用哪个构造函数。</p><p>编译器知道调用函数式方法（本例中为 <code>make()</code>）就相当于调用构造函数。</p><h2 id="函数式接口" tabindex="-1"><a class="header-anchor" href="#函数式接口" aria-hidden="true">#</a> 函数式接口</h2><blockquote><p>函数式接口 (Functional Interface) 就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p><p><code>@FunctionalInterface</code>: 注解只是在编译时起到强制规范定义的作用（可省略，省略后不做规范检查）。</p><p>函数式接口可以被隐式转换为 lambda 表达式。</p></blockquote><p>Java 8 引入了 <code>java.util.function</code> 包。它包含一组接口，这些接口是 Lambda 表达式和方法引用的目标类型。 每个接口只包含一个抽象方法，称为 <em>函数式方法</em>。</p><p>Java 内置四大核心接口：</p><p><code>Consumer&lt;T&gt; : 消费型接口，void accept (T t);</code>：表示接受参数并且不返回结果的操作。</p><p><code>Supplier&lt;T&gt; : 供给型接口，T get ();</code>：表示返回类型 <code>T</code> 的值的函数。</p><p><code>Function&lt;T, R&gt; : 函数型接口，R apply (T t);</code>：表示接受类型 <code>T</code> 的参数并返回类型 <code>R</code> 的结果的函数。</p><p><code>Predicate&lt;T&gt; : 断言型接口，boolean test (T t);</code>：表示为指定参数返回 <code>true</code> 或 <code>false</code> 的布尔函数。</p><p>简单示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">filterString</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strings<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> predicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryString</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strings<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我好&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;大家好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打印List信息</span>
        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> consumer <span class="token operator">=</span> s <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;List:&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回一个 String</span>
        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringSupplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;Supplier&lt;T&gt; : 供给型接口，T get ();&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查找字符串中是否包含 “家” 字符</span>
        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> function <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;家&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">queryString</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> function<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查找字符串中是否包含 “你” 字符</span>
        <span class="token function">filterString</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;你&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在编写自定义接口时，可以使用 <code>@FunctionalInterface</code> 注解强制执行此“函数式方法”模式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">Functional</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">goodbye</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">FunctionalNoAnn</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> <span class="token function">goodbye</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
@FunctionalInterface
interface NotFunctional {
  String goodbye(String arg);
  String hello(String arg);
}
产生错误信息:
NotFunctional is not a functional interface
multiple non-overriding abstract methods
found in interface NotFunctional
*/</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionalAnnotation</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">goodbye</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Goodbye, &quot;</span> <span class="token operator">+</span> arg<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">FunctionalAnnotation</span> fa <span class="token operator">=</span>
      <span class="token keyword">new</span> <span class="token class-name">FunctionalAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Functional</span> f <span class="token operator">=</span> fa<span class="token operator">::</span><span class="token function">goodbye</span><span class="token punctuation">;</span>
    <span class="token class-name">FunctionalNoAnn</span> fna <span class="token operator">=</span> fa<span class="token operator">::</span><span class="token function">goodbye</span><span class="token punctuation">;</span>
    <span class="token comment">// Functional fac = fa; // Incompatible</span>
    <span class="token class-name">Functional</span> fl <span class="token operator">=</span> a <span class="token operator">-&gt;</span> <span class="token string">&quot;Goodbye, &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>
    <span class="token class-name">FunctionalNoAnn</span> fnal <span class="token operator">=</span> a <span class="token operator">-&gt;</span> <span class="token string">&quot;Goodbye, &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细观察在定义 <code>f</code> 和 <code>fna</code> 时发生了什么。 <code>Functional</code> 和 <code>FunctionalNoAnn</code> 声明了是接口，但 <code>FunctionalAnnotation</code> 并没有实现它们，却依旧可以被赋值。这是添加到 Java 8 中的一点小魔法：如果将方法引用或 Lambda 表达式赋值给函数式接口（类型需要匹配），Java 会适配你的赋值到目标接口。 编译器会在后台把方法引用或 Lambda 表达式包装进实现目标接口的类的实例中。</p><p>虽然 <code>FunctionalAnnotation</code> 确实符合 <code>Functional</code> 模型，但是 Java 不允许我们像<code>fac</code>定义的那样，将 <code>FunctionalAnnotation</code> 直接赋值给 <code>Functional</code>，因为 <code>FunctionalAnnotation</code> 并没有显式地去实现 <code>Functional</code> 接口。唯一的惊喜是，Java 8 允许我们将函数赋值给接口，这样的语法更加简单漂亮。</p><p><code>java.util.function</code> 包旨在创建一组完整的目标接口，使得我们一般情况下不需再定义自己的接口。主要因为基本类型的存在，导致预定义的接口数量有少许增加。 如果你了解命名模式，顾名思义就能知道特定接口的作用。</p><p>以下是基本命名准则：</p><ol><li>如果只处理对象而非基本类型，名称则为 <code>Function</code>，<code>Consumer</code>，<code>Predicate</code> 等。参数类型通过泛型添加。</li><li>如果接收的参数是基本类型，则由名称的第一部分表示，如 <code>LongConsumer</code>，<code>DoubleFunction</code>，<code>IntPredicate</code> 等，但返回基本类型的 <code>Supplier</code> 接口例外。</li><li>如果返回值为基本类型，则用 <code>To</code> 表示，如 <code>ToLongFunction &lt;T&gt;</code> 和 <code>IntToLongFunction</code>。</li><li>如果返回值类型与参数类型相同，则是一个 <code>Operator</code> ：单个参数使用 <code>UnaryOperator</code>，两个参数使用 <code>BinaryOperator</code>。</li><li>如果接收参数并返回一个布尔值，则是一个 <strong>谓词</strong> (<code>Predicate</code>)。</li><li>如果接收的两个参数类型不同，则名称中有一个 <code>Bi</code>。</li></ol><p><code>java.util.function</code> 中常见的目标类型（包括例外情况）：</p><table><thead><tr><th style="text-align:center;"><strong>特征</strong></th><th style="text-align:center;"><strong>函数式方法名</strong></th><th style="text-align:center;"><strong>示例</strong></th></tr></thead><tbody><tr><td style="text-align:center;">无参数； 无返回值</td><td style="text-align:center;"><strong>Runnable</strong> (java.lang) <code>run()</code></td><td style="text-align:center;"><strong>Runnable</strong></td></tr><tr><td style="text-align:center;">无参数； 返回类型任意</td><td style="text-align:center;"><strong>Supplier</strong> <code>get()</code> <code>getAs类型()</code></td><td style="text-align:center;"><strong>Supplier<code>&lt;T&gt;</code> BooleanSupplier IntSupplier LongSupplier DoubleSupplier</strong></td></tr><tr><td style="text-align:center;">无参数； 返回类型任意</td><td style="text-align:center;"><strong>Callable</strong> (java.util.concurrent) <code>call()</code></td><td style="text-align:center;"><strong>Callable<code>&lt;V&gt;</code></strong></td></tr><tr><td style="text-align:center;">1 参数； 无返回值</td><td style="text-align:center;"><strong>Consumer</strong> <code>accept()</code></td><td style="text-align:center;"><strong><code>Consumer&lt;T&gt;</code> IntConsumer LongConsumer DoubleConsumer</strong></td></tr><tr><td style="text-align:center;">2 参数 <strong>Consumer</strong></td><td style="text-align:center;"><strong>BiConsumer</strong> <code>accept()</code></td><td style="text-align:center;"><strong><code>BiConsumer&lt;T,U&gt;</code></strong></td></tr><tr><td style="text-align:center;">2 参数 <strong>Consumer</strong>； 第一个参数是 引用； 第二个参数是 基本类型</td><td style="text-align:center;"><strong>Obj 类型 Consumer</strong> <code>accept()</code></td><td style="text-align:center;"><strong><code>ObjIntConsumer&lt;T&gt;</code> <code>ObjLongConsumer&lt;T&gt;</code> <code>ObjDoubleConsumer&lt;T&gt;</code></strong></td></tr><tr><td style="text-align:center;">1 参数； 返回类型不同</td><td style="text-align:center;"><strong>Function</strong> <code>apply()</code> <strong>To 类型</strong> 和 <strong>类型 To 类型</strong> <code>applyAs类型()</code></td><td style="text-align:center;"><strong>Function<code>&lt;T,R&gt;</code> IntFunction<code>&lt;R&gt;</code> <code>LongFunction&lt;R&gt;</code> DoubleFunction<code>&lt;R&gt;</code> ToIntFunction<code>&lt;T&gt;</code> <code>ToLongFunction&lt;T&gt;</code> <code>ToDoubleFunction&lt;T&gt;</code> IntToLongFunction IntToDoubleFunction LongToIntFunction LongToDoubleFunction DoubleToIntFunction DoubleToLongFunction</strong></td></tr><tr><td style="text-align:center;">1 参数； 返回类型相同</td><td style="text-align:center;"><strong>UnaryOperator</strong> <code>apply()</code></td><td style="text-align:center;"><strong><code>UnaryOperator&lt;T&gt;</code> IntUnaryOperator LongUnaryOperator DoubleUnaryOperator</strong></td></tr><tr><td style="text-align:center;">2 参数，类型相同； 返回类型相同</td><td style="text-align:center;"><strong>BinaryOperator</strong> <code>apply()</code></td><td style="text-align:center;"><strong><code>BinaryOperator&lt;T&gt;</code> IntBinaryOperator LongBinaryOperator DoubleBinaryOperator</strong></td></tr><tr><td style="text-align:center;">2 参数，类型相同; 返回整型</td><td style="text-align:center;">Comparator (java.util) <code>compare()</code></td><td style="text-align:center;"><strong><code>Comparator&lt;T&gt;</code></strong></td></tr><tr><td style="text-align:center;">2 参数； 返回布尔型</td><td style="text-align:center;"><strong>Predicate</strong> <code>test()</code></td><td style="text-align:center;"><strong><code>Predicate&lt;T&gt;</code> <code>BiPredicate&lt;T,U&gt;</code> IntPredicate LongPredicate DoublePredicate</strong></td></tr><tr><td style="text-align:center;">参数基本类型； 返回基本类型</td><td style="text-align:center;"><strong>类型 To 类型 Function</strong> <code>applyAs类型()</code></td><td style="text-align:center;"><strong>IntToLongFunction IntToDoubleFunction LongToIntFunction LongToDoubleFunction DoubleToIntFunction DoubleToLongFunction</strong></td></tr><tr><td style="text-align:center;">2 参数； 类型不同</td><td style="text-align:center;"><strong>Bi 操作</strong> (不同方法名)</td><td style="text-align:center;"><strong><code>BiFunction&lt;T,U,R&gt;</code> <code>BiConsumer&lt;T,U&gt;</code> <code>BiPredicate&lt;T,U&gt;</code> <code>ToIntBiFunction&lt;T,U&gt;</code> <code>ToLongBiFunction&lt;T,U&gt;</code> <code>ToDoubleBiFunction&lt;T&gt;</code></strong></td></tr></tbody></table><p>可以看出，在创建 <code>java.util.function</code> 时，设计者们做出了一些选择。</p><p>例如，为什么没有 <code>IntComparator</code>，<code>LongComparator</code> 和 <code>DoubleComparator</code> 呢？</p><p>有 <code>BooleanSupplier</code> 却没有其他表示 <strong>Boolean</strong> 的接口；有通用的 <code>BiConsumer</code> 却没有用于 <strong>int</strong>，<strong>long</strong> 和 <strong>double</strong> 的 <code>BiConsumers</code> 变体（我理解他们为什么放弃这些接口）。这到底是疏忽还是有人认为其他组合使用得很少呢（他们是如何得出这个结论的）？</p><p>你还可以看到基本类型给 Java 添加了多少复杂性。该语言的第一版中就包含了基本类型，原因是考虑效率问题（该问题很快就缓解了）。现在，在语言的生命周期里，我们一直忍受语言设计的糟糕选择所带来的影响。</p><p>下面枚举了基于 Lambda 表达式的所有不同 <strong>Function</strong> 变体的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>
  <span class="token class-name">Foo</span> f<span class="token punctuation">;</span>
  <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token class-name">Foo</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>f <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">IBaz</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  <span class="token class-name">IBaz</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">LBaz</span> <span class="token punctuation">{</span>
  <span class="token keyword">long</span> l<span class="token punctuation">;</span>
  <span class="token class-name">LBaz</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>l <span class="token operator">=</span> l<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DBaz</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> d<span class="token punctuation">;</span>
  <span class="token class-name">DBaz</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> d<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionVariants</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">,</span><span class="token class-name">Bar</span><span class="token punctuation">&gt;</span></span> f1 <span class="token operator">=</span> f <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">IntFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IBaz</span><span class="token punctuation">&gt;</span></span> f2 <span class="token operator">=</span> i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">IBaz</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">LongFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LBaz</span><span class="token punctuation">&gt;</span></span> f3 <span class="token operator">=</span> l <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">LBaz</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">DoubleFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DBaz</span><span class="token punctuation">&gt;</span></span> f4 <span class="token operator">=</span> d <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">DBaz</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">ToIntFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IBaz</span><span class="token punctuation">&gt;</span></span> f5 <span class="token operator">=</span> ib <span class="token operator">-&gt;</span> ib<span class="token punctuation">.</span>i<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">ToLongFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LBaz</span><span class="token punctuation">&gt;</span></span> f6 <span class="token operator">=</span> lb <span class="token operator">-&gt;</span> lb<span class="token punctuation">.</span>l<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">ToDoubleFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DBaz</span><span class="token punctuation">&gt;</span></span> f7 <span class="token operator">=</span> db <span class="token operator">-&gt;</span> db<span class="token punctuation">.</span>d<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">IntToLongFunction</span> f8 <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">IntToDoubleFunction</span> f9 <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">LongToIntFunction</span> f10 <span class="token operator">=</span> l <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">LongToDoubleFunction</span> f11 <span class="token operator">=</span> l <span class="token operator">-&gt;</span> l<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">DoubleToIntFunction</span> f12 <span class="token operator">=</span> d <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">DoubleToLongFunction</span> f13 <span class="token operator">=</span> d <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>d<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Bar</span> b <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IBaz</span> ib <span class="token operator">=</span> f2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LBaz</span> lb <span class="token operator">=</span> f3<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DBaz</span> db <span class="token operator">=</span> f4<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> f5<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>ib<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> l <span class="token operator">=</span> f6<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span>lb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> d <span class="token operator">=</span> f7<span class="token punctuation">.</span><span class="token function">applyAsDouble</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>
    l <span class="token operator">=</span> f8<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d <span class="token operator">=</span> f9<span class="token punctuation">.</span><span class="token function">applyAsDouble</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> f10<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d <span class="token operator">=</span> f11<span class="token punctuation">.</span><span class="token function">applyAsDouble</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> f12<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span><span class="token number">13.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    l <span class="token operator">=</span> f13<span class="token punctuation">.</span><span class="token function">applyAsLong</span><span class="token punctuation">(</span><span class="token number">13.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些 Lambda 表达式尝试生成适合函数签名的最简代码。 在某些情况下有必要进行强制类型转换，否则编译器会报截断错误。</p><p><code>main()</code>中的每个测试都显示了 <code>Function</code> 接口中不同类型的 <code>apply()</code> 方法。 每个都产生一个与其关联的 Lambda 表达式的调用。</p><p>方法引用有自己的小魔法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">In1</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">In2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodConversion</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">In1</span> i1<span class="token punctuation">,</span> <span class="token class-name">In2</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;accept()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">someOtherName</span><span class="token punctuation">(</span><span class="token class-name">In1</span> i1<span class="token punctuation">,</span> <span class="token class-name">In2</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;someOtherName()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">In1</span><span class="token punctuation">,</span><span class="token class-name">In2</span><span class="token punctuation">&gt;</span></span> bic<span class="token punctuation">;</span>

    bic <span class="token operator">=</span> <span class="token class-name">MethodConversion</span><span class="token operator">::</span><span class="token function">accept</span><span class="token punctuation">;</span>
    bic<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">In1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">In2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    bic <span class="token operator">=</span> <span class="token class-name">MethodConversion</span><span class="token operator">::</span><span class="token function">someOtherName</span><span class="token punctuation">;</span>
    <span class="token comment">// bic.someOtherName(new In1(), new In2()); // Nope</span>
    bic<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">In1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">In2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
accept()
someOtherName()
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看 <code>BiConsumer</code> 的文档，你会看到它的函数式方法为 <code>accept()</code> 。 的确，如果我们将方法命名为 <code>accept()</code>，它就可以作为方法引用。 但是我们也可用不同的名称，比如 <code>someOtherName()</code>。只要参数类型、返回类型与 <code>BiConsumer</code> 的 <code>accept()</code> 相同即可。</p><p>因此，在使用函数接口时，名称无关紧要——只要参数类型和返回类型相同。 Java 会将你的方法映射到接口方法。 要调用方法，可以调用接口的函数式方法名（在本例中为 <code>accept()</code>），而不是你的方法名。</p><p>现在我们来看看，将方法引用应用于基于类的函数式接口（即那些不包含基本类型的函数式接口）。下面的例子中，我创建了适合函数式方法签名的最简单的方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// functional/ClassFunctionals.java</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">BB</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">CC</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassFunctionals</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">AA</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa1<span class="token punctuation">,</span> <span class="token class-name">AA</span> aa2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa<span class="token punctuation">,</span> <span class="token class-name">BB</span> bb<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token class-name">CC</span> <span class="token function">f5</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token class-name">CC</span> <span class="token function">f6</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa<span class="token punctuation">,</span> <span class="token class-name">BB</span> bb<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">f7</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">f8</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa<span class="token punctuation">,</span> <span class="token class-name">BB</span> bb<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token class-name">AA</span> <span class="token function">f9</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token class-name">AA</span> <span class="token function">f10</span><span class="token punctuation">(</span><span class="token class-name">AA</span> aa1<span class="token punctuation">,</span> <span class="token class-name">AA</span> aa2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f1</span><span class="token punctuation">;</span>
    s<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f2</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">&gt;</span></span> cons <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f3</span><span class="token punctuation">;</span>
    cons<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">,</span>BB<span class="token punctuation">&gt;</span></span> bicons <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f4</span><span class="token punctuation">;</span>
    bicons<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">,</span>CC<span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f5</span><span class="token punctuation">;</span>
    <span class="token class-name">CC</span> cc <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">,</span>BB<span class="token punctuation">,</span>CC<span class="token punctuation">&gt;</span></span> bif <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f6</span><span class="token punctuation">;</span>
    cc <span class="token operator">=</span> bif<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f7</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> result <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">,</span>BB<span class="token punctuation">&gt;</span></span> bip <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f8</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> bip<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UnaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">&gt;</span></span> uo <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f9</span><span class="token punctuation">;</span>
    <span class="token class-name">AA</span> aa <span class="token operator">=</span> uo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span>AA<span class="token punctuation">&gt;</span></span> bo <span class="token operator">=</span> <span class="token class-name">ClassFunctionals</span><span class="token operator">::</span><span class="token function">f10</span><span class="token punctuation">;</span>
    aa <span class="token operator">=</span> bo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请<strong>注意</strong>，每个方法名称都是随意的（如 <code>f1()</code>，<code>f2()</code>等）。正如你刚才看到的，一旦将方法引用赋值给函数接口，我们就可以调用与该接口关联的函数方法。 在此示例中为 <code>get()</code>、<code>compare()</code>、<code>accept()</code>、<code>apply()</code> 和 <code>test()</code>。</p><h3 id="多参数函数式接口" tabindex="-1"><a class="header-anchor" href="#多参数函数式接口" aria-hidden="true">#</a> 多参数函数式接口</h3><p><code>java.util.functional</code> 中的接口是有限的。比如有 <code>BiFunction</code>，但也仅此而已。 如果需要三参数函数的接口怎么办？ 其实这些接口非常简单，很容易查看 Java 库源代码并自行创建。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TriFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单测试，验证它是否有效：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TriFunctionTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">long</span> l<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TriFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tf <span class="token operator">=</span>
      <span class="token class-name">TriFunctionTest</span><span class="token operator">::</span><span class="token function">f</span><span class="token punctuation">;</span>
    tf <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token number">12</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们同时测试了方法引用和 Lambda 表达式。</p><h3 id="缺少基本类型的函数" tabindex="-1"><a class="header-anchor" href="#缺少基本类型的函数" aria-hidden="true">#</a> 缺少基本类型的函数</h3><p>让我们重温一下 <code>BiConsumer</code>，看看我们将如何创建各种缺失的预定义组合，涉及 <strong>int</strong>，<strong>long</strong> 和 <strong>double</strong> （基本类型）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BiConsumerPermutations</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> bicid <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%d, %f%n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> bicdi <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%d, %f%n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> bicil <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%d, %d%n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bicid<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">11.34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bicdi<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">22.45</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bicil<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
47, 11.340000
92, 22.450000
1, 11
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用 <code>System.out.format()</code> 来显示。它类似于 <code>System.out.println()</code> 但提供了更多的显示选项。 这里，<code>%f</code> 表示我将 <code>n</code> 作为浮点值给出，<code>%d</code> 表示 <code>n</code> 是一个整数值。 这其中可以包含空格，输入 <code>%n</code> 会换行 — 当然使用传统的 <code>\\n</code> 也能换行，但 <code>%n</code> 是自动跨平台的，这是使用 <code>format()</code> 的另一个原因。</p><p>上例只是简单使用了合适的包装类型，而装箱和拆箱负责它与基本类型之间的来回转换。 又比如，我们可以将包装类型和<code>Function</code>一起使用，而不去用各种针对基本类型的预定义接口。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionWithWrapped</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> fid <span class="token operator">=</span> i <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>
    <span class="token class-name">IntToDoubleFunction</span> fid2 <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有强制转换，则会收到错误消息：“Integer cannot be converted to Double”（<strong>Integer</strong> 无法转换为 <strong>Double</strong>），而使用 <strong><code>IntToDoubleFunction</code></strong> 就没有此类问题。 <strong><code>IntToDoubleFunction</code></strong> 接口的源代码是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IntToDoubleFunction</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> <span class="token function">applyAsDouble</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们可以简单地写 <code>Function &lt;Integer，Double&gt;</code> 并产生正常的结果，所以用基本类型（<code>IntToDoubleFunction</code>）的唯一理由是可以避免传递参数和返回结果过程中的自动拆装箱，进而提升性能。</p><p>似乎是考虑到使用频率，某些函数类型并没有预定义。</p><p>当然，如果因为缺少针对基本类型的函数式接口造成了性能问题，你可以轻松编写自己的接口（ 参考 Java 源代码）——尽管这里出现性能瓶颈的可能性不大。</p><h2 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数" aria-hidden="true">#</a> 高阶函数</h2>`,106),k={href:"https://en.wikipedia.org/wiki/Higher-order_function",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>我们先来看看如何产生一个函数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">interface</span>
<span class="token class-name">FuncSS</span> <span class="token keyword">extends</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// [1]</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProduceFunction</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">FuncSS</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2]</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">FuncSS</span> f <span class="token operator">=</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&quot;YELLING&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
yelling
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>produce()</code> 是高阶函数。</p><p><strong>[1]</strong> 使用继承，可以轻松地为专用接口创建别名。</p><p><strong>[2]</strong> 使用 Lambda 表达式，可以轻松地在方法中创建和返回一个函数。</p><p>要消费一个函数，消费函数需要在参数列表正确地描述函数类型。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">One</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Two</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumeFunction</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">Two</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">One</span><span class="token punctuation">,</span><span class="token class-name">Two</span><span class="token punctuation">&gt;</span></span> onetwo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> onetwo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">One</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Two</span> two <span class="token operator">=</span> <span class="token function">consume</span><span class="token punctuation">(</span>one <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当基于消费函数生成新函数时，事情就变得相当有趣了。代码示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">I</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;I&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">O</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;O&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformFunction</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> o<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> f2 <span class="token operator">=</span> <span class="token function">transform</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">O</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">O</span> o <span class="token operator">=</span> f2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">I</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
I
O
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>transform()</code> 生成一个与传入的函数具有相同签名的函数，但是你可以生成任何你想要的类型。</p><p>这里使用到了 <code>Function</code> 接口中名为 <code>andThen()</code> 的默认方法，该方法专门用于操作函数。 顾名思义，在调用 <code>in</code> 函数之后调用 <code>andThen()</code>（还有个 <code>compose()</code> 方法，它在 <code>in</code> 函数之前应用新函数）。 要附加一个 <code>andThen()</code> 函数，我们只需将该函数作为参数传递。 <code>transform()</code> 产生的是一个新函数，它将 <code>in</code> 的动作与 <code>andThen()</code> 参数的动作结合起来。</p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>在上一节的 <code>ProduceFunction.java</code> 中，我们从方法中返回 Lambda 函数。 虽然过程简单，但是有些问题必须再回过头来探讨一下。</p><p><strong>闭包</strong>（Closure）一词总结了这些问题。 它非常重要，利用闭包可以轻松生成函数。</p><p>考虑一个更复杂的 Lambda，它使用函数作用域之外的变量。 返回该函数会发生什么？ 也就是说，当你调用函数时，它对那些 “外部 ”变量引用了什么? 如果语言不能自动解决，那问题将变得非常棘手。 能够解决这个问题的语言被称作 <em>支持闭包</em>，或者称作 <em>词法定界</em>（<em>lexically scoped</em> ，基于词法作用域的）( 也有用术语 <em>变量捕获</em> <em>variable capture</em> 称呼的)。Java 8 提供了有限但合理的闭包支持，我们将用一些简单的例子来研究它。</p><p>首先，下列方法返回一个函数，该函数访问对象字段和方法参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure1</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i<span class="token punctuation">;</span>
  <span class="token class-name">IntSupplier</span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，仔细考虑一下，<code>i</code> 的这种用法并非是个大难题，因为对象很可能在你调用 <code>makeFun()</code> 之后就存在了——实际上，垃圾收集器几乎肯定会保留以这种方式被绑定到现存函数的对象。当然，如果你对同一个对象多次调用 <code>makeFun()</code> ，你最终会得到多个函数，它们共享 <code>i</code> 的存储空间：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// functional/SharedStorage.java</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SharedStorage</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Closure1</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Closure1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IntSupplier</span> f1 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IntSupplier</span> f2 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IntSupplier</span> f3 <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
0
1
2
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次调用 <code>getAsInt()</code> 都会增加 <code>i</code>，表明存储是共享的。</p><p>如果 <code>i</code> 是 <code>makeFun()</code> 的局部变量怎么办？ 在正常情况下，当 <code>makeFun()</code> 完成时 <code>i</code> 就消失。 但它仍可以编译：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure2</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntSupplier</span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由 <code>makeFun()</code> 返回的 <code>IntSupplier</code> “关住了” <code>i</code> 和 <code>x</code>，因此即使<code>makeFun()</code>已执行完毕，当你调用返回的函数时<code>i</code> 和 <code>x</code>仍然有效，而不是像正常情况下那样在 <code>makeFun()</code> 执行后 <code>i</code> 和<code>x</code>就消失了。 但请注意，我没有像 <code>Closure1.java</code> 那样递增 <code>i</code>，因为会产生编译时错误。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure3</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntSupplier</span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// x++ 和 i++ 都会报错：</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x<span class="token operator">++</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>x</code> 和 <code>i</code> 的操作都犯了同样的错误：被 Lambda 表达式引用的局部变量必须是 <code>final</code> 或者是等同 <code>final</code> 效果的。</p><p>如果使用 <code>final</code> 修饰 <code>x</code>和 <code>i</code>，就不能再递增它们的值了。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure4</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntSupplier</span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么为什么在 <code>Closure2.java</code> 中， <code>x</code> 和 <code>i</code> 非 <code>final</code> 却可以运行呢？</p><p>这就叫做<strong>等同 final 效果</strong>（Effectively Final）。这个术语是在 Java 8 才开始出现的，表示虽然没有明确地声明变量是 <code>final</code> 的，但是因变量值没被改变过而实际有了 <code>final</code> 同等的效果。 如果局部变量的初始值永远不会改变，那么它实际上就是 <code>final</code> 的。</p><p>如果 <code>x</code> 和 <code>i</code> 的值在方法中的其他位置发生改变（但不在返回的函数内部），则编译器仍将视其为错误。每个递增操作则会分别产生错误消息。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure5</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntSupplier</span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>等同 final 效果</strong>意味着可以在变量声明前加上 <strong>final</strong> 关键字而不用更改任何其余代码。 实际上它就是具备 <code>final</code> 效果的，只是没有明确说明。</p><p>在闭包中，在使用 <code>x</code> 和 <code>i</code> 之前，通过将它们赋值给 <code>final</code> 修饰的变量，我们解决了 <code>Closure5.java</code> 中遇到的问题。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure6</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntSupplier</span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> iFinal <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> xFinal <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> xFinal <span class="token operator">+</span> iFinal<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中 <code>iFinal</code> 和 <code>xFinal</code> 的值在赋值后并没有改变过，因此在这里使用 <code>final</code> 是多余的。</p><p>如果改用包装类型会是什么情况呢？我们可以把<code>int</code>类型改为<code>Integer</code>类型研究一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure7</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntSupplier</span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器非常聪明地识别到变量 <code>i</code> 的值被更改过。 包装类型可能是被特殊处理了，我们再尝试下 <strong>List</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure8</span> <span class="token punctuation">{</span>
  <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ai<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> ai<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Closure8</span> c7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Closure8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>
      l1 <span class="token operator">=</span> c7<span class="token punctuation">.</span><span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      l2 <span class="token operator">=</span> c7<span class="token punctuation">.</span><span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
[1]
[1]
[1, 42]
[1, 96]
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这次一切正常。我们改变了 <strong>List</strong> 的内容却没产生编译时错误。通过观察本例的输出结果，我们发现这看起来非常安全。这是因为每次调用 <code>makeFun()</code> 时，其实都会创建并返回一个全新而非共享的 <code>ArrayList</code>。也就是说，每个闭包都有自己独立的 <code>ArrayList</code>，它们之间互不干扰。</p><p>请<strong>注意</strong>我已经声明 <code>ai</code> 是 <code>final</code> 的了。尽管在这个例子中你可以去掉 <code>final</code> 并得到相同的结果（试试吧！）。 应用于对象引用的 <code>final</code> 关键字仅表示不会重新赋值引用。 它并不代表你不能修改对象本身。</p><p>我们来看看 <code>Closure7.java</code> 和 <code>Closure8.java</code> 之间的区别。我们看到：在 <code>Closure7.java</code> 中变量 <code>i</code> 有过重新赋值。 也许这就是触发<strong>等同 final 效果</strong>错误消息的原因。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Closure9</span> <span class="token punctuation">{</span>
  <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reassignment</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> ai<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例，重新赋值引用会触发错误消息。如果只修改指向的对象则没问题，只要没有其他人获得对该对象的引用（这意味着你有多个实体可以修改对象，此时事情会变得非常混乱），基本上就是安全的。</p><p>让我们回顾一下 <code>Closure1.java</code>。那么现在问题来了：为什么变量 <code>i</code> 被修改编译器却没有报错呢。 它既不是 <code>final</code> 的，也不是<strong>等同 final 效果</strong>的。</p><p>因为 <code>i</code> 是外部类的成员，所以这样做肯定是安全的（除非你正在创建共享可变内存的多个函数）。是的，你可以辩称在这种情况下不会发生变量捕获（Variable Capture）。</p><p>但可以肯定的是，<code>Closure3.java</code> 的错误消息是专门针对局部变量的。因此，规则并非只是 “在 Lambda 之外定义的任何变量必须是 <code>final</code> 的或<strong>等同 final 效果</strong>” 那么简单。</p><p>相反，你必须考虑捕获的变量是否是<strong>等同 final 效果</strong>的。 如果它是对象中的字段（实例变量），那么它有独立的生命周期，不需要任何特殊的捕获以便稍后在调用 Lambda 时存在。（注：结论是——Lambda 可以没有限制地引用 实例变量和静态变量。但局部变量必须显式声明为 final，或事实上是 final 。）</p><h3 id="作为闭包的内部类" tabindex="-1"><a class="header-anchor" href="#作为闭包的内部类" aria-hidden="true">#</a> 作为闭包的内部类</h3><p>我们可以使用匿名内部类重写之前的例子:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousClosure</span> <span class="token punctuation">{</span>
  <span class="token class-name">IntSupplier</span> <span class="token function">makeFun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 同样规则的应用:</span>
    <span class="token comment">// i++; // 非等同 final 效果</span>
    <span class="token comment">// x++; // 同上</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IntSupplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上只要有内部类，就会有闭包（Java 8 只是简化了闭包操作）。在 Java 8 之前，变量 <code>x</code> 和 <code>i</code> 必须被明确声明为 <code>final</code>。在 Java 8 中，内部类的规则放宽，包括<strong>等同 final 效果</strong>。</p><h2 id="函数组合" tabindex="-1"><a class="header-anchor" href="#函数组合" aria-hidden="true">#</a> 函数组合</h2><p>函数组合（Function Composition）意为“多个函数组合成新函数”。它通常是函数式编程的基本组成部分。在前面的 <code>TransformFunction.java</code> 类中，就有一个使用 <code>andThen()</code> 的函数组合示例。一些 <code>java.util.function</code> 接口中包含支持函数组合的方法 。</p><table><thead><tr><th style="text-align:center;">组合方法</th><th style="text-align:center;">支持接口</th></tr></thead><tbody><tr><td style="text-align:center;"><code>andThen(argument)</code> 执行原操作,再执行参数操作</td><td style="text-align:center;"><strong>Function BiFunction Consumer BiConsumer IntConsumer LongConsumer DoubleConsumer UnaryOperator IntUnaryOperator LongUnaryOperator DoubleUnaryOperator BinaryOperator</strong></td></tr><tr><td style="text-align:center;"><code>compose(argument)</code> 执行参数操作,再执行原操作</td><td style="text-align:center;"><strong>Function UnaryOperator IntUnaryOperator LongUnaryOperator DoubleUnaryOperator</strong></td></tr><tr><td style="text-align:center;"><code>and(argument)</code> 原谓词(Predicate)和参数谓词的短路<strong>逻辑与</strong></td><td style="text-align:center;"><strong>Predicate BiPredicate IntPredicate LongPredicate DoublePredicate</strong></td></tr><tr><td style="text-align:center;"><code>or(argument)</code> 原谓词和参数谓词的短路<strong>逻辑或</strong></td><td style="text-align:center;"><strong>Predicate BiPredicate IntPredicate LongPredicate DoublePredicate</strong></td></tr><tr><td style="text-align:center;"><code>negate()</code> 该谓词的<strong>逻辑非</strong></td><td style="text-align:center;"><strong>Predicate BiPredicate IntPredicate LongPredicate DoublePredicate</strong></td></tr></tbody></table><p>下例使用了 <code>Function</code> 里的 <code>compose()</code>和 <code>andThen()</code>。代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionComposition</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>
    f1 <span class="token operator">=</span> s <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    f2 <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    f3 <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    f4 <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>
      f4<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">&quot;GO AFTER ALL AMBULANCES&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
AFTER ALL AMBULANCES
_fter _ll _mbul_nces
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们重点看正在创建的新函数 <code>f4</code>。它调用 <code>apply()</code> 的方式与常规几乎无异。</p><p>当 <code>f1</code> 获得字符串时，它已经被 <code>f2</code> 剥离了前三个字符。这是因为 <code>compose（f2）</code> 表示 <code>f2</code> 的调用发生在 <code>f1</code> 之前。</p><p>下例是谓词(<code>Predicate</code>) 的逻辑运算演示.代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PredicateComposition</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>
    p1 <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    p2 <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>
    p3 <span class="token operator">=</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    p4 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foobar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;foobaz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fongopuckey&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">/*
foobar
foobaz
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>p4</code> 获取到了所有谓词(<code>Predicate</code>)并组合成一个更复杂的谓词。解读：如果字符串中不包含 <code>bar</code> 且长度小于 5，或者它包含 <code>foo</code> ，则结果为 <code>true</code>。</p><p>正因它产生如此清晰的语法，我在主方法中采用了一些小技巧，并借用了下一章的内容。首先，我创建了一个字符串对象的流，然后将每个对象传递给 <code>filter()</code> 操作。 <code>filter()</code> 使用 <code>p4</code> 的谓词来确定对象的去留。最后我们使用 <code>forEach()</code> 将 <code>println</code> 方法引用应用在每个留存的对象上。</p><p>从输出结果我们可以看到 <code>p4</code> 的工作流程：任何带有 <code>&quot;foo&quot;</code> 的字符串都得以保留，即使它的长度大于 5。 <code>&quot;fongopuckey&quot;</code> 因长度超出且不包含 <code>foo</code> 而被丢弃。</p>`,64);function r(v,m){const t=l("ExternalLinkIcon");return e(),o("div",null,[u,s("p",null,[n("这个名字可能听起来令人生畏，但是："),s("a",k,[n("高阶函数"),c(t)]),n("（Higher-order Function）只是一个消费或产生函数的函数。")]),d])}const y=p(i,[["render",r],["__file","14. 函数式编程.html.vue"]]);export{y as default};
