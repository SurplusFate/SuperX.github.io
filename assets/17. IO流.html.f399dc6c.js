import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.1407a880.js";const p={},e=t(`<h1 id="_17-io-流" tabindex="-1"><a class="header-anchor" href="#_17-io-流" aria-hidden="true">#</a> 17. IO 流</h1><blockquote><p>在丑陋的 Java I/O 编程方式诞生多年以后，Java 终于简化了文件读写的基本操作。</p></blockquote><p>IO（输入/输出）是比较乏味的事情，因为看不到明显的运行效果，但输入/输出是所有程序都必需的部分——使用输入机制，允许程序读取外部数据（包括来自磁盘、光盘等存储设备的数据）、用户输入数据；使用输出机制，允许程序记录运行状态，将程序数据输出到磁盘、光盘等存储设备中。</p><h2 id="file-类" tabindex="-1"><a class="header-anchor" href="#file-类" aria-hidden="true">#</a> File 类</h2><p>File 类是 <code>java.io</code> 包下代表与平台无关的文件和目录，也就是说，如果希望在程序中操作文件和目录，都可以通过 File 类来完成。</p><p>File 能新建、删除、重命名文件和目录，但 File 不能访问文件内容本身。</p><h3 id="访问文件和目录" tabindex="-1"><a class="header-anchor" href="#访问文件和目录" aria-hidden="true">#</a> 访问文件和目录</h3><p>File 类可以使用文件路径字符串来创建 File 实例，该文件路径字符串既可以是绝对路径，也可以是相对路径。</p><p>在默认情况下，系统总是依据用户的工作路径来解释相对路径，这个路径由系统属性“user.dir”指定，通常也就是运行 Java 虚拟机时所在的路径。</p><p>File 类提供了很多方法来操作文件和目录，下面列出一些比较常用的方法。</p><p><strong>1. 访问文件名相关的方法：</strong></p><ol><li><code>String getName()</code>：返回此 File 对象所表示的文件名或路径名（如果是路径，则返回最后一级子路径名）。</li><li><code>String getPath()</code>：返回此 File 对象所对应的路径名。</li><li><code>File getAbsoluteFile()</code>：返回此 File 对象所对应的绝对路径所对应的 File 对象。</li><li><code>String getAbsolutePath()</code>：返回此 File 对象所对应的绝对路径名。</li><li><code>String getParent()</code>：返回此 File 对象所对应目录（最后一级子目录）的父目录名。</li><li><code>boolean renameTo(File newName)</code>：重命名此 File 对象所对应的文件或目录，如果重命名成功，则返回 true；否则返回 false。</li></ol><p><strong>2. 文件检测相关的方法：</strong></p><ol><li><code>boolean exists()</code>：判断 File 对象所对应的文件或目录是否存在。</li><li><code>boolean canWrite()</code>：判断 File 对象所对应的文件和目录是否可写。</li><li><code>boolean canRead()</code>：判断 File 对象所对应的文件和目录是否可读。</li><li><code>boolean isFile()</code>：判断 File 对象所对应的是否是文件，而不是目录。</li><li><code>boolean isDirectory()</code>：判断 File 对象所对应的是否是目录，而不是文件。</li><li><code>boolean isAbsolute()</code>：判断 File 对象所对应的文件或目录是否是绝对路径。该方法消除了不同平台的差异，可以直接判断 File 对象是否为绝对路径。在 UNIX/Linux/BSD 等系统上，如果路径名开头是一条斜线（/），则表明该 File 对象对应一个绝对路径；在 Windows 等系统上，如果路径开头是盘符，则说明它是一个绝对路径。</li></ol><p><strong>3. 获取常规文件信息：</strong></p><ol><li><code>long lastModified()</code>：返回文件的最后修改时间。</li><li><code>long length()</code>：返回文件内容的长度。</li></ol><p><strong>4. 文件操作相关的方法：</strong></p><ol><li><code>boolean createNewFile()</code>：当此 File 对象所对应的文件不存在时，该方法将新建一个该 File 对象所指定的新文件，如果创建成功则返回 true；否则返回 false。</li><li><code>boolean delete()</code>：删除 File 对象所对应的文件或路径。</li><li><code>static File createTempFile(String prefix, String suffix)</code> ：在默认的临时文件目录中创建一个临时的空文件，使用给定前缀、系统生成的随机数和给定后缀作为文件名。这是一个静态方法，可以直接通过 File 类来调用。prefix 参数必须至少是 3 个字节长。建议前缀使用一个短的、有意义的字符串，比如&quot;hjb&quot;或&quot;mail&quot;。suffix 参数可以为 null，在这种情况下，将使用默认的后缀“.tmp”。</li><li><code>static File createTempFile(String prefix, String suffix, File directory)</code>：在 directory 所指定的目录中创建一个临时的空文件，使用给定前缀、系统生成的随机数和给定后缀作为文件名。这是一个静态方法，可以直接通过 File 类来调用。</li></ol><p><strong>5. 目录操作相关的方法：</strong></p><ol><li><code>boolean mkdir()</code>：试图创建一个 File 对象所对应的目录，如果创建成功，则返回 true；否则返回 false。调用该方法时 File 对象必须对应一个路径，而不是一个文件。</li><li><code>String[] list()</code>：列出 File 对象的所有子文件名和路径名，返回 String 数组。</li><li><code>File[] listFiles()</code>：列出 File 对象的所有子文件和路径，返回 File 数组。</li><li><code>static File[] listRoots()</code>：列出系统所有的根路径。这是一个静态方法，可以直接通过 File 类来调用。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 以当前路径来创建一个 File 对象（只会创建对象实例，不会在电脑中创建文件）</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 直接获取文件名，输出一点</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取相对路径的父路径可能出错，下面代码输出 null</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取绝对路径</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取上一级路径</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在当前路径下创建一个临时文件</span>
        <span class="token class-name">File</span> tmpFile <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 指定当 JVM 退出时删除该文件</span>
        tmpFile<span class="token punctuation">.</span><span class="token function">deleteOnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 以系统当前时间作为新文件名来创建新对象（只会创建对象实例，不会在电脑中创建文件）</span>
        <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newFile 文件是否存在：&quot;</span> <span class="token operator">+</span> newFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 以指定 newFile 对象来创建一个文件（创建具体的文件）</span>
        newFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 以 newFile 对象来创建一个目录，因为 newFile 已经存在</span>
        <span class="token comment">// 所以下面方法返回 false，即无法创建该目录</span>
        newFile<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用 list() 方法列出当前路径下的所有文件和路径</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileList <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====当前路径下所有文件和路径如下====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> fileName <span class="token operator">:</span> fileList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// listRoots() 静态方法列出所有的磁盘根路径</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> roots <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">listRoots</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;====系统所有根路径如下====&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> root <span class="token operator">:</span> roots<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文件过滤器" tabindex="-1"><a class="header-anchor" href="#文件过滤器" aria-hidden="true">#</a> 文件过滤器</h3><p>在 File 类的 <code>list()</code>方法中可以接收一个 <code>FilenameFilter</code>参数，通过该参数可以只列出符合条件的文件。</p><p><code>FilenameFilter</code>接口里包含了一个 <code>accept(File dir, String name)</code>方法，该方法将依次对指定 File 的所有子目录或者文件进行迭代，如果该方法返回 true，则 <code>list()</code>方法会列出该子目录或者文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilenameFilterTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nameList <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilenameFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> nameList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现自己的 FilenameFilter 实现类</span>
<span class="token keyword">class</span> <span class="token class-name">MyFilenameFilter</span> <span class="token keyword">implements</span> <span class="token class-name">FilenameFilter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果文件名以。java 结尾，或者文件对应一个路径，则返回 true</span>
        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.java&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="理解-java-的-io-流" tabindex="-1"><a class="header-anchor" href="#理解-java-的-io-流" aria-hidden="true">#</a> 理解 Java 的 IO 流</h2><p>Java 的 IO 流是实现输入/输出的基础，它可以方便地实现数据的输入/输出操作，在 Java 中把不同的输入/输出源（键盘、文件、网络连接等）抽象表述为“流”（stream），通过流的方式允许 Java 程序使用相同的方式来访问不同的输入/输出源。stream 是从起源（source）到接收（sink）的有序数据。</p><p>Java 把所有传统的流类型（类或抽象类）都放在 <code>java.io</code> 包中，用以实现输入/输出功能。</p><h3 id="流的分类" tabindex="-1"><a class="header-anchor" href="#流的分类" aria-hidden="true">#</a> 流的分类</h3><p><strong>1. 输入流和输出流：</strong></p><ol><li>输入流：只能从中读取数据，而不能向其写入数据。</li><li>输出流：只能向其写入数据，而不能从中读取数据。</li></ol><p>数据从内存到硬盘，通常称为输出流——也就是说，这里的输入、输出都是从程序运行所在内存的角度来划分的。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208152045882.jpeg" alt="epub_681336_1946"></p><p>Java 的输入流主要由 <code>InputStream</code>和 Reader 作为基类，而输出流则主要由 <code>OutputStream</code>和 Writer 作为基类。它们都是一些抽象基类，无法直接创建实例。</p><p><strong>2. 字节流和字符流：</strong></p><p>字节流和字符流的用法几乎完全一样，区别在于字节流和字符流所操作的数据单元不同——字节流操作的数据单元是 8 位的字节，而字符流操作的数据单元是 16 位的字符。</p><p>字节流主要由 <code>InputStream</code>和 <code>OutputStream</code>作为基类，而字符流则主要由 Reader 和 Writer 作为基类。</p><p><strong>3. 节点流和处理流：</strong></p><p>可以从/向一个特定的 IO 设备（如磁盘、网络）读/写数据的流，称为节点流，节点流也被称为低级流（Low Level Stream）。</p><p>当使用节点流进行输入/输出时，程序直接连接到实际的数据源，和实际的输入/输出节点连接。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208152047288.jpeg" alt="epub_681336_1948"></p><p>处理流则用于对一个已存在的流进行连接或封装，通过封装后的流来实现数据读/写功能。处理流也被称为高级流。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208152048478.jpeg" alt="epub_681336_1949"></p><p>当使用处理流进行输入/输出时，程序并不会直接连接到实际的数据源，没有和实际的输入/输出节点连接。</p><p>使用处理流的一个明显好处是，只要使用相同的处理流，程序就可以采用完全相同的输入/输出代码来访问不同的数据源，随着处理流所包装节点流的变化，程序实际所访问的数据源也相应地发生变化。</p><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>Java 使用处理流来包装节点流是一种典型的装饰器设计模式，通过使用处理流来包装不同的节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法来完成输入/输出功能。因此处理流也被称为包装流。</p></div><h3 id="流的概念模型" tabindex="-1"><a class="header-anchor" href="#流的概念模型" aria-hidden="true">#</a> 流的概念模型</h3><p>Java 把所有设备里的有序数据抽象成流模型，简化了输入/输出处理，理解了流的概念模型也就了解了 Java IO。</p><p>Java 的 IO 流的 40 多个类都是从如下 4 个抽象基类派生的。</p><ol><li><code>InputStream/Reader</code>：所有输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><code>OutputStream/Writer</code>：所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ol><p>对于 <code>InputStream</code>和 <code>Reader</code>而言，它们把输入设备抽象成一个“水管”，这个水管里的每个“水滴”依次排列。</p><p>字节流和字符流的处理方式其实非常相似，只是它们处理的输入/输出单位不同而已。</p><p>输入流使用隐式的记录指针来表示当前正准备从哪个“水滴”开始读取，每当程序从 <code>InputStream</code>或 <code>Reader</code> 里取出一个或多个“水滴”后，记录指针自动向后移动；除此之外，<code>InputStream</code>和 <code>Reader</code>里都提供一些方法来控制记录指针的移动。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208152100807.jpeg" alt="epub_681336_1953"></p><p>对于 <code>OutputStream</code>和 <code>Writer</code>而言，它们同样把输出设备抽象成一个“水管”，只是这个水管里没有任何水滴。</p><p>当执行输出时，程序相当于依次把“水滴”放入到输出流的水管中，输出流同样采用隐式的记录指针来标识当前水滴即将放入的位置，每当程序向 <code>OutputStream</code> 或 <code>Writer</code>里输出一个或多个水滴后，记录指针自动向后移动。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208152101684.jpeg" alt="epub_681336_1954"></p><p>处理流的功能主要体现在以下两个方面。</p><ol><li>性能的提高：主要以增加缓冲的方式来提高输入/输出的效率。</li><li>操作的便捷：处理流可能提供了一系列便捷的方法来一次输入/输出大批量的内容，而不是输入/输出一个或多个“水滴”。</li></ol><p>处理流可以“嫁接”在任何已存在的流的基础之上，这就允许 Java 应用程序采用相同的代码、透明的方式来访问不同的输入/输出设备的数据流。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208152102274.jpeg" alt="epub_681336_1957"></p><p>通过使用处理流，Java 程序无须理会输入/输出节点是磁盘、网络还是其他的输入/输出设备，程序只要将这些节点流包装成处理流，就可以使用相同的输入/输出代码来读写不同的输入/输出设备的数据。</p><h2 id="字节流和字符流" tabindex="-1"><a class="header-anchor" href="#字节流和字符流" aria-hidden="true">#</a> 字节流和字符流</h2><p>它们的操作方式几乎完全一样，区别只是操作的数据单元不同而已——字节流操作的数据单元是字节，字符流操作的数据单元是字符。</p><h3 id="inputstream-和-reader" tabindex="-1"><a class="header-anchor" href="#inputstream-和-reader" aria-hidden="true">#</a> InputStream 和 Reader</h3><p><code>InputStream</code>和 <code>Reader</code>是所有输入流的抽象基类，本身并不能创建实例来执行输入，但它们将成为所有输入流的模板，所以它们的方法是所有输入流都可使用的方法。</p><p>在 <code>InputStream</code>里包含如下 3 个方法。</p><ol><li><code>int read()</code>：从输入流中读取单个字节（相当于从图 15.5 所示的水管中取出一滴水），返回所读取的字节数据（字节数据可直接转换为 int 类型）。</li><li><code>int read(byte[] b)</code>：从输入流中最多读取 b.length 个字节的数据，并将其存储在字节数组 b 中，返回实际读取的字节数。</li><li><code>int read(byte[] b, int off, int len)</code>：从输入流中最多读取 len 个字节的数据，并将其存储在数组 b 中，放入数组 b 中时，并不是从数组起点开始，而是从 off 位置开始，返回实际读取的字节数。</li></ol><p>在 Reader 里包含如下 3 个方法。</p><ol><li><code>int read()</code>：从输入流中读取单个字符（相当于从图 15.5 所示的水管中取出一滴水），返回所读取的字符数据（字符数据可直接转换为 int 类型）。</li><li><code>int read(char[] cbuf)</code>：从输入流中最多读取 cbuf.length 个字符的数据，并将其存储在字符数组 cbuf 中，返回实际读取的字符数。</li><li><code>int read(char[] cbuf, int off, int len)</code>：从输入流中最多读取 len 个字符的数据，并将其存储在字符数组 cbuf 中，放入数组 cbuf 中时，并不是从数组起点开始，而是从 off 位置开始，返回实际读取的字符数。</li></ol><p>对比 <code>InputStream</code>和 <code>Reader</code>所提供的方法，就不难发现这两个基类的功能基本是一样的。<code>InputStream</code>和 <code>Reader</code> 都是将输入数据抽象成水管，所以程序既可以通过 <code>read()</code>方法每次读取一个“水滴”，也可以通过 <code>read(char[] cbuf)</code> 或 <code>read(byte[] b)</code>方法来读取多个“水滴”。</p><p><code>read(char[] cbuf)</code>方法中的数组可理解成一个“竹筒”，程序每次调用输入流的 <code>read(char[] cbuf)</code>或 <code>read(byte[] b)</code> 方法，就相当于用“竹筒”从输入流中取出一筒“水滴”，程序得到“竹筒”里的“水滴”后，转换成相应的数据即可；程序多次重复这个“取水”过程，直到最后。直到 <code>read(char[]cbuf) 或 read(byte[] b)</code> 方法返回-1，即表明到了输入流的结束点。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208152113813.jpeg" alt="epub_681336_1965"></p><p><code>InputStream</code>和 <code>Reader</code>分别有一个用于读取文件的输入流：<code>FileInputStream</code>和 <code>FileReader</code>，它们都是节点流——会直接和指定文件关联。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStreamTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建字节输入流</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/FileInputStreamTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个长度为 1024 的“竹筒”</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 用于保存实际读取的字节数</span>
        <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用循环来重复“取水”过程</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 取出“竹筒”中的水滴（字节），将字节数组转换成字符串输入</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 关闭文件输入流，放在 finally 块里更安全</span>
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>FileReader</code>来读取文件本身。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReaderTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建字符输入流</span>
            <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/FileReaderTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建一个长度为 32 的“竹筒”</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 用于保存实际读取的字符数</span>
            <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 使用循环来重复“取水”过程</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 取出“竹筒”中的水滴（字符），将字符数组转换成字符串输入！</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，<code>InputStream</code>和 <code>Reader</code>还支持如下几个方法来移动记录指针。</p><ol><li><code>void mark(int readAheadLimit)</code>：在记录指针当前位置记录一个标记（mark）。</li><li><code>boolean markSupported()</code>：判断此输入流是否支持 mark() 操作，即是否支持记录标记。</li><li><code>void reset()</code>：将此流的记录指针重新定位到上一次记录标记（mark）的位置。</li><li><code>long skip(long n</code>)：记录指针向前移动 n 个字节/字符。</li></ol><h3 id="outputstream-和-writer" tabindex="-1"><a class="header-anchor" href="#outputstream-和-writer" aria-hidden="true">#</a> OutputStream 和 Writer</h3><p>两个流都提供了如下 3 个方法。</p><ol><li><code>void write(int c)</code>：将指定的字节/字符输出到输出流中，其中 c 既可以代表字节，也可以代表字符。</li><li><code>void write(byte[]/char[] buf)</code>：将字节数组/字符数组中的数据输出到指定输出流中。</li><li><code>void write(byte[]/char[] buf, int off, int len)</code>：将字节数组/字符数组中从 off 位置开始，长度为 len 的字节/字符输出到输出流中。</li></ol><p>因为字符流直接以字符作为操作单位，所以 Writer 可以用字符串来代替字符数组，即以 String 对象作为参数。Writer 里还包含如下两个方法。</p><ol><li><code>void write(String str)</code>：将 str 字符串里包含的字符输出到指定输出流中。</li><li><code>void write(String str, int off, int len)</code>：将 str 字符串里从 off 位置开始，长度为 len 的字符输出到指定输出流中。</li></ol><p>下面程序使用 <code>FileInputStream</code>来执行输入，并使用 <code>FileOutputStream</code>来执行输出，用以实现复制 FileOutputStreamTest.java 文件的功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileOutputStreamTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建字节输入流</span>
            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/FileOutputStreamTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 创建字节输出流</span>
            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/newFile.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 循环从输入流中取出数据</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 每读取一次，即写入文件输出流，读了多少，就写多少</span>
                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ioe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望直接输出字符串内容，则使用 Writer 会有更好的效果。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileWriterTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;poem.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;锦瑟 - 李商隐、r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;锦瑟无端五十弦，一弦一柱思华年。\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;庄生晓梦迷蝴蝶，望帝春心托杜鹃。\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;沧海月明珠有泪，蓝田日暖玉生烟。\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;此情可待成追忆，只是当时已惘然。\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ioe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输入-输出流体系" tabindex="-1"><a class="header-anchor" href="#输入-输出流体系" aria-hidden="true">#</a> 输入/输出流体系</h2><p>4 个基类使用起来有些烦琐，这就需要借助于处理流了。</p><h3 id="处理流的用法" tabindex="-1"><a class="header-anchor" href="#处理流的用法" aria-hidden="true">#</a> 处理流的用法</h3><p>使用处理流时的典型思路是，使用处理流来包装节点流，程序通过处理流来执行输入/输出功能，让节点流与底层的 I/O 设备、文件交互。</p><p>只要流的构造器参数不是一个物理节点，而是已经存在的流，那么这种流就一定是处理流；而所有节点流都是直接以物理 IO 节点作为构造器参数的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintStreamTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 使用 PrintStream 执行输出</span>
            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;普通字符串&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 直接使用 PrintStream 输出对象</span>
            ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ioe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PrintStream</code>的输出功能非常强大，前面程序中一直使用的标准输出 <code>System.out</code>的类型就是 <code>PrintStream</code>。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在使用处理流包装了底层节点流之后，关闭输入/输出流资源时，只要关闭最上层的处理流即可。关闭最上层的处理流时，系统会自动关闭被该处理流包装的节点流。</p></div><h3 id="体系" tabindex="-1"><a class="header-anchor" href="#体系" aria-hidden="true">#</a> 体系</h3><p>Java 的输入/输出流体系提供了近 40 个类，这些类看上去杂乱而没有规律，但如果我们将其按功能进行分类，则不难发现其是非常规则的。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208160918601.jpeg" alt="epub_681336_1978"></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果进行输入/输出的内容是文本内容，则应该考虑使用字符流；如果进行输入/输出的内容是二进制内容，则应该考虑使用字节流。</p></div><p>表仅仅总结了输入/输出流体系中位于 <code>java.io</code> 包下的流，还有一些诸如 <code>AudioInputStream</code>、<code>CipherInputStream</code> 、<code>DeflaterInputStream</code>、<code>ZipInputStream</code>等具有访问音频文件、加密/解密、压缩/解压等功能的字节流，它们具有特殊的功能，位于 JDK 的其他包下。</p><p>字节流以字节数组为节点，字符流以字符数组为节点；这种以数组为物理节点的节点流除了在创建节点流对象时需要传入一个字节数组或者字符数组之外，用法上与文件节点流完全相似。</p><p>与此类似的是，字符流还可以使用字符串作为物理节点，用于实现从字符串读取内容，或将内容写入字符串（用 <code>StringBuffer</code>充当字符串）的功能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringNodeTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> src <span class="token operator">=</span>
            <span class="token string">&quot;从明天起，做一个幸福的人、n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;喂马，劈柴，周游世界、n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;从明天起，关心粮食和蔬菜、n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;我有一所房子，面朝大海，春暖花开、n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;从明天起，和每一个亲人通信、n&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;告诉他们我的幸福、n&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">StringReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 采用循环读取的方式读取字符串</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> sr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ioe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建 StringWriter 时，实际上以一个 StringBuffer 作为输出节点</span>
            <span class="token comment">// 下面指定的 20 就是 StringBuffer 的初始长度</span>
            <span class="token class-name">StringWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 调用 StringWriter 的方法执行输出</span>
            sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;有一个美丽的新世界，\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;她在远方等我，\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;那里有天真的孩子，\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;还有姑娘的酒窝、n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;----下面是 sw 字符串节点里的内容----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 使用 toString() 方法返回 StringWriter 字符串节点的内容</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 String 是不可变的字符串对象，所以 <code>StringWriter</code>使用 <code>StringBuffer</code>作为输出节点。</p><p>4 个访问管道的流：<code>PipedInputStream</code>、<code>PipedOutputStream</code>、<code>PipedReader</code>、<code>PipedWriter</code> ，它们都是用于实现进程之间通信功能的，分别是字节输入流、字节输出流、字符输入流和字符输出流。</p><p>缓冲流则增加了缓冲功能，增加缓冲功能可以提高输入、输出的效率，增加缓冲功能后需要使用 <code>flush()</code>才可以将缓冲区的内容写入实际的物理节点。</p><p>对象流主要用于实现对象的序列化。</p><h3 id="转换流" tabindex="-1"><a class="header-anchor" href="#转换流" aria-hidden="true">#</a> 转换流</h3><p>输入/输出流体系中还提供了两个转换流，这两个转换流用于实现将字节流转换成字符流，其中 <code>InputStreamReader</code> 将字节输入流转换成字符输入流，<code>OutputStreamWriter</code>将字节输出流转换成字符输出流。</p><p>Java 使用 <code>System.in</code> 代表标准输入，即键盘输入，但这个标准输入流是 <code>InputStream</code> 类的实例，使用不太方便，而且键盘输入内容都是文本内容，所以可以使用 <code>InputStreamReader</code>将其转换成字符输入流，普通的 Reader 读取输入内容时依然不太方便，我们可以将普通的 Reader 再次包装成 <code>BufferedReader</code>，利用 <code>BufferedReader</code>的 <code>readLine()</code> 方法可以一次读取一行内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyinTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 将 Sytem.in 对象转换成 Reader 对象</span>
            <span class="token class-name">InputStreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将普通的 Reader 包装成 BufferedReader</span>
            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> buffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// 采用循环方式来逐行地读取</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>buffer <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果读取的字符串为&quot;exit&quot;，则程序退出</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;exit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 打印读取的内容</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入内容为：&quot;</span> <span class="token operator">+</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ioe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序将 <code>System.in</code> 包装成 <code>BufferedReader</code>，<code>BufferedReader</code>流具有缓冲功能，它可以一次读取一行文本——以换行符为标志，如果它没有读到换行符，则程序阻塞，等到读到换行符为止。</p><p>运行上面程序可以发现这个特征，当我们在控制台执行输入时，只有按下回车键，程序才会打印出刚刚输入的内容。</p><h3 id="推回输入流" tabindex="-1"><a class="header-anchor" href="#推回输入流" aria-hidden="true">#</a> 推回输入流</h3><p>在输入/输出流体系中，有两个特殊的流与众不同，就是 <code>PushbackInputStream</code>和 <code>PushbackReader</code>，它们都提供了如下 3 个方法。</p><ol><li><code>void unread(byte[]/char[] buf)</code>：将一个字节/字符数组内容推回到推回缓冲区里，从而允许重复读取刚刚读取的内容。</li><li><code>void unread(byte[]/char[] b, int off, int len)</code>：将一个字节/字符数组里从 off 开始，长度为 len 字节/字符的内容推回到推回缓冲区里，从而允许重复读取刚刚读取的内容。</li><li><code>void unread(int b)</code>：将一个字节/字符推回到推回缓冲区里，从而允许重复读取刚刚读取的内容。</li></ol><p>这两个推回输入流都带有一个推回缓冲区，当程序调用这两个推回输入流的 <code>unread()</code>方法时，系统将会把指定数组的内容推回到该缓冲区里，而推回输入流每次调用 read() 方法时总是先从推回缓冲区读取，只有完全读取了推回缓冲区的内容后，但还没有装满 <code>read()</code>所需的数组时才会从原输入流中读取。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161005210.jpeg" alt="epub_681336_1985"></p><p>当我们创建一个 <code>PushbackInputStream</code>和 <code>PushbackReader</code>时需要指定推回缓冲区的大小，默认的推回缓冲区的长度为 1。</p><p>如果程序中推回到推回缓冲区的内容超出了推回缓冲区的大小，将会引发 Pushback buffer overflow 的 <code>IOException</code>异常。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>推回缓冲区的长度与 <code>read()</code>方法的数组参数的长度没有任何关系，完全可以更大。</p></div><p>下面程序试图找出程序中的&quot;new PushbackReader&quot;字符串，当找到该字符串后，程序只是打印出目标字符串之前的内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PushbackTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建一个 PushbackReader 对象，指定推回缓冲区的长度为 64</span>
            <span class="token class-name">PushbackReader</span> pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushbackReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/PushbackTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 用以保存上次读取的字符串内容</span>
            <span class="token class-name">String</span> lastContent <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 循环读取文件内容</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 将读取的内容转换成字符串</span>
                <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> targetIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token comment">// 将上次读取的字符串和本次读取的字符串拼起来</span>
                <span class="token comment">// 查看是否包含目标字符串，如果包含目标字符串</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>targetIndex <span class="token operator">=</span> <span class="token punctuation">(</span>lastContent <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;new PushbackReader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 将本次内容和上次内容一起推回缓冲区</span>
                    pr<span class="token punctuation">.</span><span class="token function">unread</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lastContent <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 指定读取前面 len 个字符</span>
                    <span class="token keyword">int</span> len <span class="token operator">=</span> targetIndex <span class="token operator">&gt;</span> <span class="token number">32</span> <span class="token operator">?</span> <span class="token number">32</span> <span class="token operator">:</span> targetIndex<span class="token punctuation">;</span>
                    <span class="token comment">// 再次读取指定长度的内容（就是目标字符串之前的内容）</span>
                    pr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 打印读取的内容</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 打印上次读取的内容</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>lastContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 将本次内容设为上次读取的内容</span>
                    lastContent <span class="token operator">=</span> content<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ioe<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重定向标准输入-输出" tabindex="-1"><a class="header-anchor" href="#重定向标准输入-输出" aria-hidden="true">#</a> 重定向标准输入/输出</h2><p>当程序通过 <code>System.in</code>来获取输入时，实际上是从键盘读取输入；当程序试图通过 <code>System.out</code>执行输出时，程序总是输出到控制台。</p><p>在 System 类里提供了如下 3 个重定向标准输入/输出的方法。</p><ol><li><code>static void setErr(PrintStream err)</code>：重定向 “标准”错误输出流。</li><li><code>static void setIn(InputStream in)</code>：重定向“标准”输入流。</li><li><code>static void setOut(PrintStream out)</code>：重定向 “标准”输出流。</li></ol><p>将 <code>System.out</code>的输出重定向到文件输出。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedirectOut</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 一次性创建 PrintStream 输出流</span>
            <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;out.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将标准输出重定向到 ps 输出流</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 向标准输出输出一个字符串</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;普通字符串&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 向标准输出输出一个对象</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedirectOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>System.in</code>重定向到指定文件，而不是键盘输入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedirectIn</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/RedirectIn.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将标准输入重定向到 fis 输入流</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 使用 System.in 创建 Scanner 对象，用于获取标准输入</span>
            <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 增加下面一行只把回车作为分隔符</span>
            sc<span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断是否还有下一个输入项</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 输出输入项</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的内容是：&quot;</span> <span class="token operator">+</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java-虚拟机读写其他进程的数据" tabindex="-1"><a class="header-anchor" href="#java-虚拟机读写其他进程的数据" aria-hidden="true">#</a> Java 虚拟机读写其他进程的数据</h2><p>使用 Runtime 对象的 <code>exec()</code>方法可以运行平台上的其他程序，该方法产生一个 Process 对象，Process 对象代表由该 Java 程序启动的子进程。Process 类提供了如下 3 个方法，用于让程序和其子进程进行通信。</p><ol><li><code>InputStream getErrorStream()</code>：获取子进程的错误流。</li><li><code>InputStream getInputStream()</code>：获取子进程的输入流。</li><li><code>OutputStream getOutputStream()</code>：获取子进程的输出流。</li></ol><div class="custom-container tip"><p class="custom-container-title">提示</p><p>此处的输入流、输出流非常容易混淆，如果我们试图让子进程读取程序中的数据，那么应该用输入流还是输出流？不是输入流，而是输出流。我们要站在程序的角度来看问题，子进程读取程序的数据，就是让程序把数据输出到子进程中（就像把数据输出到文件中一样，只是现在由子进程节点代替了文件节点），所以应该使用输出流。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadFromProcess</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 运行 javac 命令，返回运行该命令的子进程</span>
        <span class="token class-name">Process</span> p <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;javac&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 以 p 进程的错误流创建 BufferedReader 对象</span>
            <span class="token comment">// 这个错误流对本程序是输入流，对 p 进程则是输出流</span>
            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> buff <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// 采取循环方式来读取 p 进程的错误输出</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>buff <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据流对 p 进程（javac 进程）而言，它是输出流；但对本程序（ReadFromProcess）而言，它是输入流——我们衡量输入、输出时总是站在运行本程序所在内存的角度，所以该数据流应该是输入流。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161108835.jpeg" alt="epub_681336_1992"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161109192.png" alt="image-20220816110942756"></p><p>也可以通过 Process 的 <code>getOutputStream()</code>方法获得向进程输入数据的流。</p><h2 id="randomaccessfile" tabindex="-1"><a class="header-anchor" href="#randomaccessfile" aria-hidden="true">#</a> RandomAccessFile</h2><p><code>RandomAccessFile</code>是 Java 输入/输出流体系中功能最丰富的文件内容访问类，它提供了众多的方法来访问文件内容，它既可以读取文件内容，也可以向文件输出数据。</p><p><code>RandomAccessFile</code>支持“任意访问”的方式，程序可以直接跳转到文件的任意地方来读写数据。</p><p><code>RandomAccessFile</code>对象也包含了一个记录指针，用以标识当前读写处的位置，当程序新创建一个 <code>RandomAccessFile</code> 对象时，该对象的文件记录指针位于文件头（也就是 0 处），当读/写了 n 个字节后，文件记录指针将会向后移动 n 个字节。</p><p>除此之外，<code>RandomAccessFile</code>可以自由移动该记录指针，既可以向前移动，也可以向后移动。<code>RandomAccessFile</code>包含了如下两个方法来操作文件记录指针。</p><ol><li><code>long getFilePointer()</code>：返回文件记录指针的当前位置。</li><li><code>void seek(long pos)</code>：将文件记录指针定位到 pos 位置。</li></ol><p><code>RandomAccessFile</code>类有两个构造器，其实这两个构造器基本相同，只是指定文件的形式不同而已——一个使用 String 参数来指定文件名，一个使用 File 参数来指定文件本身。</p><p>除此之外，创建 <code>RandomAccessFile</code>对象时还需要指定一个 mode 参数，该参数指定 <code>RandomAccessFile</code>的访问模式，该参数有如下 4 个值。</p><ol><li><code>r</code>：以只读方式打开指定文件。如果试图对该 <code>RandomAccessFile</code>执行写入方法，都将抛出 <code>IOException</code>异常。</li><li><code>rw</code>：以读、写方式打开指定文件。如果该文件尚不存在，则尝试创建该文件。</li><li><code>rws</code>：以读、写方式打开指定文件。相对于 <code>rw</code>模式，还要求对文件的内容或元数据的每个更新都同步写入到底层存储设备。</li><li><code>rwd</code>：以读、写方式打开指定文件。相对于 <code>rw</code>模式，还要求对文件内容的每个更新都同步写入到底层存储设备。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFileTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/RandomAccessFileTest.java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 获取 RandomAccessFile 对象文件指针的位置，初始位置是 0</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RandomAccessFile 的文件指针的初始位置：&quot;</span> <span class="token operator">+</span> raf<span class="token punctuation">.</span><span class="token function">getFilePointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 移动 raf 的文件记录指针的位置</span>
            raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 用于保存实际读取的字节数</span>
            <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 使用循环来重复“取水”过程</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 取出“竹筒”中的水滴（字节），将字节数组转换成字符串输入</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面程序，将看到程序只读取后面部分的效果。</p><p>下面程序示范了如何向指定文件后追加内容，为了追加内容，程序应该先将记录指针移动到文件最后，然后开始向文件中输出内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppendContent</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 以读、写方式打开一个 RandomAccessFile 对象</span>
            <span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;out.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将记录指针移动到 out.txt 文件的最后</span>
            raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>raf<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;追加的内容！\\r\\n&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>RandomAccessFile</code>不能向文件的指定位置插入内容，如果直接将文件记录指针移动到中间某位置后开始输出，则新输出的内容会覆盖文件中原有的内容。</p><p>如果需要向指定位置插入内容，程序需要先把插入点后面的内容读入缓冲区，等把需要插入的数据写入文件后，再将缓冲区的内容追加到文件后面。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertContent</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/InsertContent.java&quot;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">&quot;插入的内容、r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token keyword">long</span> pos<span class="token punctuation">,</span> <span class="token class-name">String</span> insertContent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> tmp <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">&quot;tmp&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tmp<span class="token punctuation">.</span><span class="token function">deleteOnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 创建一个临时文件来保存插入点后的数据</span>
            <span class="token class-name">FileOutputStream</span> tmpOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">FileInputStream</span> tmpIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// ------下面代码将插入点后的内容读入临时文件中保存------</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 用于保存实际读取的字节数</span>
            <span class="token keyword">int</span> hasRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 使用循环方式读取插入点后的数据</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 将读取的数据写入临时文件</span>
                tmpOut<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// ----------下面代码用于插入内容----------</span>
            <span class="token comment">// 把文件记录指针重新定位到 pos 位置</span>
            raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 追加需要插入的内容</span>
            raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>insertContent<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 追加临时文件中的内容</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRead <span class="token operator">=</span> tmpIn<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> hasRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据刚好插入到 <code>javadoc</code> 注释中。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161514334.png" alt="image-20220816151451359"></p><p>上面程序中使用 File 的 <code>createTempFile(String prefix, String suffix)</code> 方法创建了一个临时文件（该临时文件将在 JVM 退出时被删除），用以保存被插入文件的插入点后面的内容。</p><p>程序先将文件中插入点后的内容读入临时文件中，然后重新定位到插入点，将需要插入的内容添加到文件后面，最后将临时文件的内容添加到文件后面，通过这个过程就可以向指定文件、指定位置插入内容。</p><h2 id="对象序列化" tabindex="-1"><a class="header-anchor" href="#对象序列化" aria-hidden="true">#</a> 对象序列化</h2><p>对象序列化的目标是将对象保存到磁盘中，或允许在网络中直接传输对象。</p><p>对象序列化机制允许把内存中的 Java 对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，通过网络将这种二进制流传输到另一个网络节点。</p><p>其他程序一旦获得了这种二进制流（无论是从磁盘中获取的，还是通过网络获取的），都可以将这种二进制流恢复成原来的 Java 对象。</p><p>如果需要让某个对象支持序列化机制，则必须让它的类是可序列化的（serializable）。为了让某个类是可序列化的，该类必须实现如下两个接口之一：</p><ol><li>Serializable</li><li>Externalizable</li></ol><p>该接口是一个标记接口，实现该接口无须实现任何方法，它只是表明该类的实例是可序列化的。</p><h3 id="使用对象流实现序列化" tabindex="-1"><a class="header-anchor" href="#使用对象流实现序列化" aria-hidden="true">#</a> 使用对象流实现序列化</h3><p>一旦某个类实现了 Serializable 接口，该类的对象就是可序列化的，程序可以通过如下两个步骤来序列化该对象。</p><ol><li>创建一个 <code>ObjectOutputStream</code> ，这个输出流是一个处理流，所以必须建立在其他节点流的基础之上。</li><li>调用 <code>ObjectOutputStream</code> 对象的 <code>writeObject()</code> 方法输出可序列化对象。</li></ol><p>定义一个 Person 类，实现 Serializable 接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 注意此处没有提供无参数的构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有参数的构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>ObjectOutputStream</code> 将一个 Person 对象写入磁盘文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteObject</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建一个 ObjectOutputStream 输出流</span>
            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Person</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将 per 对象写入输出流</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上面程序，将会看到生成了一个 object.txt 文件，该文件的内容就是 Person 对象。</p><p>如果希望从二进制流中恢复 Java 对象，则需要使用反序列化。</p><ol><li>创建一个 <code>ObjectInputStream</code> 输入流，这个输入流是一个处理流，所以必须建立在其他节点流的基础之上。</li><li>调用 <code>ObjectInputStream</code> 对象的 <code>readObject()</code> 方法读取流中的对象，该方法返回一个 Object 类型的 Java 对象，如果程序知道该 Java 对象的类型，则可以将该对象强制类型转换成其真实的类型。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadObject</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建一个 ObjectInputStream 输入流</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;object.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从输入流中读取一个 Java 对象，并将其强制类型转换为 Person 类</span>
            <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;名字为：&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n 年龄为：&quot;</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反序列化读取的仅仅是 Java 对象的数据，而不是 Java 类，因此采用反序列化恢复 Java 对象时，必须提供该 Java 对象所属类的 class 文件，否则将会引发 <code>ClassNotFoundException</code>异常。</p><p><mark>Person 类只有一个有参数的构造器，没有无参数的构造器，而且该构造器内有一个普通的打印语句。当反序列化读取 Java 对象时，并没有看到程序调用该构造器，这表明反序列化机制无须通过构造器来初始化 Java 对象。</mark></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在 <code>ObjectInputStream</code>输入流中的 <code>readObject()</code> 方法声明抛出了 <code>ClassNotFoundException</code>异常。</p></div><p>如果使用序列化机制向文件中写入了多个 Java 对象，使用反序列化机制恢复对象时必须按实际写入的顺序读取。</p><p>当一个可序列化类有多个父类时（包括直接父类和间接父类），这些父类要么有无参数的构造器，要么也是可序列化的——否则反序列化时将抛出 <code>InvalidClassException</code> 异常。</p><p>如果父类是不可序列化的，只是带有无参数的构造器，则该父类中定义的 Field 值不会序列化到二进制流中。</p><h3 id="对象引用的序列化" tabindex="-1"><a class="header-anchor" href="#对象引用的序列化" aria-hidden="true">#</a> 对象引用的序列化</h3><p>如果某个类的 Field 类型不是基本类型或 String 类型，而是另一个引用类型，那么这个引用类必须是可序列化的，否则拥有该类型的 Field 的类也是不可序列化的。</p><p>如下 Teacher 类持有一个 Person 类的引用，只有 Person 类是可序列化的，Teacher 类才是可序列化的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Person</span> student<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Person</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>student <span class="token operator">=</span> student<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在假设有如下一种特殊情形：程序中有两个 Teacher 对象，它们的 student 实例变量都引用到同一个 Person 对象，而且该 Person 对象还有一个引用变量引用它。如下代码所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Teacher</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&quot;唐僧&quot;</span><span class="token punctuation">,</span> per<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Teacher</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&quot;菩提祖师&quot;</span><span class="token punctuation">,</span> per<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三个对象在内存中的存储示意图如图所示。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161657994.jpeg" alt="epub_681336_2005"></p><p>这里产生了一个问题——如果先序列化 t1 对象，则系统将该 t1 对象所引用的 Person 对象一起序列化；如果程序再序列化 t2 对象，系统将一样会序列化该 t2 对象，并且将再次序列化该 t2 对象所引用的 Person 对象；如果程序再显式序列化 per 对象，系统将再次序列化该 Person 对象。这个过程似乎会向输出流中输出 3 个 Person 对象。</p><p>这违背了 Java 序列化机制的初衷。</p><p>Java 序列化机制采用了一种特殊的序列化算法，其算法内容如下。</p><ol><li>所有保存到磁盘中的对象都有一个序列化编号。</li><li>当程序试图序列化一个对象时，程序将先检查该对象是否已经被序列化过，只有该对象从未（在本次虚拟机中）被序列化过，系统才会将该对象转换成字节序列并输出。</li><li>如果某个对象已经序列化过，程序将只是直接输出一个序列化编号，而不是再次重新序列化该对象。</li></ol><p>假设有如下顺序的序列化代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化后磁盘文件的存储示意图如图。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161714185.jpeg" alt="epub_681336_2009"></p><p>当多次调用 <code>writeObject()</code> 方法输出同一个对象时，只有第一次调用 <code>writeObject()</code> 方法时才会将该对象转换成字节序列并输出。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteTeacher</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建一个 ObjectOutputStream 输出流</span>
            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;teacher.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Person</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Teacher</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&quot;唐僧&quot;</span><span class="token punctuation">,</span> per<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Teacher</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">&quot;菩提祖师&quot;</span><span class="token punctuation">,</span> per<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 依次将 4 个对象写入输出流</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取序列化文件中的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadTeacher</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建一个 ObjectInputStream 输入流</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;teacher.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 依次读取 ObjectInputStream 输入流中的 4 个对象</span>
            <span class="token class-name">Teacher</span> t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Teacher</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Teacher</span> t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Teacher</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Teacher</span> t3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Teacher</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 输出 true</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;t1 的 student 引用和 p 是否相同：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 输出 true</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;t2 的 student 引用和 p 是否相同：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 输出 true</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;t2 和 t3 是否是同一个对象：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t2 <span class="token operator">==</span> t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161723934.png" alt="image-20220816172307334"></p><p>当程序序列化一个可变对象时，只有第一次使用 <code>writeObject()</code> 方法输出时才会将该对象转换成字节序列并输出，当程序再次调用 <code>writeObject()</code> 方法时，程序只是输出前面的序列化编号，即使后面该对象的 Field 值已被改变，改变的 Field 值也不会被输出。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializeMutable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建一个 ObjectOutputStream 输出流</span>
            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;mutable.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 创建一个 ObjectInputStream 输入流</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;mutable.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Person</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 系统将 per 对象转换成字节序列并输出</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 改变 per 对象的 name Field 的值</span>
            per<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;猪八戒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 系统只是输出序列化编号，所以改变后的 name 不会被序列化</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//①</span>
            <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//②</span>
            <span class="token comment">// 下面输出 true，即反序列化后 p1 等于 p2</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 下面依然看到输出“孙悟空”，即改变后的 Field 没有被序列化</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义序列化" tabindex="-1"><a class="header-anchor" href="#自定义序列化" aria-hidden="true">#</a> 自定义序列化</h3><p>在一些特殊的场景下，如果一个类里包含的某些 Field 值是敏感信息，例如银行账户信息等，这时不希望系统将该 Field 值进行序列化；或者某个 Field 的类型是不可序列化的，因此不希望对该 Field 进行递归序列化，以避免引发 <code>java.io.NotSerializableException</code> 异常。</p><p>通过在 Field 前面使用 <code>transient</code> 关键字修饰，可以指定 Java 序列化时无须理会该 Field。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 注意此处没有提供无参数的构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有参数的构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先序列化一个 Person 对象，然后再反序列化该 Person 对象，得到反序列化的 Person 对象后程序输出该对象的 age Field 值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransientTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建一个 ObjectOutputStream 输出流</span>
            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;transient.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 创建一个 ObjectInputStream 输入流</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;transient.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Person</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 系统将 per 对象转换成字节序列并输出</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于本程序中的 Person 类的 age Field 使用 transient 关键字修饰，所以 <code>age</code> 将输出 0。</p><p>Java 还提供了一种自定义序列化机制，通过这种自定义序列化机制可以让程序控制如何序列化各 Field，甚至完全不序列化某些 Field（与使用 transient 关键字的效果相同）。</p><p>在序列化和反序列化过程中需要特殊处理的类应该提供如下特殊签名的方法，这些特殊的方法用以实现自定义序列化。</p><ol><li><code>private void writeObject(java.io.ObjectOutputStream out)throws IOException;</code></li><li><code>private void readObject(java.io.ObjectInputStream in)throws IOException, ClassNotFoundException;</code></li><li><code>private void readObjectNoData()throws ObjectStreamException;</code></li></ol><p><code>writeObject()</code> 方法负责写入特定类的实例状态，以便相应的 <code>readObject()</code> 方法可以恢复它。通过重写该方法，程序员可以完全获得对序列化机制的控制，可以自主决定哪些 Field 需要序列化，需要怎样序列化。在默认情况下，该方法会调用 <code>out.defaultWriteObject</code> 来保存 Java 对象的各 Field，从而可以实现序列化 Java 对象状态的目的。</p><p><code>readObject()</code> 方法负责从流中读取并恢复对象 Field，通过重写该方法，程序员可以完全获得对反序列化机制的控制，可以自主决定需要反序列化哪些 Field，以及如何进行反序列化。在默认情况下，该方法会调用 <code>in.defaultReadObject</code> 来恢复 Java 对象的非静态和非瞬态 Field。在通常情况下，<code>readObject()</code> 方法与 <code>writeObject()</code> 方法对应，如果 <code>writeObject()</code> 方法中对 Java 对象的 Field 进行了一些处理，则应该在 <code>readObject()</code> 方法中对其 Field 进行相应的反处理，以便正确恢复该对象。</p><p>当序列化流不完整时，<code>readObjectNoData()</code> 方法可以用来正确地初始化反序列化的对象。例如，接收方使用的反序列化类的版本不同于发送方，或者接收方版本扩展的类不是发送方版本扩展的类，或者序列化流被篡改时，系统都会调用 <code>readObjectNoData()</code> 方法来初始化反序列化的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 注意此处没有提供无参数的构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有参数的构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将 name Field 值反转后写入二进制流</span>
        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将读取的字符串反转后赋给 name Field</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种更彻底的自定义机制，它甚至可以在序列化对象时将该对象替换成其他对象。如果需要实现序列化某个对象时替换该对象，则应为序列化类提供如下特殊方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">ANY</span><span class="token operator">-</span><span class="token constant">ACCESS</span><span class="token operator">-</span><span class="token constant">MODIFIER</span> <span class="token class-name">Object</span> <span class="token function">writeReplace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ObjectStreamException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此 <code>writeReplace()</code> 方法将由序列化机制调用，只要该方法存在。因为该方法可以拥有私有（private）、受保护的（protected）和包私有（package-private）等访问权限，所以其子类有可能获得该方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 注意此处没有提供无参数的构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有参数的构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重写 writeReplace 方法，程序在序列化该对象之前，先调用该方法</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">writeReplace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ObjectStreamException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下程序表面上是序列化 <code>Person 对象</code> ，但实际上序列化的是 <code>ArrayList</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReplaceTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建一个 ObjectOutputStream 输出流</span>
            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;replace.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 创建一个 ObjectInputStream 输入流</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;replace.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Person</span> per <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 系统将 per 对象转换成字节序列并输出</span>
            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 反序列化读取得到的是 ArrayList</span>
            <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 的序列化机制保证在序列化某个对象之前，先调用该对象的 <code>writeReplace()</code> 方法，如果该方法返回另一个 Java 对象，则系统转为序列化另一个对象。</p><p>与 <code>writeReplace()</code> 方法相对的是，序列化机制里还有一个特殊的方法，它可以实现保护性复制整个对象。这个方法就是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">ANY</span><span class="token operator">-</span><span class="token constant">ACCESS</span><span class="token operator">-</span><span class="token constant">MODIFIER</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ObjectStreamException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个方法会紧接着 <code>readObject()</code> 之后被调用，该方法的返回值将会代替原来反序列化的对象，而原来 <code>readObject()</code>反序列化的对象将会被立即丢弃。</p><p>Orientation 类的构造器私有，程序只有两个 Orientation 对象，分别通过 Orientation 的 <code>HORIZONTAL</code> 和 <code>VERTICAL</code> 两个常量来引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orientation</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Orientation</span> <span class="token constant">HORIZONTAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orientation</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Orientation</span> <span class="token constant">VERTICAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orientation</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Orientation</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>

        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;transient.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 写入 Orientation.HORIZONTAL 值</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">Orientation</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个 ObjectInputStream 输入流</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;transient.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 读取刚刚序列化的值</span>
        <span class="token class-name">Orientation</span> ori <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Orientation</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Orientation</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ori<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将一个 <code>Orientation.HORIZONTAL</code> 值序列化后再读出并立即拿 <code>ori</code> 和 <code>Orientation.HORIZONTAL</code> 值进行比较，将会发现返回 false。</p><p>在这种情况下，我们可以通过为 Orientation 类提供一个 <code>readResolve()</code> 方法来解决该问题。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Orientation</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Orientation</span> <span class="token constant">HORIZONTAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orientation</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Orientation</span> <span class="token constant">VERTICAL</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Orientation</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Orientation</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>

        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;transient.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 写入 Orientation.HORIZONTAL 值</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">Orientation</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建一个 ObjectInputStream 输入流</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;transient.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 读取刚刚序列化的值</span>
        <span class="token class-name">Orientation</span> ori <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Orientation</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Orientation</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ori<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 为枚举类增加 readResolve() 方法</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ObjectStreamException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">HORIZONTAL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token constant">VERTICAL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>因为反序列化机制在恢复 Java 对象时无须调用构造器来初始化 Java 对象，所以序列化机制可以用来“克隆”对象。</p></div><p>与 <code>writeReplace()</code> 方法类似的是，<code>readResolve()</code> 方法也可以使用任意的访问控制符，因此父类的 <code>readResolve()</code> 方法可能被其子类继承。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>当父类已经实现了 <code>readResolve()</code> 方法后，子类将变得无从下手。如果父类包含一个 protected 或 public 的 <code>readResolve()</code> 方法，而且子类也没有重写该方法，将会使得子类反序列化时得到一个父类的对象，而且也不容易发现这种错误。</p><p>总是让子类重写 <code>readResolve()</code> 方法无疑是一个负担，因此对于要被作为父类继承的类而言，实现 <code>readResolve()</code> 方法可能有一些潜在的危险。</p><p>通常的建议是，对于 final 类重写 <code>readResolve()</code> 方法不会有任何问题；否则，重写 <code>readResolve()</code> 方法时应尽量使用 private 修饰该方法。</p></div><h3 id="另一种自定义序列化机制" tabindex="-1"><a class="header-anchor" href="#另一种自定义序列化机制" aria-hidden="true">#</a> 另一种自定义序列化机制</h3><p>Java 还提供了另一种序列化机制，这种序列化方式完全由程序员决定存储和恢复对象数据。要实现该目标，Java 类必须实现 Externalizable 接口，该接口里定义了如下两个方法。</p><ol><li><code>void readExternal(ObjectInput in)</code>：需要序列化的类实现 <code>readExternal()</code> 方法来实现反序列化。该方法调用 <code>DataInput</code> （它是 <code>ObjectInput</code> 的父接口）的方法来恢复基本类型的 Field 值，调用 <code>ObjectInput</code> 的 <code>readObject()</code> 方法来恢复引用类型的 Field 值。</li><li><code>void writeExternal(ObjectOutput out)</code>：需要序列化的类实现 <code>writeExternal()</code> 方法来保存对象的状态。该方法调用 <code>DataOutput</code> （它是 <code>ObjectOutput</code> 的父接口）的方法来保存基本类型的 Field 值，调用 <code>ObjectOutput</code> 的 <code>writeObject()</code>方法来保存引用类型的 Field 值。</li></ol><p>采用实现 Externalizable 接口方式的序列化与前面介绍的自定义序列化非常相似，只是 Externalizable 接口强制自定义序列化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Externalizable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 注意此处没有提供无参数的构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;有参数的构造器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将 name Field 值反转后写入二进制流</span>
        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInput</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将读取的字符串反转后赋给 name Field</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Person 类实现了 <code>java.io.Externalizable</code> 接口，和 <code>readExternal()</code> 、<code>writeExternal()</code> 两个方法，这两个方法除了方法签名和 <code>readObject()</code>、<code>writeObject()</code> 两个方法的方法签名不同之外，其方法体完全一样。</p><p>如果程序需要序列化实现 Externalizable 接口的对象，一样调用 <code>ObjectOutputStream</code> 的 <code>writeObject()</code> 方法输出该对象即可；反序列化该对象，则调用 <code>ObjectInputStream</code> 的 <code>readObject()</code> 方法。</p><p>关于两种序列化机制的对比。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161831784.jpeg" alt="epub_681336_2017"></p><p>由于实现 Externalizable 接口导致了编程复杂度的增加，所以大部分时候都是采用实现 Serializable 接口方式来实现序列化。</p><p>关于对象序列化，还有如下几点需要注意。</p><ol><li>对象的类名、Field（包括基本类型、数组、对其他对象的引用）都会被序列化；方法、static Field （即静态 Field）、transientField（也被称为瞬态 Field）都不会被序列化。</li><li>实现 Serializable 接口的类如果需要让某个 Field 不被序列化，则可在该 Field 前加 transient 修饰符，而不是加 static 关键字。虽然 static 关键字也可达到这个效果，但 static 关键字不能这样用。</li><li>保证序列化对象的 Field 类型也是可序列化的，否则需要使用 transient 关键字来修饰该 Field，要不然，该类是不可序列化的。</li><li>反序列化对象时必须有序列化对象的 class 文件。</li><li>当通过文件、网络来读取序列化后的对象时，必须按实际写入的顺序读取。</li></ol><h3 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h3><p>Java 序列化机制允许为序列化类提供一个 <code>private static final</code> 的 <code>serialVersionUID</code> 值，该 Field 值用于标识该 Java 类的序列化版本，也就是说，如果一个类升级后，只要它的 <code>serialVersionUID</code> Field 值保持不变，序列化机制也会把它们当成同一个序列化版本。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>pubic <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token comment">//为该类指定一个 serialVersionUID Field 值</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">512L</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了在反序列化时确保序列化版本的兼容性，最好在每个要序列化的类中加入 <code>private static final long serialVersionUID</code> 这个 Field。</p><p>如果不显示定义 <code>serialVersionUID</code> Field 值，该 Field 值将由 JVM 根据类的相关信息计算，而修改后的类的计算结果与修改前的类的计算结果往往不同，从而造成对象的反序列化因为类版本不兼容而失败。</p><p>可以通过 JDK 安装路径的 bin 目录下的 <code>serialver.exe</code> 工具来获得该类的 <code>serialVersionUID</code> Field 值</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161845338.png" alt="image-20220816184508254"></p><p>在运行 <code>serialver</code> 命令时指定-show 选项，还可以启动一个图形用户界面。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161846264.png" alt="image-20220816184631201"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208161847657.png" alt="image-20220816184727609"></p><p>不显式指定 <code>serialVersionUID</code> Field 值的另一个坏处是，不利于程序在不同的 JVM 之间移植。因为不同的编译器计算该 Field 值的计算策略可能不同，从而造成虽然类完全没有改变，但是因为 JVM 不同，也会出现序列化版本不兼容而无法正确反序列化的现象。</p><h2 id="nio" tabindex="-1"><a class="header-anchor" href="#nio" aria-hidden="true">#</a> NIO</h2><p>前面介绍的输入流、输出流都是阻塞式的输入、输出。不仅如此，传统的输入流、输出流都是通过字节的移动来处理的（即使我们不直接去处理字节流，但底层的实现还是依赖于字节处理），也就是说，面向流的输入/输出系统一次只能处理一个字节，因此面向流的输入/输出系统通常效率不高。</p><p>从 JDK 1.4 开始，Java 提供了一系列改进的输入/输出处理的新功能，这些功能被统称为新 IO（New IO，简称 NIO），新增了许多用于处理输入/输出的类，这些类都被放在 <code>java.nio</code> 包以及子包下，并且对原 <code>java.io</code> 包中的很多类都以 NIO 为基础进行了改写，新增了满足 NIO 的功能。</p><h3 id="nio-概述" tabindex="-1"><a class="header-anchor" href="#nio-概述" aria-hidden="true">#</a> NIO 概述</h3><p>NIO 采用内存映射文件的方式来处理输入/输出，NIO 将文件或文件的一段区域映射到内存中，这样就可以像访问内存一样来访问文件了（这种方式模拟了操作系统上的虚拟内存的概念），通过这种方式来进行输入/输出比传统的输入/输出要快得多。</p><p>NIO 相关的包如下。</p><ol><li><code>java.nio</code> 包：主要包含各种与 Buffer 相关的类。</li><li><code>java.nio.channels</code> 包：主要包含与 Channel 和 Selector 相关的类。</li><li><code>java.nio.charset</code> 包：主要包含与字符集相关的类。</li><li><code>java.nio.channels.spi</code> 包：主要包含与 Channel 相关的服务提供者编程接口。</li><li><code>java.nio.charset.spi</code> 包：包含与字符集相关的服务提供者编程接口。</li></ol><p>Channel（通道）和 Buffer（缓冲）是 NIO 中的两个核心对象，Channel 是对传统的输入/输出系统的模拟，在 NIO 系统中所有的数据都需要通过通道传输；Channel 与传统的 <code>InputStream</code>、<code>OutputStream</code> 最大的区别在于它提供了一个 <code>map()</code> 方法，通过该 <code>map()</code> 方法可以直接将“一块数据”映射到内存中。</p><p>如果说传统的输入/输出系统是面向流的处理，则新 IO 则是面向块的处理。Buffer 可以被理解成一个容器，它的本质是一个数组，发送到 Channel 中的所有对象都必须首先放到 Buffer 中，而从 Channel 中读取的数据也必须先放到 Buffer 中。</p><p>此处的 Buffer 有点类似于前面介绍的“竹筒”，但该 Buffer 既可以像“竹筒”那样一次次去 Channel 中取水，也允许使用 Channel 直接将文件的某块数据映射成 Buffer。除了 Channel 和 Buffer 之外，新 IO 还提供了用于将 Unicode 字符串映射成字节序列以及逆映射操作的 Charset 类，也提供了用于支持非阻塞式输入/输出的 Selector 类。</p><h3 id="使用-buffer" tabindex="-1"><a class="header-anchor" href="#使用-buffer" aria-hidden="true">#</a> 使用 Buffer</h3><p>从内部结构上来看，Buffer 就像一个数组，它可以保存多个类型相同的数据。Buffer 是一个抽象类，其最常用的子类是 <code>ByteBuffer</code> ，它可以在底层字节数组上进行 get/set 操作。</p><p>除了 <code>ByteBuffer</code> 之外，对应于其他基本数据类型（<code>boolean</code> 除外）都有相应的 Buffer 类：<code>CharBuffer</code>、<code>ShortBuffer</code>、<code>IntBuffer</code> 、<code>LongBuffer</code>、<code>FloatBuffer</code>、<code>DoubleBuffer</code>。除了 <code>ByteBuffer</code> 之外，它们都采用相同或相似的方法来管理数据，只是各自管理的数据类型不同而已。这些 Buffer 类都没有提供构造器，通过使用如下方法来得到一个 Buffer 对象。</p><ul><li><code>static XxxBuffer allocate(int capacity)</code>：创建一个容量为 capacity 的 <code>XxxBuffer</code> 对象。</li></ul><p>使用较多的是 <code>ByteBuffer</code> 和 <code>CharBuffer</code>。其中 <code>ByteBuffer</code> 类还有一个子类：<code>MappedByteBuffer</code>，它用于表示 Channel 将磁盘文件的部分或全部内容映射到内存中后得到的结果，通常 <code>MappedByteBuffer</code> 对象由 Channel 的 <code>map()</code> 方法返回。</p><p>在 Buffer 中有 3 个重要的概念：容量（capacity）、界限（limit）和位置（position）。</p><ol><li>容量（capacity）：缓冲区的容量（capacity）表示该 Buffer 的最大数据容量，即最多可以存储多少数据。缓冲区的容量不可能为负值，创建后不能改变。</li><li>界限（limit）：第一个不应该被读出或者写入的缓冲区位置索引。也就是说，位于 limit 后的数据既不可被读，也不可被写。</li><li>位置（position）：用于指明下一个可以被读出的或者写入的缓冲区位置索引（类似于 IO 流中的记录指针）。当使用 Buffer 从 Channel 中读取数据时，position 的值恰好等于已经读到了多少数据。当刚刚新建一个 Buffer 对象时，其 position 为 0；如果从 Channel 中读取了 2 个数据到该 Buffer 中，则 position 为 2，指向 Buffer 中第 3 个（第 1 个位置的索引为 0）位置。</li></ol><p>除此之外，Buffer 里还支持一个可选的标记（mark，类似于传统 IO 流中的 mark），Buffer 允许直接将 position 定位到该 mark 处。这些值满足如下关系。</p><blockquote><p>0≤mark≤position≤limit≤capacity</p></blockquote><p>某个 Buffer 读入了一些数据后的示意图。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181356396.jpeg" alt="epub_681336_2039"></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>Buffer 中包含两个重要的方法，即 <code>flip()</code> 和 <code>clear()</code>，<code>flip()</code> 为从 Buffer 中取出数据做好准备，而 <code>clear()</code> 为再次向 Buffer 中装入数据做好准备。</p></div><p>Buffer 的主要作用就是装入数据，然后输出数据（其作用类似于前面介绍的取水的“竹筒”），开始时 Buffer 的 position 为 0，limit 为 capacity，程序可通过 <code>put()</code> 方法向 Buffer 中放入一些数据（或者从 Channel 中获取一些数据），每放入一些数据，Buffer 的 position 相应地向后移动一些位置。</p><p>当 Buffer 装入数据结束后，调用 Buffer 的 <code>flip()</code> 方法，该方法将 limit 设置为 position 所在位置，并将 position 设为 0，这就使得 Buffer 的读写指针又移到了开始位置。</p><p>也就是说，Buffer 调用 <code>flip()</code> 方法之后，Buffer 为输出数据做好准备；当 Buffer 输出数据结束后，Buffer 调用 <code>clear()</code> 方法，<code>clear()</code> 方法不是清空 Buffer 的数据，它仅仅将 position 置为 0，将 limit 置为 capacity，这样为再次向 Buffer 中装入数据做好准备。</p><p>除此之外，Buffer 还包含如下一些常用的方法。</p><ol><li><code>int capacity()</code>：返回 Buffer 的 capacity 大小。</li><li><code>boolean hasRemaining()</code>：判断当前位置（position）和界限（limit）之间是否还有元素可供处理。</li><li><code>int limit()</code>：返回 Buffer 的界限（limit）的位置。</li><li><code>Buffer limit(int newLt)</code>：重新设置界限（limit）的值，并返回一个具有新的 limit 的缓冲区对象。</li><li><code>Buffer mark()</code>：设置 Buffer 的 mark 位置，它只能在 0 和位置（position）之间做 mark。</li><li><code>int position()</code>：返回 Buffer 中的 position 值。</li><li><code>Buffer position(int newPs)</code>：设置 Buffer 的 position，并返回 position 被修改后的 Buffer 对象。</li><li><code>int remaining()</code>：返回当前位置和界限（limit）之间的元素个数。</li><li><code>Buffer reset()</code>：将位置（position）转到 mark 所在的位置。</li><li><code>Buffer rewind()</code>：将位置（position）设置成 0，取消设置的 mark。</li></ol><p>Buffer 的所有子类还提供了两个重要的方法：<code>put()</code> 和 <code>get()</code> 方法，用于向 Buffer 中放入数据和从 Buffer 中取出数据。当使用 <code>put()</code>和 <code>get()</code> 方法放入、取出数据时，Buffer 既支持对单个数据的访问，也支持对批量数据的访问（以数组作为参数）。</p><p>使用 <code>put()</code> 和 <code>get()</code> 来访问 Buffer 中的数据时，分为相对和绝对两种。</p><ol><li>相对（Relative）：从 Buffer 的当前 position 处开始读取或写入数据，然后将位置（position）的值按处理元素的个数增加。</li><li>绝对（Absolute）：直接根据索引向 Buffer 中读取或写入数据，使用绝对方式访问 Buffer 里的数据时，并不会影响位置（position）的值。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Buffer</span>
        <span class="token class-name">CharBuffer</span> buff <span class="token operator">=</span> <span class="token class-name">CharBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//①</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;capacity: &quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;limit: &quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;position: &quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 放入元素</span>
        buff<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buff<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buff<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//②</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;加入三个元素后，position=&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用 flip() 方法</span>
        buff<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//③</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行 flip() 后，limit=&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;position=&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 取出第一个元素</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第一个元素 (position=0)：&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//④</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;取出一个元素后，position=&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用 clear() 方法</span>
        buff<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//⑤</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行 clear() 后，limit=&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行 clear() 后，position=&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行 clear() 后，缓冲区内容并没有被清除：&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;第三个元素为：&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ⑥</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行绝对读取后，position=&quot;</span> <span class="token operator">+</span> buff<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面程序的 ① 号代码处，通过 <code>CharBuffer</code> 的一个静态方法 <code>allocate()</code> 创建了一个 capacity 为 8 的 <code>CharBuffer</code>，此时该 Buffer 的 limit 和 capacity 为 8，position 为 0。</p><p><img src="https://res.weread.qq.com/wrepub/epub_681336_2052" alt="epub_681336_2052"></p><p>接下来程序执行到 ② 号代码处，程序向 <code>CharBuffer</code> 中放入 3 个数值，放入 3 个数值后的 <code>CharBuffer</code>。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181603114.jpeg" alt="epub_681336_2053"></p><p>程序执行到 ③ 号代码处，调用了 Buffer 的 <code>flip()</code> 方法，该方法将把 limit 设为 position 处，把 position 设为 0。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181604193.jpeg" alt="epub_681336_2054"></p><p>当 Buffer 调用了 <code>flip()</code> 方法之后，limit 就移到了原来 position 所在位置，这样相当于把 Buffer 中没有数据的存储空间“封印”起来，从而避免读取 Buffer 数据时读到 null 值。</p><p>接下来程序在 ④ 号代码处取出一个元素，取出一个元素后 position 向后移动一位，也就是该 Buffer 的 position 等于 1。程序执行到 ⑤ 号代码处，Buffer 调用 <code>clear()</code> 方法将 position 设为 0，将 limit 设为与 capacity 相等。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181605865.jpeg" alt="epub_681336_2055"></p><p>对 Buffer 执行 <code>clear()</code> 方法后，该 Buffer 对象里的数据依然存在，所以程序在 ⑥ 号代码处依然可以取出位置为 2 的值，也就是字符 c。因为 ⑥ 号代码采用的是根据索引来取值的方式，所以该方法不会影响 Buffer 的 position。</p><h3 id="使用-channel" tabindex="-1"><a class="header-anchor" href="#使用-channel" aria-hidden="true">#</a> 使用 Channel</h3><p>Channel 与传统的流对象有两个主要区别。</p><ol><li>Channel 可以直接将指定文件的部分或全部直接映射成 Buffer。</li><li>程序不能直接访问 Channel 中的数据，包括读取、写入都不行，Channel 只能与 Buffer 进行交互。</li></ol><p>也就是说，如果要从 Channel 中取得数据，必须先用 Buffer 从 Channel 中取出一些数据，然后让程序从 Buffer 中取出这些数据；如果要将程序中的数据写入 Channel，一样先让程序将数据放入 Buffer 中，程序再将 Buffer 里的数据写入 Channel 中。</p><p>Channel 接口提供了 <code>DatagramChannel</code>、<code>FileChannel</code>、<code>Pipe.SinkChannel</code>、<code>Pipe.SourceChannel</code>、<code>SelectableChannel</code> 、<code>ServerSocketChannel</code>、<code>SocketChannel</code>等实现类。</p><p>NIO 里的 Channel 是按功能来划分的，例如 <code>Pipe.SinkChannel</code>、<code>Pipe.SourceChannel</code>是用于支持线程之间通信的管道 Channel；<code>ServerSocketChannel</code>、<code>SocketChannel</code>是用于支持 TCP 网络通信的 Channel；而 <code>DatagramChannel</code>则是用于支持 UDP 网络通信的 Channel。</p><p>所有的 Channel 都不应该通过构造器来直接创建，而是通过传统的节点 <code>InputStream</code>、<code>OutputStream</code> 的 <code>getChannel()</code> 方法来返回对应的 Channel，不同的节点流获得的 Channel 不一样。例如，<code>FileInputStream</code>、<code>FileOutputStream</code> 的 <code>getChannel()</code> 返回的是 <code>FileChannel</code>，而 <code>PipedInputStream</code> 和 <code>PipedOutputStream</code> 的 <code>getChannel()</code> 返回的是 <code>Pipe.SinkChannel</code> 、<code>Pipe.SourceChannel</code>。</p><p>Channel 中最常用的 3 类方法是 <code>map()</code>、<code>read()</code> 和 <code>write()</code>，其中 <code>map()</code> 方法用于将 Channel 对应的部分或全部数据映射成 <code>ByteBuffer</code>；而 <code>read()</code> 或 <code>write()</code> 方法都有一系列重载形式，这些方法用于从 Buffer 中读取数据或向 Buffer 中写入数据。</p><p><code>map()</code> 方法的方法签名为：<code>MappedByteBuffer map(FileChannel.MapMode mode, long position, long size)</code> ，第一个参数执行映射时的模式，分别有只读、读写等模式；第二个、第三个参数用于控制将 Channel 的哪些数据映射成 <code>ByteBuffer</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileChannelTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/FileChannelTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>
            <span class="token comment">// 创建 FileInputStream，以该文件输入流创建 FileChannel</span>
            <span class="token class-name">FileChannel</span> inChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 以文件输出流创建 FileChannel，用以控制输出</span>
            <span class="token class-name">FileChannel</span> outChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将 FileChannel 里的全部数据映射成 ByteBuffer</span>
            <span class="token class-name">MappedByteBuffer</span> buffer <span class="token operator">=</span> inChannel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel<span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span><span class="token constant">READ_ONLY</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ①</span>
            <span class="token comment">// 使用 UTF-8 的字符集来创建解码器</span>
            <span class="token class-name">Charset</span> charset <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">;</span>
            <span class="token comment">// 直接将 buffer 里的数据全部输出</span>
            outChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ②</span>
            <span class="token comment">// 再次调用 buffer 的 clear() 方法，复原 limit、position 的位置</span>
            buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 创建解码器（CharsetDecoder）对象</span>
            <span class="token class-name">CharsetDecoder</span> decoder <span class="token operator">=</span> charset<span class="token punctuation">.</span><span class="token function">newDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 使用解码器将 ByteBuffer 转换成 CharBuffer</span>
            <span class="token class-name">CharBuffer</span> charBuffer <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// CharBuffer 的 toString 方法可以获取对应的字符串</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>charBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别使用 <code>FileInputStream</code>、<code>FileOutputStream</code> 来获取 <code>FileChannel</code>，虽然 <code>FileChannel</code> 既可以读取也可以写入，但 <code>FileInputStream</code> 获取的 <code>FileChannel</code> 只能读，而 <code>FileOutputStream</code> 获取的 <code>FileChannel</code> 只能写。</p><p>程序中 ① 号代码处直接将指定 Channel 中的全部数据映射成 <code>ByteBuffer</code>，然后程序中 ② 号代码处直接将整个 <code>ByteBuffer</code> 的全部数据写入一个输出 <code>FileChannel</code> 中，这就完成了文件的复制。</p><blockquote><p>为了能将 FileChannelTest.java 文件里的内容打印出来，使用了 Charset 类和 <code>CharsetDecoder</code> 类将 <code>ByteBuffer</code> 转换成 <code>CharBuffer</code>。</p></blockquote><p>不仅 <code>InputStream</code>、<code>OutputStream</code> 包含了 <code>getChannel()</code> 方法，在 <code>RandomAccessFile</code> 中也包含了一个 <code>getChannel()</code> 方法，由 <code>RandomAccessFile</code> 返回的 <code>FileChannel()</code> 是只读的还是读写的 Channel，则取决于 <code>RandomAccessFile</code> 打开文件的模式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomFileChannelTest</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span>
        <span class="token comment">// 创建一个 RandomAccessFile 对象</span>
        <span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 RandomAccessFile 对应的 Channel</span>
        <span class="token class-name">FileChannel</span> randomChannel <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将 Channel 中的所有数据映射成 ByteBuffer</span>
      <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> randomChannel<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel
          <span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span><span class="token constant">READ_ONLY</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 把 Channel 的记录指针移动到最后</span>
      randomChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将 buffer 中的所有数据输出</span>
      randomChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>randomChannel.position(f.length());</code>可以将 Channel 的记录指针移动到该 Channel 的最后，从而可以让程序将指定 <code>ByteBuffer</code> 的数据追加到该 Channel 的后面。每次运行上面程序，都会把 a.txt 文件的内容复制一份，并将全部内容追加到该文件的后面。</p><h3 id="字符集和-charset" tabindex="-1"><a class="header-anchor" href="#字符集和-charset" aria-hidden="true">#</a> 字符集和 Charset</h3><p>计算机里的文件、数据、图片文件只是一种表面现象，所有文件在底层都是二进制文件，即全部都是字节码。图片、音乐文件暂时先不说，对于文本文件而言，之所以可以看到一个个的字符，这完全是因为系统将底层的二进制序列转换成字符的缘故。在这个过程中涉及两个概念：编码（Encode）和解码（Decode），通常而言，把明文的字符序列转换成计算机理解的二进制序列（普通人看不懂）称为编码，把二进制序列转换成普通人能看懂的明文字符串称为解码。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181705441.jpeg" alt="epub_681336_2060"></p><p>当需要保存文本文件时，程序必须先把文件中的每个字符翻译成二进制序列；当需要读取文本文件时，程序必须把二进制序列转换为一个个的字符。</p><p>Java 默认使用 Unicode 字符集，但很多操作系统并不使用 Unicode 字符集，那么当从系统中读取数据到 Java 程序中时，就可能出现乱码等问题 JDK 1.4 提供了 Charset 来处理字节序列和字符序列（字符串）之间的转换关系，该类包含了用于创建解码器和编码器的方法，还提供了获取 Charset 所支持字符集的方法，Charset 类是不可变的。Charset 类提供了一个 <code>availableCharsets()</code> 静态方法来获取当前 JDK 所支持的所有字符集。所以程序可以使用如下程序来获取该 JDK 所支持的全部字符集。</p><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>为了解决二进制序列与字符之间的对应关系，这就需要字符集了。关于字符集的介绍，太多书籍介绍得“云里雾里”了。其实很简单，所谓字符集，就是为每个字符编个号码而已。不存在任何的技术难度！任何人都可制定自己独有的字符集，只要为每个字符编个号码即可。</p><p>比如将“刚”字编号为 65，这样“刚”字就转换成 01000001；反过来，01000001 也可被恢复成“刚”字。当然，如果每个人都制定自己独有的字符集，那程序就没法交流了——A 程序使用 A 字符集（A 字符集中“刚”字编号为 65），A 程序保存“刚”字时保存的是 01000001；B 程序使用 B 字符集（B 字符集中编号为 65 的可能是其他字符，或者根本没有字符编号 65），那么 B 程序读取 01000001 后，再按 B 字符集恢复出来自然就得到不到“刚”字了。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharsetTest</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取 Java 支持的全部字符集</span>
    <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">availableCharsets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> alias <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 输出字符集的别名和对应的 Charset 对象</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>alias <span class="token operator">+</span> <span class="token string">&quot;-----&gt;&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个字符集都有一个字符串名称，也被称为字符串别名。对于中国的程序员而言，下面几个字符串别名是常用的。</p><ol><li>GBK：简体中文字符集。</li><li>BIG5：繁体中文字符集。</li><li>ISO-8859-1：ISO 拉丁字母表 No.1，也叫做 ISO-LATIN-1。</li><li>UTF-8：8 位 UCS 转换格式。</li><li>UTF-16BE：16 位 UCS 转换格式，Big-endian（最低地址存放高位字节）字节顺序。</li><li>UTF-16LE：16 位 UCS 转换格式，Little-endian（最高地址存放低位字节）字节顺序。</li><li>UTF-16：16 位 UCS 转换格式，字节顺序由可选的字节顺序标记来标识。</li></ol><div class="custom-container info"><p class="custom-container-title">相关信息</p><p>可以使用 System 类的 <code>getProperties()</code> 方法来访问本地系统的文件编码格式，文件编码格式的属性名为 file.encoding。</p></div><p>知道了字符集的别名之后，程序就可以调用 Charset 的 <code>forName()</code> 方法来创建对应的 Charset 对象，<code>forName()</code> 方法的参数就是相应字符集的别名。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Charset</span> cs <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;ISO-8859-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Charset</span> csCn <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;GBK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>获得了 <code>Charset</code> 对象之后，就可以通过该对象的 <code>newDecoder()</code>、<code>newEncoder()</code> 这两个方法分别返回 <code>CharsetDecoder</code> 和 <code>CharsetEncoder</code> 对象，代表该 <code>Charset</code> 的解码器和编码器。调用 <code>CharsetDecoder</code> 的 <code>decode()</code> 方法就可以将 <code>ByteBuffer</code> （字节序列）转换成 <code>CharBuffer</code>（字符序列），调用 <code>CharsetEncoder</code> 的 <code>encode()</code> 方法就可以将 <code>CharBuffer</code> 或 <code>String</code> （字符序列）转换成 <code>ByteBuffer</code>（字节序列）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharsetTransform</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建简体中文对应的 Charset</span>
    <span class="token class-name">Charset</span> cn <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;GBK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 cn 对象对应的编码器和解码器</span>
    <span class="token class-name">CharsetEncoder</span> cnEncoder <span class="token operator">=</span> cn<span class="token punctuation">.</span><span class="token function">newEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">CharsetDecoder</span> cnDecoder <span class="token operator">=</span> cn<span class="token punctuation">.</span><span class="token function">newDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个 CharBuffer 对象</span>
    <span class="token class-name">CharBuffer</span> cbuff <span class="token operator">=</span> <span class="token class-name">CharBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cbuff<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;孙&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cbuff<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;悟&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cbuff<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;空&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cbuff<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将 CharBuffer 中的字符序列转换成字节序列</span>
    <span class="token class-name">ByteBuffer</span> bbuff <span class="token operator">=</span> cnEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>cbuff<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环访问 ByteBuffer 中的每个字节</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bbuff<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bbuff<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将 ByteBuffer 的数据解码成字符序列</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span> cnDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bbuff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Charset 类也提供了如下 3 个方法。</p><ol><li><code>CharBuffer decode(ByteBuffer bb)</code>：将 <code>ByteBuffer</code> 中的字节序列转换成字符序列的便捷方法。</li><li><code>ByteBuffer encode(CharBuffer cb)</code>：将 <code>CharBuffer</code> 中的字符序列转换成字节序列的便捷方法。</li><li><code>ByteBuffer encode(String str)</code>：将 <code>String</code> 中的字符序列转换成字节序列的便捷方法。</li></ol><h2 id="nio-2" tabindex="-1"><a class="header-anchor" href="#nio-2" aria-hidden="true">#</a> NIO.2</h2><p>Java 7 对原有的 NIO 进行了重大改进，改进主要包括如下两方面的内容。</p><ul><li>提供了全面的文件 IO 和文件系统访问支持。</li><li>基于异步 Channel 的 IO。</li></ul><p>第一个改进表现为 Java7 新增的 java.nio.file 包及各个子包；第二个改进表现为 Java7 在 java.nio.channels 包下增加了多个以 Asynchronous 开头的 Channel 接口和类。</p><h3 id="path、paths-和-files-核心-api" tabindex="-1"><a class="header-anchor" href="#path、paths-和-files-核心-api" aria-hidden="true">#</a> Path、Paths 和 Files 核心 API</h3><p>早期的 Java 只提供了一个 File 类来访问文件系统，但 File 类的功能比较有限，它不能利用特定文件系统的特性，File 所提供的方法的性能也不高。而且，其大多数方法在出错时仅返回失败，并不会提供异常信息。</p><p>NIO.2 为了弥补这种不足，引入了一个 Path 接口，Path 接口代表一个平台无关的平台路径。除此之外，NIO.2 还提供了 Files、Paths 两个工具类，其中 Files 包含了大量静态的工具方法来操作文件；Paths 则包含了两个返回 Path 的静态工厂方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathTest</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 以当前路径来创建 Path 对象</span>
    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;path 里包含的路径数量：&quot;</span>
        <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">getNameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;path 的根路径：&quot;</span> <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 path 对应的绝对路径</span>
    <span class="token class-name">Path</span> absolutePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>absolutePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取绝对路径的根路径</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;absolutePath 的跟路径：&quot;</span>
        <span class="token operator">+</span> absolutePath<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取绝对路径所包含的路径数量</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;absolutePath 里包含的路径数量：&quot;</span>
        <span class="token operator">+</span> absolutePath<span class="token punctuation">.</span><span class="token function">getNameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>absolutePath<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 以多个 String 来构建 Path 对象</span>
    <span class="token class-name">Path</span> path2 <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;e:&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;publish&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;codes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Paths 提供了 <code>get(String first, String... more)</code> 方法来获取 Path 对象，Paths 会将给定的多个字符串连缀成路径，比如 <code>Paths.get(&quot;e:&quot; ,&quot;publish&quot; , &quot;codes&quot;)</code> 就返回 <code>g:\\publish\\codes</code> 路径。</p><p><code>getNameCount()</code> 方法会返回 Path 路径所包含的路径名的数量，例如 <code>e:\\publish\\codes</code> 调用该方法就会返回 3。</p><p>Files 是一个操作文件的工具类，它提供了大量便捷的工具方法，下面程序简单示范了 Files 类的用法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilesTest</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 复制文件</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/FilesTest.java&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断 FilesTest.java 文件是否为隐藏文件</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FilesTest.java 是否为隐藏文件：&quot;</span>
        <span class="token operator">+</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/FilesTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 一次性读取 FilesTest.java 文件的所有行</span>
    <span class="token class-name">List</span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/FilesTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断指定文件的大小</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;FilesTest.java 的大小为：&quot;</span>
        <span class="token operator">+</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/FilesTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span> poem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    poem<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;水晶潭底银鱼跃&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    poem<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;清徐风中碧竿横&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 直接将多个字符串内容写入指定文件中</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;pome.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> poem
        <span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;gbk&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileStore</span> cStore <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">getFileStore</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;C:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断 C 盘的总空间、可用空间</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;C: 共有空间：&quot;</span> <span class="token operator">+</span> cStore<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;C: 可用空间：&quot;</span> <span class="token operator">+</span> cStore<span class="token punctuation">.</span><span class="token function">getUsableSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-filevisitor-遍历文件和目录" tabindex="-1"><a class="header-anchor" href="#使用-filevisitor-遍历文件和目录" aria-hidden="true">#</a> 使用 FileVisitor 遍历文件和目录</h3><p>Files 类提供了如下两个方法来遍历文件和子目录。</p><ol><li><code>walkFileTree(Path start, FileVisitor&lt;? super Path&gt; visitor)</code>：遍历 start 路径下的所有文件和子目录。</li><li><code>walkFileTree(Path start, Set&lt;FileVisitOption&gt; options, int maxDepth,FileVisitor&lt;? super Path&gt;visitor)</code> ：与上一个方法的功能类似。该方法最多遍历 <code>maxDepth</code> 深度的文件。</li></ol><p>两个方法都需要 <code>FileVisitor</code> 参数，<code>FileVisitor</code> 代表一个文件访问器，<code>walkFileTree()</code> 方法会自动遍历 start 路径下的所有文件和子目录，遍历文件和子目录都会“触发” <code>FileVisitor</code> 中相应的方法。<code>FileVisitor</code> 中定义了如下 4 个方法。</p><ol><li><code>FileVisitResult postVisitDirectory(T dir, IOException exc)</code>：访问子目录之后触发该方法。</li><li><code>FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs)</code>：访问子目录之前触发该方法。</li><li><code>FileVisitResult visitFile(T file, BasicFileAttributes attrs)</code>：访问 file 文件时触发该方法。</li><li><code>FileVisitResult visitFileFailed(T file, IOException exc)</code>：访问 file 文件失败时触发该方法。</li></ol><p>上面 4 个方法都返回一个 <code>FileVisitResult</code> 对象，它是一个枚举类，代表了访问之后的后续行为。<code>FileVisitResult</code> 定义了如下几种后续行为。</p><ol><li><code>CONTINUE</code>：代表“继续访问”的后续行为。</li><li><code>SKIP_SIBLINGS</code>：代表“继续访问”的后续行为，但不访问该文件或目录的兄弟文件或目录。</li><li><code>SKIP_SUBTREE</code>：代表“继续访问”的后续行为，但不访问该文件或目录的子目录树。</li><li><code>TERMINATE</code>：代表“中止访问”的后续行为。</li></ol><p>实际编程时没必要为 <code>FileVisitor</code> 的 4 个方法都提供实现，可以通过继承 <code>SimpleFileVisitor</code>（<code>FileVisitor</code> 的实现类）来实现自己的“文件访问器”，这样就根据需要、选择性地重写指定方法了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileVisitorTest</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历 g:\\publish\\codes\\15 目录下的所有文件和子目录</span>
    <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walkFileTree</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;E:&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Project&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;demo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;IO 流&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 访问文件时触发该方法</span>
          <span class="token annotation punctuation">@Override</span>
          <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file
              <span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正在访问&quot;</span> <span class="token operator">+</span> file <span class="token operator">+</span> <span class="token string">&quot;文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 找到了 FileVisitorTest.java 文件</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;FileVisitorTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--已经找到目标文件--&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">TERMINATE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">CONTINUE</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token comment">// 开始访问目录时触发该方法</span>
          <span class="token annotation punctuation">@Override</span>
          <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">preVisitDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir
              <span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正在访问：&quot;</span> <span class="token operator">+</span> dir <span class="token operator">+</span> <span class="token string">&quot; 路径&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span><span class="token constant">CONTINUE</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-watchservice-监控文件变化" tabindex="-1"><a class="header-anchor" href="#使用-watchservice-监控文件变化" aria-hidden="true">#</a> 使用 WatchService 监控文件变化</h3><p>NIO.2 的 Path 类提供了如下一个方法来监听文件系统的变化。</p><ul><li><code>register(WatchService watcher, WatchEvent.Kind&lt;?&gt;... events)</code>：用 watcher 监听该 path 代表的目录下的文件变化。events 参数指定要监听哪些类型的事件。</li></ul><p>在这个方法中 <code>WatchService</code> 代表一个文件系统监听服务，它负责监听 path 代表的目录下的文件变化。一旦使用 <code>register()</code> 方法完成注册之后，接下来就可调用 <code>WatchService</code> 的如下 3 个方法来获取被监听目录的文件变化事件。</p><ol><li><code>WatchKey poll()</code>：获取下一个 <code>WatchKey</code>，如果没有 <code>WatchKey</code> 发生就立即返回 null。</li><li><code>WatchKey poll(long timeout, TimeUnit unit)</code>：尝试等待 timeout 时间去获取下一个 <code>WatchKey</code>。</li><li><code>WatchKey take()</code>：获取下一个 <code>WatchKey</code>，如果没有 <code>WatchKey</code> 发生就一直等待。</li></ol><p>如果程序需要一直监控，则应该选择使用 <code>take()</code> 方法；如果程序只需要监控指定时间，则可考虑使用 <code>poll()</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WatchServiceTest</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取文件系统的WatchService对象</span>
    <span class="token class-name">WatchService</span> watchService <span class="token operator">=</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">newWatchService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 为C:盘根路径注册监听</span>
    <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;C:/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>watchService
        <span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_CREATE</span>
        <span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_MODIFY</span>
        <span class="token punctuation">,</span> <span class="token class-name">StandardWatchEventKinds</span><span class="token punctuation">.</span><span class="token constant">ENTRY_DELETE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取下一个文件变化事件</span>
      <span class="token class-name">WatchKey</span> key <span class="token operator">=</span> watchService<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//①</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WatchEvent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> event <span class="token operator">:</span> key<span class="token punctuation">.</span><span class="token function">pollEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 文件发生了 &quot;</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;事件！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 重设WatchKey</span>
      <span class="token keyword">boolean</span> valid <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果重设失败，退出监听</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行该程序，然后在 C: 盘下新建一个文件或文件夹，再删除该文件或文件夹，将看到相应输出。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181930406.png" alt="image-20220818193055857"></p><h3 id="访问文件属性" tabindex="-1"><a class="header-anchor" href="#访问文件属性" aria-hidden="true">#</a> 访问文件属性</h3><p>NIO.2 在 <code>java.nio.file.attribute</code> 包下提供了大量的工具类，通过这些工具类，开发者可以非常简单地读取、修改文件属性。这些工具类主要分为如下两类。</p><ol><li><code>XxxAttributeView</code>：代表某种文件属性的“视图”。</li><li><code>XxxAttributes</code>：代表某种文件属性的“集合”，程序一般通过 <code>XxxAttributeView</code> 对象来获取<code>XxxAttributes</code> 。</li></ol><p>在这些工具类中，<code>FileAttributeView</code> 是其他 <code>XxxAttributeView</code> 的父接口。</p><ol><li><code>AclFileAttributeView</code>：通过 <code>AclFileAttributeView</code>，开发者可以为特定文件设置 ACL（Access ControlList）及文件所有者属性。它的 <code>getAcl()</code> 方法返回 <code>List&lt;AclEntry&gt;</code> 对象，该返回值代表了该文件的权限集。通过 <code>setAcl(List)</code>方法可以修改该文件的 ACL。</li><li><code>BasicFileAttributeView</code>：它可以获取或修改文件的基本属性，包括文件的最后修改时间、最后访问时间、创建时间、大小、是否为目录、是否为符号链接等。它的 <code>readAttributes()</code>方法返回一个 <code>BasicFileAttributes</code> 对象，对文件夹基本属性的修改是通过 <code>BasicFileAttributes</code> 对象完成的。</li><li><code>DosFileAttributeView</code>：它主要用于获取或修改文件 DOS 相关属性，比如文件是否只读、是否隐藏、是否为系统文件、是否是存档文件等。它的 <code>readAttributes()</code> 方法返回一个 <code>DosFileAttributes</code> 对象，对这些属性的修改其实是由 <code>DosFileAttributes</code> 对象来完成的。</li><li><code>FileOwnerAttributeView</code>：它主要用于获取或修改文件的所有者。它的 <code>getOwner()</code> 方法返回一个 <code>UserPrincipal</code> 对象来代表文件所有者；也可调用 <code>setOwner(UserPrincipal owner)</code> 方法来改变文件的所有者。</li><li><code>PosixFileAttributeView</code>：它主要用于获取或修改 <code>POSIX（Portable Operating System Interface of INIX）</code> 属性，它的 <code>readAttributes()</code> 方法返回一个 <code>PosixFileAttributes</code> 对象，该对象可用于获取或修改文件的所有者、组所有者、访问权限信息（就是 UNIX 的 chmod 命令负责干的事情）。这个 View 只在 UNIX、Linux 等系统上有用。</li><li><code>UserDefinedFileAttributeView</code>：它可以让开发者为文件设置一些自定义属性。</li></ol><p>以管理员身份运行 idea 再运行以下程序。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttributeViewTest</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取将要操作的文件</span>
    <span class="token class-name">Path</span> testPath <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;test/src/IO 流/AttributeViewTest.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取访问基本属性的 BasicFileAttributeView</span>
    <span class="token class-name">BasicFileAttributeView</span> basicView <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">getFileAttributeView</span><span class="token punctuation">(</span>
        testPath<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributeView</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取访问基本属性的 BasicFileAttributes</span>
    <span class="token class-name">BasicFileAttributes</span> basicAttribs <span class="token operator">=</span> basicView<span class="token punctuation">.</span><span class="token function">readAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 访问文件的基本属性</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建时间：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>basicAttribs
        <span class="token punctuation">.</span><span class="token function">creationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最后访问时间：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>basicAttribs
        <span class="token punctuation">.</span><span class="token function">lastAccessTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;最后修改时间：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>basicAttribs
        <span class="token punctuation">.</span><span class="token function">lastModifiedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件大小：&quot;</span> <span class="token operator">+</span> basicAttribs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取访问文件属主信息的 FileOwnerAttributeView</span>
    <span class="token class-name">FileOwnerAttributeView</span> ownerView <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">getFileAttributeView</span><span class="token punctuation">(</span>
        testPath<span class="token punctuation">,</span> <span class="token class-name">FileOwnerAttributeView</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取该文件所属的用户</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ownerView<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取系统中 guest 对应的用户</span>
    <span class="token class-name">UserPrincipal</span> user <span class="token operator">=</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getUserPrincipalLookupService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">lookupPrincipalByName</span><span class="token punctuation">(</span><span class="token string">&quot;guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 修改用户</span>
    ownerView<span class="token punctuation">.</span><span class="token function">setOwner</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取访问自定义属性的 FileOwnerAttributeView</span>
    <span class="token class-name">UserDefinedFileAttributeView</span> userView <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">getFileAttributeView</span><span class="token punctuation">(</span>
        testPath<span class="token punctuation">,</span> <span class="token class-name">UserDefinedFileAttributeView</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> attrNames <span class="token operator">=</span> userView<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历所有的自定义属性</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> attrNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>userView<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      userView<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
      buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;---&gt;&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 添加一个自定义属性</span>
    userView<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;发行者&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;疯狂 Java 联盟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取访问 DOS 属性的 DosFileAttributeView</span>
    <span class="token class-name">DosFileAttributeView</span> dosView <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">getFileAttributeView</span><span class="token punctuation">(</span>testPath
        <span class="token punctuation">,</span> <span class="token class-name">DosFileAttributeView</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将文件设置隐藏、只读</span>
    dosView<span class="token punctuation">.</span><span class="token function">setHidden</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dosView<span class="token punctuation">.</span><span class="token function">setReadOnly</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181955276.png" alt="image-20220818195525742"></p><p>第一次运行后 <code>AttributeViewTest.java</code> 文件变成隐藏、只读文件，因此第二次运行之前一定要先取消只读属性。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181959948.png" alt="image-20220818195916153"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208181957696.png" alt="image-20220818195740640"></p>`,376),c=[e];function o(l,i){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","17. IO流.html.vue"]]);export{r as default};
