import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as d,e as l}from"./app.b8ec8d86.js";const n={},c=l(`<h1 id="_2-创建与管理数据表" tabindex="-1"><a class="header-anchor" href="#_2-创建与管理数据表" aria-hidden="true">#</a> 2. 创建与管理数据表</h1><p>在数据库中，数据表是数据库中最重要、最基本的操作对象，是数据存储的基本单位。</p><p>每一行代表唯一的记录，每一列称为一个字段，每一列都有一个与其它列不重复的名称，称为字段名。数据表中的一列由一组字段值组成，若某个字段的值出现重复，该字段称为普通字段，若某个字段的值不允许重复，该字段称为索引字段。</p><h2 id="mysql-常用数据类型" tabindex="-1"><a class="header-anchor" href="#mysql-常用数据类型" aria-hidden="true">#</a> MYSQL 常用数据类型</h2><p>MySQL 中常用的数据类型有数值类型、字符串类型、日期和时间类型、二进制数据类型、逻辑类型。</p><h3 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h3><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">存储要求</th><th style="text-align:center;">取值范围（有符号）</th><th style="text-align:center;">取值范围（无符号）</th><th style="text-align:center;">用途</th></tr></thead><tbody><tr><td style="text-align:center;">TINYINT[(M)]</td><td style="text-align:center;">1byte</td><td style="text-align:center;">-128~127</td><td style="text-align:center;">0~255</td><td style="text-align:center;">小整数值</td></tr><tr><td style="text-align:center;">SMALLINT[(M)]</td><td style="text-align:center;">2byte</td><td style="text-align:center;">-32768~32767</td><td style="text-align:center;">0~65535</td><td style="text-align:center;">大整数值</td></tr><tr><td style="text-align:center;">MEDIUMINT[(M)]</td><td style="text-align:center;">3byte</td><td style="text-align:center;">-8388608~8388607</td><td style="text-align:center;">0~16777215</td><td style="text-align:center;">大整数值</td></tr><tr><td style="text-align:center;">INT 或 INTEGER[(M)]</td><td style="text-align:center;">4byte</td><td style="text-align:center;">-2147683648~2147683647</td><td style="text-align:center;">0~4294967295</td><td style="text-align:center;">大整数值</td></tr><tr><td style="text-align:center;">BIGINT[(M)]</td><td style="text-align:center;">8byte</td><td style="text-align:center;">-9223372036854775808~9223373036854775807</td><td style="text-align:center;">0~18446744073709551615</td><td style="text-align:center;">极大整数值</td></tr><tr><td style="text-align:center;">FLOAT[(M,D)]</td><td style="text-align:center;">4byte</td><td style="text-align:center;">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td style="text-align:center;">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td style="text-align:center;">单精度 浮点数值</td></tr><tr><td style="text-align:center;">DOUBLE[(M,D)]</td><td style="text-align:center;">8byte</td><td style="text-align:center;">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:center;">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td style="text-align:center;">双精度浮点数值</td></tr><tr><td style="text-align:center;">DECIMAL(M,D)</td><td style="text-align:center;">mbyte</td><td style="text-align:center;">依赖于 M 和 D 的值</td><td style="text-align:center;">依赖于 M 和 D 的值</td><td style="text-align:center;">小数值</td></tr></tbody></table><p>MySQL 的 5 种整型：<code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT</code>、<code>BIGINT</code>。这些整数型可定义为 <code>UNSIGNED</code>（无符号），从而禁用负值。</p><p>MySQL 中的 3 种浮点类型不能定义为 <code>UNSIGNED</code>。</p><p>M：一个 1~255 的整数，表示用来显示列中的字符数。</p><p>D：一个 0~30 的整数，表示小数位数。</p><h3 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h3><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">大小</th><th style="text-align:center;">用途</th></tr></thead><tbody><tr><td style="text-align:center;">CHAR</td><td style="text-align:center;">0-255 bytes</td><td style="text-align:center;">定长字符串</td></tr><tr><td style="text-align:center;">VARCHAR</td><td style="text-align:center;">0-65535 bytes</td><td style="text-align:center;">变长字符串</td></tr><tr><td style="text-align:center;">TINYBLOB</td><td style="text-align:center;">0-255 bytes</td><td style="text-align:center;">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:center;">TINYTEXT</td><td style="text-align:center;">0-255 bytes</td><td style="text-align:center;">短文本字符串</td></tr><tr><td style="text-align:center;">BLOB</td><td style="text-align:center;">0-65535 bytes</td><td style="text-align:center;">二进制形式的长文本数据</td></tr><tr><td style="text-align:center;">TEXT</td><td style="text-align:center;">0-65535 bytes</td><td style="text-align:center;">长文本数据</td></tr><tr><td style="text-align:center;">MEDIUMBLOB</td><td style="text-align:center;">0-16777215 bytes</td><td style="text-align:center;">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:center;">MEDIUMTEXT</td><td style="text-align:center;">0-16 777 215 bytes</td><td style="text-align:center;">中等长度文本数据</td></tr><tr><td style="text-align:center;">LONGBLOB</td><td style="text-align:center;">0-4294967295 bytes</td><td style="text-align:center;">二进制形式的极大文本数据</td></tr><tr><td style="text-align:center;">LONGTEXT</td><td style="text-align:center;">0-4294967295 bytes</td><td style="text-align:center;">极大文本数据</td></tr></tbody></table><p>定长字符串存储长度固定，需要在创建的时候指定。</p><h3 id="日期和时间类型" tabindex="-1"><a class="header-anchor" href="#日期和时间类型" aria-hidden="true">#</a> 日期和时间类型</h3><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">大小</th><th style="text-align:center;">范围</th><th style="text-align:center;">格式</th><th style="text-align:center;">用途</th></tr></thead><tbody><tr><td style="text-align:center;">DATE</td><td style="text-align:center;">3</td><td style="text-align:center;">1000-01-01/9999-12-31</td><td style="text-align:center;">YYYY-MM-DD</td><td style="text-align:center;">日期值</td></tr><tr><td style="text-align:center;">TIME</td><td style="text-align:center;">3</td><td style="text-align:center;">&#39;-838:59:59&#39;/&#39;838:59:59&#39;</td><td style="text-align:center;">HH:MM:SS</td><td style="text-align:center;">时间值或持续时间</td></tr><tr><td style="text-align:center;">YEAR</td><td style="text-align:center;">1</td><td style="text-align:center;">1901/2155</td><td style="text-align:center;">YYYY</td><td style="text-align:center;">年份值</td></tr><tr><td style="text-align:center;">DATETIME</td><td style="text-align:center;">8</td><td style="text-align:center;">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td style="text-align:center;">YYYY-MM-DD HH:MM:SS</td><td style="text-align:center;">混合日期和时间值</td></tr><tr><td style="text-align:center;">TIMESTAMP</td><td style="text-align:center;">4</td><td style="text-align:center;">1970-01-01 00:00:00/2038 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038 年 1 月 19 日 凌晨 03:14:07</td><td style="text-align:center;">YYYYMMDD HHMMSS</td><td style="text-align:center;">混合日期和时间值，时间戳</td></tr></tbody></table><p>插入当前系统时间，可以插入 <code>CURRENT_TIME</code>、<code>CURRENT_DATE</code>、<code>NOW()</code>。</p><h2 id="创建数据表" tabindex="-1"><a class="header-anchor" href="#创建数据表" aria-hidden="true">#</a> 创建数据表</h2><p>创建数据表之前应该先使用：</p><blockquote><p>USE 数据库名</p></blockquote><p>指定操作的数据库。</p><p>在 MySQL 中，可以使用：<code>CREATE TABLE</code>语句创建表。其语法格式为：</p><blockquote><p>CREATE TABLE &lt;表名&gt; ([表定义选项]) [表选项] [分区选项];</p></blockquote><p>其中，<code>[表定义选项]</code>的格式为：</p><blockquote><p>&lt;列名 1&gt; &lt;类型 1&gt; [,…] &lt;列名 n&gt; &lt;类型 n&gt;</p></blockquote><p><code>CREATE TABLE</code> 命令语法比较多，其主要是由表创建定义（create-definition）、表选项（table-options）和分区选项（partition-options）所组成的。</p><p><code>CREATE TABLE</code> 语句的主要语法及使用说明如下：</p><ul><li><p><code>CREATE TABLE</code>：用于创建给定名称的表，必须拥有表 <code>CREATE</code> 的权限。</p></li><li><p><code>&lt;表名&gt;</code>：指定要创建表的名称，在 <code>CREATE TABLE</code> 之后给出，必须符合标识符命名规则。</p><p>表名称被指定为 <code>db_name.tbl_name</code>，以便在特定的数据库中创建表。</p><p>无论是否有当前数据库，都可以通过这种方式创建。在当前数据库中创建表时，可以省略 <code>db-name</code>。</p><p>如果使用加引号的识别名，则应对数据库和表名称分别加引号。</p><p>例如，<code>&#39;mydb&#39;.&#39;mytbl&#39;</code> 是合法的，但 <code>&#39;mydb.mytbl&#39;</code> 不合法。</p></li><li><p><code>&lt;表定义选项&gt;</code>：表创建定义，由列名（col_name）、列的定义（column_definition）以及可能的空值说明、完整性约束或表索引组成。</p></li><li><p>默认的情况是，表被创建到当前的数据库中。若表已存在、没有当前数据库或者数据库不存在，则会出现错误。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>使用 <code>CREATE TABLE</code> 创建表时，必须指定以下信息：</p><ul><li>要创建的表的名称不区分大小写，不能使用 SQL 语言中的关键字，如 <code>DROP</code>、<code>ALTER</code>、<code>INSERT</code> 等。</li><li>数据表中每个列（字段）的名称和数据类型，如果创建多个列，要用逗号隔开。</li></ul></div><ul><li><p>查看数据表结构</p><p>数据表建好之后可以查看表结构的定义，查看表结构可以使用：<code>DESCRIBE</code>和<code>SHOW CREATE TABLE</code>语句。</p><p><code>DESCRIBE/DESC</code> 语句可以查看表的字段信息，包括字段名、字段数据类型、是否为主键、是否有默认值等，语法规则如下：</p><blockquote><p>DESCRIBE &lt;表名&gt;;</p></blockquote><p>或简写成：</p><blockquote><p>DESC &lt;表名&gt;;</p></blockquote></li></ul><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261639965.png" alt="202208222018134"></p><p>其中，各个字段的含义如下：</p><ul><li><p><code>Null</code>：表示该列是否可以存储 <code>NULL</code> 值。</p></li><li><p><code>Key</code>：表示该列是否已编制索引。<code>PRI</code> 表示该列是表主键的一部分，<code>UNI</code> 表示该列是 <code>UNIQUE</code> 索引的一部分，<code>MUL</code> 表示在列中某个给定值允许出现多次。</p></li><li><p><code>Default</code>：表示该列是否有默认值，如果有，值是多少。</p></li><li><p><code>Extra</code>：表示可以获取的与给定列有关的附加信息，如 <code>AUTO_INCREMENT</code> 等。</p></li><li><p>查看表的详细结构</p></li></ul><p><code>SHOW CREATE TABLE</code> 语句可以用来显示创建表时的 <code>CREATE TABLE</code> 语句，语法格式如下：</p><blockquote><p>SHOW CREATE TABLE &lt;表名&gt;\\G；</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261639229.png" alt="202208221940350"></p><p>提示：使用 <code>SHOW CREATE TABLE</code> 语句不仅可以查看创建表时的详细语句，而且可以查看存储引擎和字符编码。如果不加<code>\\G</code>参数，显示的结果可能非常混乱，加上<code>\\G</code>参数之后，可使显示的结果更加直观，易于查看；但是在图形化工具上使用可能会报错！</p><h2 id="管理数据表" tabindex="-1"><a class="header-anchor" href="#管理数据表" aria-hidden="true">#</a> 管理数据表</h2><h3 id="修改表结构" tabindex="-1"><a class="header-anchor" href="#修改表结构" aria-hidden="true">#</a> 修改表结构</h3><p>在 MySQL 中可以使用 <code>ALTER TABLE</code> 语句来改变原有表的结构，例如增加或删减列、更改原有列类型、重新命名列或表等。<br> 其语法格式如下：</p><blockquote><p>ALTER TABLE &lt;表名&gt; [修改选项]</p></blockquote><p>修改选项的语法格式如下：</p><blockquote><p>{</p><p>ADD COLUMN &lt;列名&gt; &lt;类型&gt;</p><p>| CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt;</p><p>| ALTER COLUMN &lt;列名&gt; { SET DEFAULT &lt;默认值&gt; | DROP DEFAULT }</p><p>| MODIFY COLUMN &lt;列名&gt; &lt;类型&gt;</p><p>| DROP COLUMN &lt;列名&gt;</p><p>| RENAME TO &lt;新表名&gt;</p><p>| CHARACTER SET &lt;字符集名&gt;</p><p>| COLLATE &lt;校对规则名&gt;</p><p>}</p></blockquote><h3 id="修改表名" tabindex="-1"><a class="header-anchor" href="#修改表名" aria-hidden="true">#</a> 修改表名</h3><p>MySQL 通过 <code>ALTER TABLE</code> 语句来实现表名的修改，语法规则如下：</p><blockquote><p>ALTER TABLE &lt;旧表名&gt; RENAME [TO] &lt;新表名&gt;;</p></blockquote><p>其中，<code>TO</code> 为可选参数，使用与否均不影响结果。</p><h3 id="修改表字符集" tabindex="-1"><a class="header-anchor" href="#修改表字符集" aria-hidden="true">#</a> 修改表字符集</h3><p>MySQL 通过 <code>ALTER TABLE</code> 语句来实现表字符集的修改，语法规则如下：</p><blockquote><p>ALTER TABLE 表名 [DEFAULT] CHARACTER SET &lt;字符集名&gt; [DEFAULT] COLLATE &lt;校对规则名&gt;;</p></blockquote><p>其中，<code>DEFAULT</code> 为可选参数，使用与否均不影响结果。</p><h3 id="利用-select-语句查询的结果创建表" tabindex="-1"><a class="header-anchor" href="#利用-select-语句查询的结果创建表" aria-hidden="true">#</a> 利用 <code>SELECT</code> 语句查询的结果创建表</h3><p>在 <code>CREATE</code> 语句后指定一个 <code>SELECT</code> 语句</p><p>例如：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE someBook(

bid INT,

bname VARCHAR(80)

)

SELECT bid bname FROM bookInfo;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果是将 <code>bookInfo</code> 表中 <code>bid</code> 列和 <code>bname</code> 列中的数据复制到 <code>someBook</code> 中。</p><p>复制表的数据：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE book1 SELECT * FROM bookInfo;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个一样的空表：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE book2 SELECT * FROM bookInfo WHERE 0;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="用-drop-table-语句删除数据表" tabindex="-1"><a class="header-anchor" href="#用-drop-table-语句删除数据表" aria-hidden="true">#</a> 用 <code>DROP TABLE</code> 语句删除数据表</h3><p>使用 <code>DROP TABLE</code> 语句可以删除一个或多个数据表，语法格式如下：</p><blockquote><p>DROP TABLE [IF EXISTS] 表名 1 [ ,表名 2, 表名 3 ...]</p></blockquote><p>对语法格式的说明如下：</p><ul><li><p><code>表名 1, 表名 2, 表名 3 ...</code>表示要被删除的数据表的名称。<code>DROP TABLE</code> 可以同时删除多个表，只要将表名依次写在后面，相互之间用逗号隔开即可。</p></li><li><p><code>IF EXISTS</code> 用于在删除数据表之前判断该表是否存在。如果不加 <code>IF EXISTS</code>，当数据表不存在时 MySQL 将提示错误，中断 SQL 语句的执行；加上 <code>IF EXISTS</code> 后，当数据表不存在时 SQL 语句可以顺利执行，但是会发出警告（warning）。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><ul><li><p>用户必须拥有执行 <code>DROP TABLE</code> 命令的权限，否则数据表不会被删除。</p></li><li><p>表被删除时，用户在该表上的权限不会自动删除。</p></li></ul></div>`,66),a=[c];function i(r,o){return e(),d("div",null,a)}const g=t(n,[["render",i],["__file","2. 创建与管理数据表.html.vue"]]);export{g as default};
