import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as r,c as l,a,b as e,d as p,e as i,r as c}from"./app.e421740f.js";const g={},n=i('<h1 id="_20-elasticsearch" tabindex="-1"><a class="header-anchor" href="#_20-elasticsearch" aria-hidden="true">#</a> 20. elasticsearch</h1><h2 id="_20-1-了解-es" tabindex="-1"><a class="header-anchor" href="#_20-1-了解-es" aria-hidden="true">#</a> 20.1.了解 ES</h2><h3 id="_20-1-1-elasticsearch-的作用" tabindex="-1"><a class="header-anchor" href="#_20-1-1-elasticsearch-的作用" aria-hidden="true">#</a> 20.1.1.elasticsearch 的作用</h3><p>elasticsearch 是一款非常强大的开源搜索引擎，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容</p><p>例如：</p><ul><li><p>在 GitHub 搜索代码</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720193623245.png" alt="image-20210720193623245"></p></li><li><p>在电商网站搜索商品</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720193633483.png" alt="image-20210720193633483"></p></li><li><p>在百度搜索答案</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720193641907.png" alt="image-20210720193641907"></p></li><li><p>在打车软件搜索附近的车</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720193648044.png" alt="image-20210720193648044"></p></li></ul><h3 id="_20-1-2-elk-技术栈" tabindex="-1"><a class="header-anchor" href="#_20-1-2-elk-技术栈" aria-hidden="true">#</a> 20.1.2.ELK 技术栈</h3><p>elasticsearch 结合 kibana、Logstash、Beats，也就是 elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720194008781.png" alt="image-20210720194008781"></p><p>而 elasticsearch 是 elastic stack 的核心，负责存储、搜索、分析数据。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720194230265.png" alt="image-20210720194230265"></p><h3 id="_20-1-3-elasticsearch-和-lucene" tabindex="-1"><a class="header-anchor" href="#_20-1-3-elasticsearch-和-lucene" aria-hidden="true">#</a> 20.1.3.elasticsearch 和 lucene</h3><p>elasticsearch 底层是基于<strong>lucene</strong>来实现的。</p>',13),h=a("strong",null,"Lucene",-1),d={href:"https://lucene.apache.org/",target:"_blank",rel:"noopener noreferrer"},o=i('<p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720194547780.png" alt="image-20210720194547780"></p><p><strong>elasticsearch</strong>的发展历史：</p><ul><li>2004 年 Shay Banon 基于 Lucene 开发了 Compass</li><li>2010 年 Shay Banon 重写了 Compass，取名为 Elasticsearch。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720195001221.png" alt="image-20210720195001221"></p><h3 id="_20-1-4-为什么不是其他搜索技术" tabindex="-1"><a class="header-anchor" href="#_20-1-4-为什么不是其他搜索技术" aria-hidden="true">#</a> 20.1.4.为什么不是其他搜索技术？</h3><p>目前比较知名的搜索引擎技术排名：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720195142535.png" alt="image-20210720195142535"></p><p>虽然在早期，Apache Solr 是最主要的搜索引擎技术，但随着发展 elasticsearch 已经渐渐超越了 Solr，独占鳌头：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720195306484.png" alt="image-20210720195306484"></p><h3 id="_20-1-5-总结" tabindex="-1"><a class="header-anchor" href="#_20-1-5-总结" aria-hidden="true">#</a> 20.1.5.总结</h3><p>什么是 elasticsearch？</p><ul><li>一个开源的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能</li></ul><p>什么是 elastic stack（ELK）？</p><ul><li>是以 elasticsearch 为核心的技术栈，包括 beats、Logstash、kibana、elasticsearch</li></ul><p>什么是 Lucene？</p><ul><li>是 Apache 的开源搜索引擎类库，提供了搜索引擎的核心 API</li></ul><h2 id="_20-2-倒排索引" tabindex="-1"><a class="header-anchor" href="#_20-2-倒排索引" aria-hidden="true">#</a> 20.2.倒排索引</h2><p>倒排索引的概念是基于 MySQL 这样的正向索引而言的。</p><h3 id="_20-2-1-正向索引" tabindex="-1"><a class="header-anchor" href="#_20-2-1-正向索引" aria-hidden="true">#</a> 20.2.1.正向索引</h3><p>那么什么是正向索引呢？例如给下表（tb_goods）中的 id 创建索引：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720195531539.png" alt="image-20210720195531539"></p><p>如果是根据 id 查询，那么直接走索引，查询速度非常快。</p><p>但如果是基于 title 做模糊查询，只能是逐行扫描数据，流程如下：</p><p>1）用户搜索数据，条件是 title 符合<code>&quot;%手机%&quot;</code></p><p>2）逐行获取数据，比如 id 为 1 的数据</p><p>3）判断数据中的 title 是否符合用户搜索条件</p><p>4）如果符合则放入结果集，不符合则丢弃。回到步骤 1</p><p>逐行扫描，也就是全表扫描，随着数据量增加，其查询效率也会越来越低。当数据量达到数百万时，就是一场灾难。</p><h3 id="_20-2-2-倒排索引" tabindex="-1"><a class="header-anchor" href="#_20-2-2-倒排索引" aria-hidden="true">#</a> 20.2.2.倒排索引</h3><p>倒排索引中有两个非常重要的概念：</p><ul><li>文档（<code>Document</code>）：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li><li>词条（<code>Term</code>）：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li></ul><p><strong>创建倒排索引</strong>是对正向索引的一种特殊处理，流程如下：</p><ul><li>将每一个文档的数据利用算法分词，得到一个个词条</li><li>创建表，每行数据包括词条、词条所在文档 id、位置等信息</li><li>因为词条唯一性，可以给词条创建索引，例如 hash 表结构索引</li></ul><p>如图：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720200457207.png" alt="image-20210720200457207"></p><p>倒排索引的<strong>搜索流程</strong>如下（以搜索&quot;华为手机&quot;为例）：</p><p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。</p><p>2）对用户输入内容<strong>分词</strong>，得到词条：<code>华为</code>、<code>手机</code>。</p><p>3）拿着词条在倒排索引中查找，可以得到包含词条的文档 id：1、2、3。</p><p>4）拿着文档 id 到正向索引中查找具体文档。</p><p>如图：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720201115192.png" alt="image-20210720201115192"></p><p>虽然要先查询倒排索引，再查询倒排索引，但是无论是词条、还是文档 id 都建立了索引，查询速度非常快！无需全表扫描。</p><h3 id="_20-2-3-正向和倒排" tabindex="-1"><a class="header-anchor" href="#_20-2-3-正向和倒排" aria-hidden="true">#</a> 20.2.3.正向和倒排</h3><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p><ul><li><p><strong>正向索引</strong>是最传统的，根据 id 索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<strong>根据文档找词条的过程</strong>。</p></li><li><p>而<strong>倒排索引</strong>则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的 id，然后根据 id 获取文档。是<strong>根据词条找文档的过程</strong>。</p></li></ul><p>是不是恰好反过来了？</p><p>那么两者方式的优缺点是什么呢？</p><p><strong>正向索引</strong>：</p><ul><li>优点： <ul><li>可以给多个字段创建索引</li><li>根据索引字段搜索、排序速度非常快</li></ul></li><li>缺点： <ul><li>根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描。</li></ul></li></ul><p><strong>倒排索引</strong>：</p><ul><li>优点： <ul><li>根据词条搜索、模糊搜索时，速度非常快</li></ul></li><li>缺点： <ul><li>只能给词条创建索引，而不是字段</li><li>无法根据字段做排序</li></ul></li></ul><h2 id="_20-3-es-的一些概念" tabindex="-1"><a class="header-anchor" href="#_20-3-es-的一些概念" aria-hidden="true">#</a> 20.3.es 的一些概念</h2><p>elasticsearch 中有很多独有的概念，与 mysql 中略有差别，但也有相似之处。</p><h3 id="_20-3-1-文档和字段" tabindex="-1"><a class="header-anchor" href="#_20-3-1-文档和字段" aria-hidden="true">#</a> 20.3.1.文档和字段</h3><p>elasticsearch 是面向**文档（Document）**存储的，可以是数据库中的一条商品数据，一个订单信息。文档数据会被序列化为 json 格式后存储在 elasticsearch 中：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720202707797.png" alt="image-20210720202707797"></p><p>而 Json 文档中往往包含很多的<strong>字段（Field）</strong>，类似于数据库中的列。</p><h3 id="_20-3-2-索引和映射" tabindex="-1"><a class="header-anchor" href="#_20-3-2-索引和映射" aria-hidden="true">#</a> 20.3.2.索引和映射</h3><p><strong>索引（Index）</strong>，就是相同类型的文档的集合。</p><p>例如：</p><ul><li>所有用户文档，就可以组织在一起，称为用户的索引；</li><li>所有商品的文档，可以组织在一起，称为商品的索引；</li><li>所有订单的文档，可以组织在一起，称为订单的索引；</li></ul><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720203022172.png" alt="image-20210720203022172"></p><p>因此，我们可以把索引当做是数据库中的表。</p><p>数据库的表会有约束信息，用来定义表的结构、字段的名称、类型等信息。因此，索引库中就有<strong>映射（mapping）</strong>，是索引中文档的字段约束信息，类似表的结构约束。</p><h3 id="_20-3-3-mysql-与-elasticsearch" tabindex="-1"><a class="header-anchor" href="#_20-3-3-mysql-与-elasticsearch" aria-hidden="true">#</a> 20.3.3.mysql 与 elasticsearch</h3><p>我们统一的把 mysql 与 elasticsearch 的概念做一下对比：</p><table><thead><tr><th><strong>MySQL</strong></th><th><strong>Elasticsearch</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Table</td><td>Index</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row</td><td>Document</td><td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是 JSON 格式</td></tr><tr><td>Column</td><td>Field</td><td>字段（Field），就是 JSON 文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping</td><td>Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL 是 elasticsearch 提供的 JSON 风格的请求语句，用来操作 elasticsearch，实现 CRUD</td></tr></tbody></table><p>是不是说，我们学习了 elasticsearch 就不再需要 mysql 了呢？</p><p>并不是如此，两者各自有自己的擅长支出：</p><ul><li><p>Mysql：擅长事务类型操作，可以确保数据的安全和一致性</p></li><li><p>Elasticsearch：擅长海量数据的搜索、分析、计算</p></li></ul><p>因此在企业中，往往是两者结合使用：</p><ul><li>对安全性要求较高的写操作，使用 mysql 实现</li><li>对查询性能要求较高的搜索需求，使用 elasticsearch 实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210720203534945.png" alt="image-20210720203534945"></p>',74);function u(m,_){const t=c("ExternalLinkIcon");return r(),l("div",null,[n,a("p",null,[h,e("是一个 Java 语言的搜索引擎类库，是 Apache 公司的顶级项目，由 DougCutting 于 1999 年研发。官网地址："),a("a",d,[e("https://lucene.apache.org/"),p(t)]),e(" 。")]),o])}const f=s(g,[["render",u],["__file","20. elasticsearch.html.vue"]]);export{f as default};
