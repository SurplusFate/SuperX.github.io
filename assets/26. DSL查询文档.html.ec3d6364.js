import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as i,a as n,b as s,d as e,e as t,r as l}from"./app.691e2e41.js";const r={},c=n("h1",{id:"_26-dsl-查询文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_26-dsl-查询文档","aria-hidden":"true"},"#"),s(" 26. DSL 查询文档")],-1),u=n("p",null,"elasticsearch 的查询依然是基于 JSON 风格的 DSL 来实现的。",-1),d=n("h2",{id:"_26-1-dsl-查询分类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_26-1-dsl-查询分类","aria-hidden":"true"},"#"),s(" 26.1.DSL 查询分类")],-1),m={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<ul><li><p><strong>查询所有</strong>：查询出所有数据，一般测试用。例如：match_all</p></li><li><p><strong>全文检索（full text）查询</strong>：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：</p><ul><li>match_query</li><li>multi_match_query</li></ul></li><li><p><strong>精确查询</strong>：根据精确词条值查找数据，一般是查找 keyword、数值、日期、boolean 等类型字段。例如：</p><ul><li>ids</li><li>range</li><li>term</li></ul></li><li><p><strong>地理（geo）查询</strong>：根据经纬度查询。例如：</p><ul><li>geo_distance</li><li>geo_bounding_box</li></ul></li><li><p><strong>复合（compound）查询</strong>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：</p><ul><li>bool</li><li>function_score</li></ul></li></ul><p>查询的语法基本一致：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /indexName/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;查询类型&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;查询条件&quot;</span><span class="token operator">:</span> <span class="token string">&quot;条件值&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们以查询所有为例，其中：</p><ul><li>查询类型为 match_all</li><li>没有查询条件</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 查询所有</span>
GET /indexName/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;match_all&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其它查询无非就是<strong>查询类型</strong>、<strong>查询条件</strong>的变化。</p><h2 id="_26-2-全文检索查询" tabindex="-1"><a class="header-anchor" href="#_26-2-全文检索查询" aria-hidden="true">#</a> 26.2.全文检索查询</h2><h3 id="_26-2-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_26-2-1-使用场景" aria-hidden="true">#</a> 26.2.1.使用场景</h3><p>全文检索查询的基本流程如下：</p><ul><li>对用户搜索的内容做分词，得到词条</li><li>根据词条去倒排索引库中匹配，得到文档 id</li><li>根据文档 id 找到文档，返回给用户</li></ul><p>比较常用的场景包括：</p><ul><li>商城的输入框搜索</li><li>百度输入框搜索</li></ul><p>例如京东：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721165326938.png" alt="image-20210721165326938"></p><p>因为是拿着词条去匹配，因此参与搜索的字段也必须是可分词的 text 类型的字段。</p><h3 id="_26-2-2-基本语法" tabindex="-1"><a class="header-anchor" href="#_26-2-2-基本语法" aria-hidden="true">#</a> 26.2.2.基本语法</h3><p>常见的全文检索查询包括：</p><ul><li>match 查询：单字段查询</li><li>multi_match 查询：多字段查询，任意一个字段符合条件就算符合查询条件</li></ul><p>match 查询语法如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /indexName/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;FIELD&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TEXT&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mulit_match 语法如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /indexName/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;multi_match&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;FIELD1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; FIELD12&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-3-示例" tabindex="-1"><a class="header-anchor" href="#_26-2-3-示例" aria-hidden="true">#</a> 26.2.3.示例</h3><p>match 查询示例：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721170455419.png" alt="image-20210721170455419"></p><p>multi_match 查询示例：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721170720691.png" alt="image-20210721170720691"></p><p>可以看到，两种查询结果是一样的，为什么？</p><p>因为我们将 brand、name、business 值都利用 copy_to 复制到了 all 字段中。因此你根据三个字段搜索，和根据 all 字段搜索效果当然一样了。</p><p>但是，搜索字段越多，对查询性能影响越大，因此建议采用 copy_to，然后单字段查询的方式。</p><h3 id="_26-2-4-总结" tabindex="-1"><a class="header-anchor" href="#_26-2-4-总结" aria-hidden="true">#</a> 26.2.4.总结</h3><p>match 和 multi_match 的区别是什么？</p><ul><li>match：根据一个字段查询</li><li>multi_match：根据多个字段查询，参与查询字段越多，查询性能越差</li></ul><h2 id="_26-3-精准查询" tabindex="-1"><a class="header-anchor" href="#_26-3-精准查询" aria-hidden="true">#</a> 26.3.精准查询</h2><p>精确查询一般是查找 keyword、数值、日期、boolean 等类型字段。所以<strong>不会</strong>对搜索条件分词。常见的有：</p><ul><li>term：根据词条精确值查询</li><li>range：根据值的范围查询</li></ul><h3 id="_26-3-1-term-查询" tabindex="-1"><a class="header-anchor" href="#_26-3-1-term-查询" aria-hidden="true">#</a> 26.3.1.term 查询</h3><p>因为精确查询的字段搜是不分词的字段，因此查询的条件也必须是<strong>不分词</strong>的词条。查询时，用户输入的内容跟自动值完全匹配时才认为符合条件。如果用户输入的内容过多，反而搜索不到数据。</p><p>语法说明：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// term查询</span>
GET /indexName/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;FIELD&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;VALUE&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><p>当我搜索的是精确词条时，能正确查询出结果：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721171655308.png" alt="image-20210721171655308"></p><p>但是，当我搜索的内容不是词条，而是多个词语形成的短语时，反而搜索不到：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721171838378.png" alt="image-20210721171838378"></p><h3 id="_26-3-2-range-查询" tabindex="-1"><a class="header-anchor" href="#_26-3-2-range-查询" aria-hidden="true">#</a> 26.3.2.range 查询</h3><p>范围查询，一般应用在对数值类型做范围过滤的时候。比如做价格范围过滤。</p><p>基本语法：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// range查询</span>
GET /indexName/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;FIELD&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">// 这里的gte代表大于等于，gt则代表大于</span>
        <span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token comment">// lte代表小于等于，lt则代表小于</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721172307172.png" alt="image-20210721172307172"></p><h3 id="_26-3-3-总结" tabindex="-1"><a class="header-anchor" href="#_26-3-3-总结" aria-hidden="true">#</a> 26.3.3.总结</h3><p>精确查询常见的有哪些？</p><ul><li>term 查询：根据词条精确匹配，一般搜索 keyword 类型、数值类型、布尔类型、日期类型字段</li><li>range 查询：根据数值范围查询，可以是数值、日期的范围</li></ul><h2 id="_26-4-地理坐标查询" tabindex="-1"><a class="header-anchor" href="#_26-4-地理坐标查询" aria-hidden="true">#</a> 26.4.地理坐标查询</h2>`,56),g={href:"https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>常见的使用场景包括：</p><ul><li>携程：搜索我附近的酒店</li><li>滴滴：搜索我附近的出租车</li><li>微信：搜索我附近的人</li></ul><p>附近的酒店：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721172645103.png" alt="image-20210721172645103"></p><p>附近的车：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721172654880.png" alt="image-20210721172654880"></p><h3 id="_26-4-1-矩形范围查询" tabindex="-1"><a class="header-anchor" href="#_26-4-1-矩形范围查询" aria-hidden="true">#</a> 26.4.1.矩形范围查询</h3><p>矩形范围查询，也就是 geo_bounding_box 查询，查询坐标落在某个矩形范围的所有文档：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/DKV9HZbVS6.gif" alt="DKV9HZbVS6"></p><p>查询时，需要指定矩形的<strong>左上</strong>、<strong>右下</strong>两个点的坐标，然后画出一个矩形，落在该矩形内的都是符合条件的点。</p><p>语法如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// geo_bounding_box查询</span>
GET /indexName/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;geo_bounding_box&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;FIELD&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;top_left&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 左上点</span>
          <span class="token property">&quot;lat&quot;</span><span class="token operator">:</span> <span class="token number">31.1</span><span class="token punctuation">,</span>
          <span class="token property">&quot;lon&quot;</span><span class="token operator">:</span> <span class="token number">121.5</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token property">&quot;bottom_right&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 右下点</span>
          <span class="token property">&quot;lat&quot;</span><span class="token operator">:</span> <span class="token number">30.9</span><span class="token punctuation">,</span>
          <span class="token property">&quot;lon&quot;</span><span class="token operator">:</span> <span class="token number">121.7</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种并不符合“附近的人”这样的需求，所以我们就不做了。</p><h3 id="_26-4-2-附近查询" tabindex="-1"><a class="header-anchor" href="#_26-4-2-附近查询" aria-hidden="true">#</a> 26.4.2.附近查询</h3><p>附近查询，也叫做距离查询（geo_distance）：查询到指定中心点小于某个距离值的所有文档。</p><p>换句话来说，在地图上找一个点作为圆心，以指定距离为半径，画一个圆，落在圆内的坐标都算符合条件：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/vZrdKAh19C.gif" alt="vZrdKAh19C"></p><p>语法说明：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// geo_distance 查询</span>
GET /indexName/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;geo_distance&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;distance&quot;</span><span class="token operator">:</span> <span class="token string">&quot;15km&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 半径</span>
      <span class="token property">&quot;FIELD&quot;</span><span class="token operator">:</span> <span class="token string">&quot;31.21,121.5&quot;</span> <span class="token comment">// 圆心</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p><p>我们先搜索陆家嘴附近 15km 的酒店：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721175443234.png" alt="image-20210721175443234"></p><p>发现共有 47 家酒店。</p><p>然后把半径缩短到 3 公里：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721182031475.png" alt="image-20210721182031475"></p><p>可以发现，搜索到的酒店数量减少到了 5 家。</p><h2 id="_26-5-复合查询" tabindex="-1"><a class="header-anchor" href="#_26-5-复合查询" aria-hidden="true">#</a> 26.5.复合查询</h2><p>复合（compound）查询：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑。常见的有两种：</p><ul><li>fuction score：算分函数查询，可以控制文档相关性算分，控制文档排名</li><li>bool query：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索</li></ul><h3 id="_26-5-1-相关性算分" tabindex="-1"><a class="header-anchor" href="#_26-5-1-相关性算分" aria-hidden="true">#</a> 26.5.1.相关性算分</h3><p>当我们利用 match 查询时，文档结果会根据与搜索词条的关联度打分（_score），返回结果时按照分值降序排列。</p><p>例如，我们搜索 &quot;虹桥如家&quot;，结果如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;_score&quot;</span><span class="token operator">:</span> <span class="token number">17.850193</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;虹桥如家酒店真不错&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;_score&quot;</span><span class="token operator">:</span> <span class="token number">12.259849</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;外滩如家酒店真不错&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;_score&quot;</span><span class="token operator">:</span> <span class="token number">11.91091</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;迪士尼如家酒店真不错&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 elasticsearch 中，早期使用的打分算法是 TF-IDF 算法，公式如下：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721190152134.png" alt="image-20210721190152134"></p><p>在后来的 5.1 版本升级中，elasticsearch 将算法改进为 BM25 算法，公式如下：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721190416214.png" alt="image-20210721190416214"></p><p>TF-IDF 算法有一各缺陷，就是词条频率越高，文档得分也会越高，单个词条对文档影响较大。而 BM25 则会让单个词条的算分有一个上限，曲线更加平滑：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721190907320.png" alt="image-20210721190907320"></p><p>小结：elasticsearch 会根据词条和文档的相关度做打分，算法由两种：</p><ul><li>TF-IDF 算法</li><li>BM25 算法，elasticsearch5.1 版本后采用的算法</li></ul><h3 id="_26-5-2-算分函数查询" tabindex="-1"><a class="header-anchor" href="#_26-5-2-算分函数查询" aria-hidden="true">#</a> 26.5.2.算分函数查询</h3><p>根据相关度打分是比较合理的需求，但<strong>合理的不一定是产品经理需要</strong>的。</p><p>以百度为例，你搜索的结果中，并不是相关度越高排名越靠前，而是谁掏的钱多排名就越靠前。如图：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721191144560.png" alt="image-20210721191144560"></p><p>要想认为控制相关性算分，就需要利用 elasticsearch 中的 function score 查询了。</p><h4 id="_1-语法说明" tabindex="-1"><a class="header-anchor" href="#_1-语法说明" aria-hidden="true">#</a> 1）语法说明</h4><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721191544750.png" alt="image-20210721191544750"></p><p>function score 查询中包含四部分内容：</p><ul><li><strong>原始查询</strong>条件：query 部分，基于这个条件搜索文档，并且基于 BM25 算法给文档打分，<strong>原始算分</strong>（query score)</li><li><strong>过滤条件</strong>：filter 部分，符合该条件的文档才会重新算分</li><li><strong>算分函数</strong>：符合 filter 条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数 <ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数算法</li></ul></li><li><strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括： <ul><li>multiply：相乘</li><li>replace：用 function score 替换 query score</li><li>其它，例如：sum、avg、max、min</li></ul></li></ul><p>function score 的运行流程如下：</p><ul><li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li><li>2）根据<strong>过滤条件</strong>，过滤文档</li><li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li><li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li></ul><p>因此，其中的关键点是：</p><ul><li>过滤条件：决定哪些文档的算分被修改</li><li>算分函数：决定函数算分的算法</li><li>运算模式：决定最终算分结果</li></ul><h4 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2）示例</h4><p>需求：给“如家”这个品牌的酒店排名靠前一些</p><p>翻译一下这个需求，转换为之前说的四个要点：</p><ul><li>原始条件：不确定，可以任意变化</li><li>过滤条件：brand = &quot;如家&quot;</li><li>算分函数：可以简单粗暴，直接给固定的算分结果，weight</li><li>运算模式：比如求和</li></ul><p>因此最终的 DSL 语句如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /hotel/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;function_score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>  .... <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 原始查询，可以是任意条件</span>
      <span class="token property">&quot;functions&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 算分函数</span>
        <span class="token punctuation">{</span>
          <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 满足的条件，品牌必须是如家</span>
            <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token string">&quot;如家&quot;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token property">&quot;weight&quot;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token comment">// 算分权重为2</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;boost_mode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sum&quot;</span> <span class="token comment">// 加权模式，求和</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试，在未添加算分函数时，如家得分如下：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721193152520.png" alt="image-20210721193152520"></p><p>添加了算分函数后，如家得分就提升了：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721193458182.png" alt="image-20210721193458182"></p><h4 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3）小结</h4><p>function score query 定义的三要素是什么？</p><ul><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算 function score</li><li>加权方式：function score 与 query score 如何运算</li></ul><h3 id="_26-5-3-布尔查询" tabindex="-1"><a class="header-anchor" href="#_26-5-3-布尔查询" aria-hidden="true">#</a> 26.5.3.布尔查询</h3><p>布尔查询是一个或多个查询子句的组合，每一个子句就是一个<strong>子查询</strong>。子查询的组合方式有：</p><ul><li>must：必须匹配每个子查询，类似“与”</li><li>should：选择性匹配子查询，类似“或”</li><li>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</li><li>filter：必须匹配，<strong>不参与算分</strong></li></ul><p>比如在搜索酒店时，除了关键字搜索外，我们还可能根据品牌、价格、城市等字段做过滤：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721193822848.png" alt="image-20210721193822848"></p><p>每一个不同的字段，其查询的条件、方式都不一样，必须是多个不同的查询，而要组合这些查询，就必须用 bool 查询了。</p><p>需要注意的是，搜索时，参与<strong>打分的字段越多，查询的性能也越差</strong>。因此这种多条件查询时，建议这样做：</p><ul><li>搜索框的关键字搜索，是全文检索查询，使用 must 查询，参与算分</li><li>其它过滤条件，采用 filter 查询。不参与算分</li></ul><h4 id="_1-语法示例" tabindex="-1"><a class="header-anchor" href="#_1-语法示例" aria-hidden="true">#</a> 1）语法示例</h4><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>GET /hotel/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;bool&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;must&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;上海&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;should&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span><span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token string">&quot;皇冠假日&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span><span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;brand&quot;</span><span class="token operator">:</span> <span class="token string">&quot;华美达&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;must_not&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;price&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;lte&quot;</span><span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token property">&quot;filter&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token property">&quot;range&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">&quot;score&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;gte&quot;</span><span class="token operator">:</span> <span class="token number">45</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-案例" tabindex="-1"><a class="header-anchor" href="#_2-案例" aria-hidden="true">#</a> 2）案例</h4><p>需求：搜索名字包含“如家”，价格不高于 400，在坐标 31.21,121.5 周围 10km 范围内的酒店。</p><p>分析：</p><ul><li>名称搜索，属于全文检索查询，应该参与算分。放到 must 中</li><li>价格不高于 400，用 range 查询，属于过滤条件，不参与算分。放到 must_not 中</li><li>周围 10km 范围内，用 geo_distance 查询，属于过滤条件，不参与算分。放到 filter 中</li></ul><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210721194744183.png" alt="image-20210721194744183"></p><h4 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3）总结</h4><p>bool 查询有几种逻辑关系？</p><ul><li>must：必须匹配的条件，可以理解为“与”</li><li>should：选择性匹配的条件，可以理解为“或”</li><li>must_not：必须不匹配的条件，不参与打分</li><li>filter：必须匹配的条件，不参与打分</li></ul>`,85);function h(b,q){const a=l("ExternalLinkIcon");return o(),i("div",null,[c,u,d,n("p",null,[s("Elasticsearch 提供了基于 JSON 的 DSL（"),n("a",m,[s("Domain Specific Language"),e(a)]),s("）来定义查询。常见的查询类型包括：")]),v,n("p",null,[s("所谓的地理坐标查询，其实就是根据经纬度查询，官方文档："),n("a",g,[s("https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html"),e(a)])]),k])}const f=p(r,[["render",h],["__file","26. DSL查询文档.html.vue"]]);export{f as default};
