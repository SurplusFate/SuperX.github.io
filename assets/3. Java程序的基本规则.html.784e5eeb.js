import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as d,c as s,a as t,b as c,d as l,e,r as o}from"./app.6511ef9c.js";const i={},r=e('<h1 id="_3-java-程序的基本规则" tabindex="-1"><a class="header-anchor" href="#_3-java-程序的基本规则" aria-hidden="true">#</a> 3. Java 程序的基本规则</h1><p>Java 类名、方法名、变量名统称为“标识符”，凡是程序员自己有权利命名的单词都是标识符。 主方法的 <code>main</code> 也属于标识符，但这个标识符不能被修改，这个 <code>main</code> 是 SUN 公司固定死的。</p><h2 id="main-方法的问题" tabindex="-1"><a class="header-anchor" href="#main-方法的问题" aria-hidden="true">#</a> main 方法的问题</h2><p>如果需要用 Java 解释器直接运行一个 Java 类，则这个 Java 类必须包含 main 方法，这个 main 方法必须使用 public 和 static 来修饰，必须使用 void 声明该方法的返回值，而且该方法的参数类型只能是一个字符串数组，而不能是其他形式的参数。</p><p>对于这个 main 方法而言，前面的 public 和 static 修饰符的位置可以互换，但其他部分则是固定的。定义 main 方法时，不要写成 Main 方法，如果不小心把方法名的首字母写成了大写，编译时不会出现任何问题，但运行该程序时将给出如下错误提示：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202206071630867.png" alt="image-20220516223404651"></p><p>因为 Java 解释器只会选择从 main 方法开始执行；对于 Main 方法，Java 解释器会把该方法当成一个普通方法，而不是程序的入口。</p><h2 id="java-关键字" tabindex="-1"><a class="header-anchor" href="#java-关键字" aria-hidden="true">#</a> Java 关键字</h2><p>Java 关键字是预先定义的具有特别意义的标识符，也可以叫 Java 保留字，Java 关键字不能用作变量名、方法名、类名、包名和参数，Java 关键字大全：</p><table><thead><tr><th style="text-align:center;">Java 关键字类别</th><th style="text-align:center;">Java 关键字</th><th style="text-align:center;">关键字含义</th></tr></thead><tbody><tr><td style="text-align:center;">访问控制</td><td style="text-align:center;"><code>private</code></td><td style="text-align:center;">一种访问控制方式：私用模式，访问控制修饰符，可以应用于类、方法或字段（在类中声明的变量）</td></tr><tr><td style="text-align:center;">访问控制</td><td style="text-align:center;"><code>protected</code></td><td style="text-align:center;">一种访问控制方式：保护模式，可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符</td></tr><tr><td style="text-align:center;">访问控制</td><td style="text-align:center;"><code>public</code></td><td style="text-align:center;">一种访问控制方式：共用模式，可以应用于类、方法或字段（在类中声明的变量）的访问控制修饰符。</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>abstract</code></td><td style="text-align:center;">表明类或者成员方法具有抽象属性，用于修改类或方法</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>class</code></td><td style="text-align:center;">声明一个类，用来声明新的 Java 类</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>extends</code></td><td style="text-align:center;">表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>final</code></td><td style="text-align:center;">用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>implements</code></td><td style="text-align:center;">表明一个类实现了给定的接口</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>interface</code></td><td style="text-align:center;">接口</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>native</code></td><td style="text-align:center;">用来声明一个方法是由与计算机相关的语言（如 C/C++/FORTRAN 语言）实现的</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>new</code></td><td style="text-align:center;">用来创建新实例对象</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>static</code></td><td style="text-align:center;">表明具有静态属性</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>strictfp</code></td><td style="text-align:center;">用来声明 <code>FP_strict</code>（单精度或双精度浮点数）表达式遵循 IEEE 754 算术规范</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>synchronized</code></td><td style="text-align:center;">表明一段代码需要同步执行</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>transient</code></td><td style="text-align:center;">声明不用序列化的成员域</td></tr><tr><td style="text-align:center;">类、方法和变量修饰符</td><td style="text-align:center;"><code>volatile</code></td><td style="text-align:center;">表明两个或者多个变量必须同步地发生变化</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>break</code></td><td style="text-align:center;">提前跳出一个块</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>continue</code></td><td style="text-align:center;">回到一个块的开始处</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>return</code></td><td style="text-align:center;">从成员方法中返回数据</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>do</code></td><td style="text-align:center;">用在 <code>do-while</code> 循环结构中</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>while</code></td><td style="text-align:center;">用在循环结构中</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>if</code></td><td style="text-align:center;">条件语句的引导词</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>else</code></td><td style="text-align:center;">用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>for</code></td><td style="text-align:center;">一种循环结构的引导词</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>instanceof</code></td><td style="text-align:center;">用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>switch</code></td><td style="text-align:center;">分支语句结构的引导词</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>case</code></td><td style="text-align:center;">用在 <code>switch</code> 语句之中，表示其中的一个分支</td></tr><tr><td style="text-align:center;">程序控制</td><td style="text-align:center;"><code>default</code></td><td style="text-align:center;">默认，例如：用在 <code>switch</code> 语句中，表明一个默认的分支。Java8 中也作用于声明接口函数的默认实现</td></tr><tr><td style="text-align:center;">错误处理</td><td style="text-align:center;"><code>try</code></td><td style="text-align:center;">尝试一个可能抛出异常的程序块</td></tr><tr><td style="text-align:center;">错误处理</td><td style="text-align:center;"><code>catch</code></td><td style="text-align:center;">用在异常处理中，用来捕捉异常</td></tr><tr><td style="text-align:center;">错误处理</td><td style="text-align:center;"><code>throw</code></td><td style="text-align:center;">抛出一个异常</td></tr><tr><td style="text-align:center;">错误处理</td><td style="text-align:center;"><code>throws</code></td><td style="text-align:center;">声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td style="text-align:center;">包相关</td><td style="text-align:center;"><code>import</code></td><td style="text-align:center;">表明要访问指定的类或包</td></tr><tr><td style="text-align:center;">包相关</td><td style="text-align:center;"><code>package</code></td><td style="text-align:center;">包</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>boolean</code></td><td style="text-align:center;">基本数据类型之一，声明布尔类型的关键字</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>byte</code></td><td style="text-align:center;">基本数据类型之一，字节类型</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>char</code></td><td style="text-align:center;">基本数据类型之一，字符类型</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>double</code></td><td style="text-align:center;">基本数据类型之一，双精度浮点数类型</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>float</code></td><td style="text-align:center;">基本数据类型之一，单精度浮点数类型</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>int</code></td><td style="text-align:center;">基本数据类型之一，整数类型</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>long</code></td><td style="text-align:center;">基本数据类型之一，长整数类型</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>short</code></td><td style="text-align:center;">基本数据类型之一,短整数类型</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>null</code></td><td style="text-align:center;">空，表示无值，不能将 <code>null</code> 赋给原始类型（<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>char</code>、<code>float</code>、<code>double</code>、<code>boolean</code>）变量</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;">真，<code>boolean</code> 变量的两个合法值中的一个</td></tr><tr><td style="text-align:center;">基本类型</td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;">假，<code>boolean</code> 变量的两个合法值之一</td></tr><tr><td style="text-align:center;">变量引用</td><td style="text-align:center;"><code>super</code></td><td style="text-align:center;">表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td style="text-align:center;">变量引用</td><td style="text-align:center;"><code>this</code></td><td style="text-align:center;">指向当前实例对象的引用，用于引用当前实例</td></tr><tr><td style="text-align:center;">变量引用</td><td style="text-align:center;"><code>void</code></td><td style="text-align:center;">声明当前成员方法没有返回值，<code>void</code> 可以用作方法的返回类型，以指示该方法不返回值</td></tr><tr><td style="text-align:center;">保留字</td><td style="text-align:center;"><code>goto</code></td><td style="text-align:center;">保留关键字，没有具体含义</td></tr><tr><td style="text-align:center;">保留字</td><td style="text-align:center;"><code>const</code></td><td style="text-align:center;">保留关键字，没有具体含义，是一个类型修饰符，使用 <code>const</code> 声明的对象不能更新</td></tr></tbody></table><h2 id="标识符命名规则" tabindex="-1"><a class="header-anchor" href="#标识符命名规则" aria-hidden="true">#</a> 标识符命名规则</h2><p>标识符只能由数字、字母(包括中文)、下划线_、美元符$组成,不能含有其他符号，标识符不能以数字开头、<strong>关键字</strong>不能做标识符、标识符严格区分大小写。</p><p>虽然 java 中的标识符严格区分大小写，但是对于类名来说，如果一个 java 源文件中同时出现了 A 类和 a 类，那么谁在前就生成谁，类名最好不要“<mark>相同</mark>”。</p><p>标识符理论上没有长度限制。</p><h2 id="标识符命名规范" tabindex="-1"><a class="header-anchor" href="#标识符命名规范" aria-hidden="true">#</a> 标识符命名规范</h2><ol><li><p>见名知意（标识符在起名的时候，最好一看这个单词就知道啥意思）。</p></li><li><p>遵循驼峰命名法，驼峰有利于单词与单词之间很好的分隔，例如<code>HelloWorld</code>，<code>IdentifierTest</code>。</p></li><li><p>类名和接口名的特殊要求：</p><p>类名和接口名首字母大写，后面每个单词首字母小写。 <code>StudentTest</code>，<code>UserTest</code></p></li><li><p>变量名，方法名的特殊要求：</p><p>变量名和方法名首字母小写，后面每个单词首字母大写。 <code>moveAll</code> 所有常量名:全部大写,单词与单词之间采用下划线衔接。 <code>USER_AGE</code></p></li></ol><p>更多详情可参考阿里的 Java 开发手册</p>',17),p={href:"https://github.com/alibaba/p3c",target:"_blank",rel:"noopener noreferrer"},g=e(`<h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><p>与大多数程序设计语言一样，Java 中的注释也不会出现在可执行程序中。因此，可以在源程序中根据需要添加任意多的注释，而不必担心可执行代码会膨胀。在 Java 中，有 3 种标记注释的方式。最常用的方式是使用<code>//</code>，其注释内容从<code>//</code>开始到本行结尾。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 你好，世界</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要长篇的注释时，既可以在每行的注释前面标记<code>//</code>，也可以使用<code>/*</code>和<code>*/</code>将一段比较长的注释括起来。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
    世界很大，我想去看看
    */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 你好，世界</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，第 3 种注释可以用来自动地生成文档。这种注释以<code>/**</code>开始，以<code>*/</code>结束。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
    世界很大，我想去看看
    */</span>

    <span class="token doc-comment comment">/**
    我的第一个Java程序
    @version 1.0
    @author 空~
    */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 你好，世界</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在 Java 中，<code>/* */</code>注释不能嵌套。也就是说，不能简单地把代码用<code>/*</code>和<code>*/</code>括起来作为注释，因为这段代码本身可能也包含一个<code>*/</code>。</p></div><h3 id="javadoc-标签-了解" tabindex="-1"><a class="header-anchor" href="#javadoc-标签-了解" aria-hidden="true">#</a> Javadoc 标签（了解）</h3><p>自动地生成文档使用 <code>javadoc</code> 命令，的基本用法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javadoc <span class="token punctuation">[</span>命令的选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>包名<span class="token punctuation">]</span> <span class="token punctuation">[</span>源文件名<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 <code>cmd</code>（命令提示符）中输入 <code>javadoc -help</code> 就可以看到 <code>Javadoc</code> 的用法和选项（前提是安装配置了 JDK），下面列举 <code>Javadoc</code> 命令的常用选项：</p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>-public</code></td><td style="text-align:center;">仅显示 <code>public</code> 类和成员</td></tr><tr><td style="text-align:center;"><code>-protected</code></td><td style="text-align:center;">显示 <code>protected/public</code> 类和成员（默认值）</td></tr><tr><td style="text-align:center;"><code>-package</code></td><td style="text-align:center;">显示 <code>package/protected/public</code> 类和成员</td></tr><tr><td style="text-align:center;"><code>-private</code></td><td style="text-align:center;">显示所有类和成员</td></tr><tr><td style="text-align:center;"><code>-d &lt;directory&gt;</code></td><td style="text-align:center;">输出文件的目标目录</td></tr><tr><td style="text-align:center;"><code>-version</code></td><td style="text-align:center;">包含 <code>@version</code> 段</td></tr><tr><td style="text-align:center;"><code>-author</code></td><td style="text-align:center;">包含 <code>@author</code> 段</td></tr><tr><td style="text-align:center;"><code>-splitindex</code></td><td style="text-align:center;">将索引分为每个字母对应一个文件</td></tr><tr><td style="text-align:center;"><code>-windowtitle &lt;text&gt;</code></td><td style="text-align:center;">文档的浏览器窗口标题</td></tr></tbody></table><p><code>Javadoc</code> 工具可以识别文档注释中的一些特殊标签，这些标签一般以<code>@</code>开头，后跟一个指定的名字，有的也以<code>{@</code>开头，以<code>}</code>结束。<code>Javadoc</code> 可以识别的标签如下表所示：</p><table><thead><tr><th style="text-align:center;">标签</th><th style="text-align:center;">描述</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>@author</code></td><td style="text-align:center;">标识一个类的作者，一般用于类注释</td><td style="text-align:center;"><code>@author description</code></td></tr><tr><td style="text-align:center;"><code>@deprecated</code></td><td style="text-align:center;">指名一个过期的类或成员，表明该类或方法不建议使用</td><td style="text-align:center;"><code>@deprecated description</code></td></tr><tr><td style="text-align:center;"><code>{@docRoot}</code></td><td style="text-align:center;">指明当前文档根目录的路径</td><td style="text-align:center;"><code>Directory Path</code></td></tr><tr><td style="text-align:center;"><code>@exception</code></td><td style="text-align:center;">可能抛出异常的说明，一般用于方法注释</td><td style="text-align:center;"><code>@exception exception-name explanation</code></td></tr><tr><td style="text-align:center;"><code>{@inheritDoc}</code></td><td style="text-align:center;">从直接父类继承的注释</td><td style="text-align:center;"><code>Inherits a comment from the immediate surperclass</code></td></tr><tr><td style="text-align:center;"><code>{@link}</code></td><td style="text-align:center;">插入一个到另一个主题的链接</td><td style="text-align:center;"><code>{@link name text}</code></td></tr><tr><td style="text-align:center;"><code>{@linkplain}</code></td><td style="text-align:center;">插入一个到另一个主题的链接，但是该链接显示纯文本字体</td><td style="text-align:center;"><code>Inserts an in-line link to another topic</code></td></tr><tr><td style="text-align:center;"><code>@param</code></td><td style="text-align:center;">说明一个方法的参数，一般用于方法注释</td><td style="text-align:center;"><code>@param parameter-name explanation</code></td></tr><tr><td style="text-align:center;"><code>@return</code></td><td style="text-align:center;">说明返回值类型，一般用于方法注释，不能出现再构造方法中</td><td style="text-align:center;"><code>@return explanation</code></td></tr><tr><td style="text-align:center;"><code>@see</code></td><td style="text-align:center;">指定一个到另一个主题的链接</td><td style="text-align:center;"><code>@see anchor</code></td></tr><tr><td style="text-align:center;"><code>@serial</code></td><td style="text-align:center;">说明一个序列化属性</td><td style="text-align:center;"><code>@serial description</code></td></tr><tr><td style="text-align:center;"><code>@serialData</code></td><td style="text-align:center;">说明通过 <code>writeObject()</code> 和 <code>writeExternal()</code> 方法写的数据</td><td style="text-align:center;"><code>@serialData description</code></td></tr><tr><td style="text-align:center;"><code>@serialField</code></td><td style="text-align:center;">说明一个 <code>ObjectStreamField</code> 组件</td><td style="text-align:center;"><code>@serialField name type description</code></td></tr><tr><td style="text-align:center;"><code>@since</code></td><td style="text-align:center;">说明从哪个版本起开始有了这个函数</td><td style="text-align:center;"><code>@since release</code></td></tr><tr><td style="text-align:center;"><code>@throws</code></td><td style="text-align:center;">和 <code>@exception</code> 标签一样.</td><td style="text-align:center;"><code>The @throws tag has the same meaning as the @exception tag</code></td></tr><tr><td style="text-align:center;"><code>{@value}</code></td><td style="text-align:center;">显示常量的值，该常量必须是 <code>static</code> 属性。</td><td style="text-align:center;"><code>Displays the value of a constant, which must be a static field</code></td></tr><tr><td style="text-align:center;"><code>@version</code></td><td style="text-align:center;">指定类的版本，一般用于类注释</td><td style="text-align:center;"><code>@version info</code></td></tr></tbody></table><p>对两种标签格式的说明：</p><ul><li><code>@tag</code> 格式的标签（不被<code>{}</code>包围的标签）为块标签，只能在主要描述（类注释中对该类的详细说明为主要描述）后面的标签部分（如果块标签放在主要描述的前面，则生成 API 帮助文档时会检测不到主要描述）。</li><li><code>{@tag}</code> 格式的标签（由<code>{}</code>包围的标签）为内联标签，可以放在主要描述中的任何位置或块标签的注释中。</li></ul><p><code>Javadoc</code> 标签注意事项：</p><ul><li><code>Javadoc</code> 标签必须从一行的开头开始，否则将被视为普通文本。</li><li>一般具有相同名称的标签放在一起。</li><li><code>Javadoc</code> 标签区分大小写，代码中对于大小写错误的标签不会发生编译错误，但是在生成 <code>API</code> 帮助文档时会检测不到该注释内容。</li></ul><p>新建一个空白记事本，输入下列代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
* <span class="token keyword">@author</span> C语言中文网
* <span class="token keyword">@version</span> jdk1.8.0
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 求输入两个参数范围以内整数的和
     * <span class="token keyword">@param</span> <span class="token parameter">n</span> 接收的第一个参数，范围起点
     * <span class="token keyword">@param</span> <span class="token parameter">m</span> 接收的第二个参数，范围终点
     * <span class="token keyword">@return</span> 两个参数范围以内整数的和
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将文件命名为 Test.java，打开 <code>cmd</code> 窗口，输入<code>javadoc -author -version Test.java</code>命令。</p><p>以上没有考虑编码格式的问题，<code>cmd</code> 可能会乱码报错。使用<code>javadoc -encoding UTF-8 -charset UTF-8 Test.java</code>会解决编码问题。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208011420759.png" alt="image-20220801142002601"></p><p>打开 Test.java 文件存储的位置，会发现多出了一个 大量 <code>.html</code> 文件，打开其中的 Test.html。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208011425561.png" alt="image-20220801142515465"></p>`,26);function u(y,x){const n=o("ExternalLinkIcon");return d(),s("div",null,[r,t("p",null,[t("a",p,[c("alibaba/p3c: Alibaba Java Coding Guidelines pmd implements and IDE plugin (github.com)"),l(n)])]),g])}const k=a(i,[["render",u],["__file","3. Java程序的基本规则.html.vue"]]);export{k as default};
