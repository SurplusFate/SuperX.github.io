import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as i,e as o}from"./app.1925bc9f.js";const s={},n=o('<h1 id="_3-主要类的介绍" tabindex="-1"><a class="header-anchor" href="#_3-主要类的介绍" aria-hidden="true">#</a> 3. 主要类的介绍</h1><ol><li><p>Resources：</p><ol><li>mybatis 中的一个类， 负责读取主配置文件</li><li><code>InputStream in = Resources.getResourceAsStream(&quot;mybatis.xml&quot;);</code></li></ol></li><li><p>SqlSessionFactoryBuilder:</p><ol><li>创建 SqlSessionFactory 对象</li><li><code>SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();</code></li></ol></li><li><p>SqlSessionFactory:</p><ol><li>重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。在整个项目中，有一个就够用了。</li><li>SqlSessionFactory 是一个接口, 接口实现类： DefaultSqlSessionFactory</li><li>SqlSessionFactory 作用： 获取 SqlSession 对象。</li><li><code>SqlSession sqlSession = factory.openSession();</code></li><li>openSession()方法说明： <ol><li>openSession() ：无参数， 获取是非自动提交事务的 SqlSession 对象</li><li>openSession(true) : 获取自动提交事务的 SqlSession</li><li>openSession(false) : 非自动提交事务的 SqlSession 对象</li></ol></li></ol></li><li><p>SqlSession:</p><ol><li>SqlSession 接口 ：定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback()</li><li>SqlSession 接口的实现类 DefaultSqlSession。</li><li>使用要求： SqlSession 对象不是线程安全的，需要在方法内部使用， 在执行 sql 语句之前，使用 openSession()获取 SqlSession 对象。</li><li>在执行完 sql 语句后，需要关闭它，执行 SqlSession.close(). 这样能保证他的使用是线程安全的。</li></ol></li></ol>',2),t=[n];function S(c,r){return e(),i("div",null,t)}const q=l(s,[["render",S],["__file","3. 主要类介绍.html.vue"]]);export{q as default};
