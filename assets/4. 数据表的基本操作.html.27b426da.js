import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as d,e as c}from"./app.331e95d7.js";const o={},l=c(`<h1 id="_4-数据表的基本操作" tabindex="-1"><a class="header-anchor" href="#_4-数据表的基本操作" aria-hidden="true">#</a> 4. 数据表的基本操作</h1><h2 id="数据操纵语言" tabindex="-1"><a class="header-anchor" href="#数据操纵语言" aria-hidden="true">#</a> 数据操纵语言</h2><p>数据操纵语言（Data Manipulation Language，DML）包含了数据库数据的增、删、改、查操作，其中主要包括 <code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code> 四条命令。</p><h2 id="mysql-运算符" tabindex="-1"><a class="header-anchor" href="#mysql-运算符" aria-hidden="true">#</a> MySQL 运算符</h2><p>四大类运算符：算数运算符、比较运算符、逻辑运算符、位操作运算符</p><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h3><p>加<code>+</code>、减<code>-</code>、乘<code>*</code>、除<code>/</code>、求余（模运算，<code>%</code>）</p><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><p>一个比较运算符的结果总是 1（<code>true</code>）、0（<code>false</code>）或者 <code>null</code>。比较运算符经常在 <code>select</code> 的查询条件子句中使用</p><table><thead><tr><th style="text-align:center;"><strong>符号</strong></th><th style="text-align:center;"><strong>描述</strong></th><th style="text-align:center;"><strong>备注</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>=</code></td><td style="text-align:center;">等于</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>&lt;&gt;</code>, <code>!=</code></td><td style="text-align:center;">不等于</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>&gt;</code></td><td style="text-align:center;">大于</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>&lt;</code></td><td style="text-align:center;">小于</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>&lt;=</code></td><td style="text-align:center;">小于等于</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>&gt;=</code></td><td style="text-align:center;">大于等于</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>BETWEEN AND</code></td><td style="text-align:center;">在两值之间</td><td style="text-align:center;">&gt;=min&amp;&amp;&lt;=max</td></tr><tr><td style="text-align:center;"><code>NOT BETWEEN</code></td><td style="text-align:center;">不在两值之间</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>IN</code></td><td style="text-align:center;">在集合中</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>NOT IN</code></td><td style="text-align:center;">不在集合中</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>&lt;=&gt;</code></td><td style="text-align:center;">严格比较两个 NULL 值是否相等</td><td style="text-align:center;">两个操作码均为 NULL 时，其所得值为 1；而当一个操作码为 NULL 时，其所得值为 0</td></tr><tr><td style="text-align:center;"><code>LIKE</code></td><td style="text-align:center;">模糊匹配</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>REGEXP</code> 或 <code>RLIKE</code></td><td style="text-align:center;">正则式匹配</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>IS NULL</code></td><td style="text-align:center;">为空</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>IS NOT NULL</code></td><td style="text-align:center;">不为空</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>LEAST</code></td><td style="text-align:center;">在有两个或多个参数时,返回最小值</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;"><code>GREATEST</code></td><td style="text-align:center;">在有两个或多个参数时,返回最大值</td><td style="text-align:center;"></td></tr></tbody></table><p>比较运算符比较数字时，将数字作为浮点值比较，比较字符串时不区分大小写（除非使用 <code>BINARY</code> 关键字）。MySQL 会自动将字符串和数字进行互相转换，方便比较。</p><p><code>BINARY</code> 关键字的使用：</p><p>示例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT &#39;Apple&#39; = &#39;apple&#39; , BINARY &#39;Apple&#39; = &#39;apple&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261345490.png" alt="202208261345490"></p><ol><li><p>等于运算符<code>=</code>在比较数值时的规则：</p><ul><li>若有一个或两个操作数为 <code>NULL</code>，则比较运算的结果为 <code>NULL</code>。</li><li>若两个操作数都是字符串，则按照字符串进行比较。</li><li>若两个操作数均为整数，则按照整数进行比较。</li><li>若一个操作数为字符串，另一个操作数为数字，则 MySQL 可以自动将字符串转换为数字。</li></ul></li><li><p><code>&lt;=&gt;</code>，安全的等于运算符，与<code>=</code>操作符执行相同的操作，不过<code>&lt;=&gt;</code>可以用来判断 <code>null</code> 值。</p><p>示例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT null = null, null = 0, null &lt;=&gt; null, null &lt;=&gt; 0;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261426608.png" alt="202208261426608"></p><p><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>运算符，这些运算符不能用于空值的判断</p></li><li><p><code>LIKE</code> 运算符，用来匹配字符串。</p><p><code>LIKE</code> 运算符在进行匹配时可以使用下面两种通配符：</p><ul><li><code>%</code>，匹配任何数目的字符，包括 0 个字符。</li><li><code>-</code>，只能匹配 1 个字符。</li></ul></li><li><p><code>REGEXP</code> 运算符，用来匹配字符串。</p><p><code>REGEXP</code> 运算符在进行匹配时可以使用下面几种通配符：</p><ul><li><code>^</code>，匹配以该字符后面的字符开头的字符串。</li><li><code>$</code>，匹配以该字符后面的字符结尾的字符串。</li><li><code>.</code>，匹配任意单个字符。</li><li><code>[...]</code>，匹配在括号内的任何字符。</li><li><code>[abc]</code>，匹配<code>a</code>或<code>b</code>或<code>c</code>，<code>[a-z]</code>匹配任何字母，<code>[0-9]</code>匹配任何数字</li><li><code>[\\^...]</code>，匹配不以括号内的任何字符开头的字符串。</li><li><code>*</code>，匹配 0 个或多个在它前面的字符。</li></ul></li></ol><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><table><thead><tr><th style="text-align:center;"><strong>运算符</strong></th><th style="text-align:center;"><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:center;">NOT 或者 !</td><td style="text-align:center;">逻辑非</td></tr><tr><td style="text-align:center;">AND 或者 &amp;&amp;</td><td style="text-align:center;">逻辑与</td></tr><tr><td style="text-align:center;">OR 和 ||</td><td style="text-align:center;">逻辑或</td></tr><tr><td style="text-align:center;">XOR</td><td style="text-align:center;">逻辑异或</td></tr></tbody></table><ol><li><p>逻辑非运算（<code>NOT</code> 或者 <code>!</code>）</p><p><code>NOT</code> 和<code>!</code>都是逻辑非运算符，返回和操作数相反的结果，具体语法规则为：</p><ul><li><p>当操作数为 0（假）时，返回值为 1；</p></li><li><p>当操作数为非零值时，返回值为 0；</p></li><li><p>当操作数为 <code>NULL</code> 时，返回值为 <code>NULL</code>。</p></li></ul><p><code>NOT</code> 的优先级低于 <code>+</code>，因此 <code>NOT 1+1</code> 相当于 <code>NOT(1+1)</code>，先计算 <code>1+1</code>，然后再进行 <code>NOT</code> 运算，由于操作数不为 0，因此 <code>NOT 1+1</code> 的结果是 0；</p><p>相反，<code>!</code> 的优先级别要高于 <code>+</code>，因此 <code>! 1+1</code> 相当于 <code>(!1)+1</code>，先计算 <code>!1</code> 结果为 0，再加 1，最后结果为 1。</p></li><li><p>逻辑与运算符（AND 或者 &amp;&amp;）</p><p><code>AND</code> 和 <code>&amp;&amp;</code> 都是逻辑与运算符，具体语法规则为：</p><ul><li><p>当所有操作数都为非零值并且不为 <code>NULL</code> 时，返回值为 1；</p></li><li><p>当一个或多个操作数为 0 时，返回值为 0；</p></li><li><p>操作数中有任何一个为 <code>NULL</code> 时，返回值为 <code>NULL</code>。</p></li></ul></li><li><p>逻辑或运算符（<code>OR</code> 或者 <code>||</code>）</p><p><code>OR</code> 和 <code>||</code> 都是逻辑或运算符，具体语法规则为：</p><ul><li>当两个操作数都为非 <code>NULL</code> 值时，如果有任意一个操作数为非零值，则返回值为 1，否则结果为 0；</li><li>当有一个操作数为 <code>NULL</code> 时，如果另一个操作数为非零值，则返回值为 1，否则结果为 <code>NULL</code>；</li><li>假如两个操作数均为 <code>NULL</code> 时，则返回值为 <code>NULL</code>。</li></ul></li><li><p>异或运算（<code>XOR</code> 运算符）</p><p><code>XOR</code> 表示逻辑异或，具体语法规则为：</p><ul><li>当任意一个操作数为 <code>NULL</code> 时，返回值为 <code>NULL</code>；</li><li>对于非 <code>NULL</code> 的操作数，如果两个操作数都是非 0 值或者都是 0 值，则返回值为 0；</li><li>如果一个为 0 值，另一个为非 0 值，返回值为 1。</li></ul></li><li><p>运算符的优先级</p><table><thead><tr><th style="text-align:center;"><strong>优先级由低到高排列</strong></th><th style="text-align:center;"><strong>运算符</strong></th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">=(赋值运算）、:=</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">II、OR</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">XOR</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:center;">&amp;&amp;、AND</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">NOT</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">BETWEEN、CASE、WHEN、THEN、ELSE</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:center;">=(比较运算）、&lt;=&gt;、&gt;=、&gt;、&lt;=、&lt;、&lt;&gt;、!=、 IS、LIKE、REGEXP、IN</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">|</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">&amp;</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:center;">&lt;&lt;、&gt;&gt;</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">-(减号）、+</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:center;">*、/、%</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:center;">^</td></tr><tr><td style="text-align:center;">14</td><td style="text-align:center;">-(负号）、〜（位反转）</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;">!</td></tr></tbody></table><p>在无法确定优先级的情况下，可以使用圆括号<code>()</code>来改变优先级，并且这样会使计算过程更加清晰。</p></li></ol><h2 id="mysql-中的转义字符" tabindex="-1"><a class="header-anchor" href="#mysql-中的转义字符" aria-hidden="true">#</a> MySQL 中的转义字符</h2><p>在 MySQL 中，除了常见的字符之外，我们还会遇到一些特殊的字符，如换行符、回车符等。这些符号无法用字符来表示，因此需要使用某些特殊的字符来表示特殊的含义，这些字符就是转义字符。</p><p>转义字符一般以反斜杠符号<code>\\</code>开头，用来说明后面的字符不是字符本身的含义，而是表示其它的含义。MySQL 中常见的转义字符如下表所示。</p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>转义后的字符</strong></th></tr></thead><tbody><tr><td>\\&quot;</td><td>双引号（&quot;）</td></tr><tr><td>\\&#39;</td><td>单引号（&#39;）</td></tr><tr><td>\\\\</td><td>反斜线（\\）</td></tr><tr><td>\\n</td><td>换行符</td></tr><tr><td>\\r</td><td>回车符</td></tr><tr><td>\\t</td><td>制表符</td></tr><tr><td>\\0</td><td>ASCII 0（NUL）</td></tr><tr><td>\\b</td><td>退格符</td></tr></tbody></table><p>转义字符区分大小写，例如：<code>\\b</code> 解释为退格，但 <code>\\B</code> 解释为 <code>B</code>。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><ul><li>字符串的内容包含单引号<code>&#39;</code>时，可以用单引号<code>&#39;</code>或反斜杠<code>\\</code>来转义。</li><li>字符串的内容包含双引号<code>&quot;</code>时，可以用双引号<code>&quot;</code>或反斜杠<code>\\</code>来转义。</li><li>一个字符串用双引号<code>&quot;</code>引用时，该字符串中的单引号<code>&#39;</code>不需要特殊对待，且不必被重复转义。同理，一个字符串用单引号<code>&#39;</code>引用时，该字符串中的双引号<code>&quot;</code>不需要特殊对待，且不必被重复转义。</li></ul></div><p>示例：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT &#39;Hello&#39;, &#39;&quot; Hello &quot;&#39;,&#39;&quot;&quot; Hello &quot;&quot;&#39;,&#39; Hel&#39;&#39;lo&#39;, &#39;\\\\&#39; Hello &#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261407440.png" alt="202208261407440"></p><h2 id="插入表数据" tabindex="-1"><a class="header-anchor" href="#插入表数据" aria-hidden="true">#</a> 插入表数据</h2><p>数据库与表创建成功以后，需要向数据库的表中插入数据。在 MySQL 中可以使用 <code>INSERT</code> 语句向数据库已有的表中插入一行或者多行元组数据。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法" aria-hidden="true">#</a> 基本语法</h3><p><code>INSERT</code> 语句有两种语法形式，分别是 <code>INSERT…VALUES</code> 语句和 <code>INSERT…SET</code> 语句。</p><p><strong><code>INSERT…VALUES</code> 语句</strong></p><blockquote><p>INSERT INTO &lt;表名&gt; [&lt;列名 1&gt; [ , … &lt;列名 n&gt;] ] VALUES (值 1) [… , (值 n) ];</p></blockquote><p>语法说明如下：</p><ul><li><code>&lt;表名&gt;</code>：指定被操作的表名。</li><li><code>&lt;列名&gt;</code>：指定需要插入数据的列名。若向表中的所有列插入数据，则全部的列名均可以省略，直接采用 <code>INSERT &lt;表名&gt;VALUES(…)</code> 即可，但值的顺序必须和表中字段定义的顺序相同。</li><li><code>VALUES</code> 或 <code>VALUE</code> 子句：该子句包含要插入的数据清单。数据清单中数据的顺序要和列的顺序相对应。</li></ul><p><strong><code>INSERT…SET</code> 语句</strong></p><blockquote><p>INSERT INTO &lt;表名&gt; SET &lt;列名 1&gt; = &lt;值 1&gt;, &lt;列名 2&gt; = &lt;值 2&gt;, …</p></blockquote><p>此语句用于直接给表中的某些列指定对应的列值，即要插入的数据的列名在 <code>SET</code> 子句中指定。</p><p>由 <code>INSERT</code> 语句的两种形式可以看出：</p><ul><li>使用 <code>INSERT…VALUES</code> 语句可以向表中插入一行数据，也可以插入多行数据；</li><li>使用 <code>INSERT…SET</code> 语句可以指定插入行中每列的值，也可以指定部分列的值；</li><li><code>INSERT…SELECT</code> 语句向表中插入其他表的数据。</li><li>采用 <code>INSERT…SET</code> 语句可以向表中插入部分列的值，这种方式更为灵活；</li><li><code>INSERT…VALUES</code> 语句可以一次插入多条数据。</li></ul><h3 id="向表中的全部字段添加值" tabindex="-1"><a class="header-anchor" href="#向表中的全部字段添加值" aria-hidden="true">#</a> 向表中的全部字段添加值</h3><p>向表中所有字段插入值的方法有两种：一种是指定所有字段名；另一种是完全不指定字段名。不指定字段名时不要按照表定义的顺序插入，只要保证值的顺序与列字段的顺序相同就可以。</p><h3 id="向表中指定字段添加值" tabindex="-1"><a class="header-anchor" href="#向表中指定字段添加值" aria-hidden="true">#</a> 向表中指定字段添加值</h3><p>为表的指定字段插入数据，是在 INSERT 语句中只向部分字段中插入值，而其他字段的值为表定义时的默认值。</p><p>要保证每个插入值的类型和对应的数据类型匹配，如果类型不同，将无法插入，并且 MySQL 会产生错误。</p><h2 id="修改表数据" tabindex="-1"><a class="header-anchor" href="#修改表数据" aria-hidden="true">#</a> 修改表数据</h2><p>在 MySQL 中，可以使用 UPDATE 语句来修改、更新一个或多个表的数据。</p><h3 id="update-语句的基本语法" tabindex="-1"><a class="header-anchor" href="#update-语句的基本语法" aria-hidden="true">#</a> UPDATE 语句的基本语法</h3><p>使用 UPDATE 语句修改单个表，语法格式为：</p><blockquote><p>UPDATE &lt;表名&gt; SET 字段 1=值 1 [,字段 2=值 2… ] [WHERE 子句 ] [ORDER BY 子句] [LIMIT 子句];</p></blockquote><p>语法说明如下：</p><ul><li><p><code>&lt;表名&gt;</code>：用于指定要更新的表名称。</p></li><li><p><code>SET</code> 子句：用于指定表中要修改的列名及其列值。其中，每个指定的列值可以是表达式，也可以是该列对应的默认值。如果指定的是默认值，可用关键字 <code>DEFAULT</code> 表示列值。</p></li><li><p><code>WHERE</code> 子句：可选项。用于限定表中要修改的行。若不指定，则修改表中所有的行。</p></li><li><p><code>ORDER BY</code> 子句：可选项。用于限定表中的行被修改的次序。</p></li><li><p><code>LIMIT</code> 子句：可选项。用于限定被修改的行数。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>修改一行数据的多个列值时，SET 子句的每个值用逗号分开即可。</p><p>保证 UPDATE 以 WHERE 子句结束，通过 WHERE 子句指定被更新的记录所需要满足的条件，如果忽略 WHERE 子句，MySQL 将更新表中所有的行。</p></div></li></ul><h2 id="删除表数据" tabindex="-1"><a class="header-anchor" href="#删除表数据" aria-hidden="true">#</a> 删除表数据</h2><p>使用 <code>DELETE</code> 语句从单个表中删除数据，语法格式为：</p><blockquote><p>DELETE FROM &lt;表名&gt; [WHERE 子句] [ORDER BY 子句] [LIMIT 子句]</p></blockquote><p>语法说明如下：</p><ul><li><p><code>&lt;表名&gt;</code>：指定要删除数据的表名。</p></li><li><p><code>ORDER BY</code> 子句：可选项。表示删除时，表中各行将按照子句中指定的顺序进行删除。</p></li><li><p><code>WHERE</code> 子句：可选项。表示为删除操作限定删除条件，若省略该子句，则代表删除该表中的所有行。</p></li><li><p><code>LIMIT</code> 子句：可选项。用于告知服务器在控制命令被返回到客户端前被删除行的最大值。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在不使用 <code>WHERE</code> 条件的时候，将删除所有数据。</p></div><p>如果想删除表中所有记录，还可以使用 <code>truncate table</code> 语句，<code>truncate</code> 将直接删除原来的表并创建一个新的表，<code>truncate</code> 是直接删除表而不是逐条删除记录，因此执行速度比 <code>delete</code> 快。</p><p>语法格式：</p><blockquote><p>TRUNCATE TABLE &lt;表名&gt;</p></blockquote></li></ul><h2 id="数据表的查询" tabindex="-1"><a class="header-anchor" href="#数据表的查询" aria-hidden="true">#</a> 数据表的查询</h2><p>在 MySQL 中，可以使用 <code>SELECT</code> 语句来查询数据。查询数据是指从数据库中根据需求，使用不同的查询方式来获取不同的数据，是使用频率最高、最重要的操作。</p><p><code>SELECT</code> 的语法格式如下：</p><blockquote><p>SELECT {* | &lt;字段列名&gt;} [ FROM &lt;表 1&gt;, &lt;表 2&gt;… [WHERE &lt;表达式&gt; [GROUP BY <code>&lt;group by definition&gt;</code> [HAVING <code>&lt;expression&gt;</code> [{<code>&lt;operator&gt; &lt;expression&gt;</code>}…]] [ORDER BY <code>&lt;order by definition&gt;</code>] [LIMIT[<code>&lt;offset&gt;</code>,] <code>&lt;row count&gt;</code>] ]</p></blockquote><p>其中，各条子句的含义如下：</p><ul><li><code>{* | &lt;字段列名&gt;}</code>包含星号通配符的字段列表，表示所要查询字段的名称。</li><li><code>&lt;表 1&gt;，&lt;表 2&gt;…</code>，表 1 和表 2 表示查询数据的来源，可以是单个或多个。</li><li><code>WHERE &lt;表达式&gt;</code>是可选项，如果选择该项，将限定查询数据必须满足该查询条件。</li><li><code>GROUP BY&lt; 字段 &gt;</code>，该子句告诉 MySQL 如何显示查询出来的数据，并按照指定的字段分组。</li><li><code>[ORDER BY&lt; 字段 &gt;]</code>，该子句告诉 MySQL 按什么样的顺序显示查询出来的数据，可以进行的排序有升序（<code>ASC</code>）和降序（<code>DESC</code>），默认情况下是升序。</li><li><code>[LIMIT[&lt;offset&gt;，]&lt;row count&gt;]</code>，该子句告诉 MySQL 每次显示查询出来的数据条数。</li></ul><h3 id="简单查询" tabindex="-1"><a class="header-anchor" href="#简单查询" aria-hidden="true">#</a> 简单查询</h3><ol><li><p>选择指定的字段</p><p>最简单的查询语句是：<code>SELECT 输出列表达式;</code></p><p>例如：<code>SELECT 1 + 2;</code></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261345525.png" alt="202208261345525"></p></li><li><p>查询表中所有字段</p><p>查询所有字段是指查询表中所有字段的数据。MySQL 提供了以下 2 种方式查询表中的所有字段。</p><ul><li>使用<code>*</code>通配符查询所有字段</li><li>列出表的所有字段</li></ul></li><li><p>使用<code>*</code>查询表的所有字段</p><p>SELECT 可以使用<code>*</code>查找表中所有字段的数据，语法格式如下：</p><blockquote><p>SELECT * FROM 表名;</p></blockquote><p>使用<code>*</code>查询时，只能按照数据表中字段的顺序进行排列，不能改变字段的排列顺序。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>一般情况下，除非需要使用表中所有的字段数据，否则最好不要使用通配符<code>*</code>。虽然使用通配符可以节省输入查询语句的时间，但是获取不需要的列数据通常会降低查询和所使用的应用程序的效率。使用<code>*</code>的优势是，当不知道所需列的名称时，可以通过<code>*</code>获取它们。</p></div></li><li><p>列出表的所有字段</p><p><code>SELECT</code> 关键字后面的字段名为需要查找的字段，因此可以将表中所有字段的名称跟在 <code>SELECT</code> 关键字后面。如果忘记了字段名称，可以使用 <code>DESC</code> 命令查看表的结构。<br> 有时，由于表的字段比较多，不一定能记得所有字段的名称，因此该方法很不方便，不建议使用。</p></li><li><p>查询表中指定的字段</p><p>查询表中的某一个字段的语法格式为：</p><blockquote><p>SELECT &lt; 列名 &gt; FROM &lt; 表名 &gt;;</p></blockquote><p>使用 <code>SELECT</code> 声明可以获取多个字段下的数据，只需要在关键字 <code>SELECT</code> 后面指定要查找的字段名称，不同字段名称之间用逗号<code>,</code>分隔开，最后一个字段后面不需要加逗号，语法格式如下：</p><blockquote><p>SELECT &lt;字段名 1&gt;,&lt;字段名 2&gt;,…,&lt;字段名 n&gt; FROM &lt;表名&gt;;</p></blockquote></li><li><p>为表指定别名</p><p>当表名很长或者执行一些特殊查询的时候，为了方便操作，可以为表指定一个别名，用这个别名代替表原来的名称。</p><p>为表指定别名的基本语法格式为：</p><blockquote><p>&lt;表名&gt; [AS] &lt;别名&gt;</p></blockquote><p>其中各子句的含义如下：</p><ul><li><p><code>&lt;表名&gt;</code>：数据库中存储的数据表的名称。</p></li><li><p><code>&lt;别名&gt;</code>：查询时指定的表的新名称。</p></li><li><p><code>AS</code> 关键字可以省略，省略后需要将表名和别名用空格隔开。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>表的别名不能与该数据库的其它表同名。字段的别名不能与该表的其它字段同名。在条件表达式中不能使用字段的别名，否则会出现“ERROR 1054 (42S22): Unknown column”这样的错误提示信息。</p></div></li><li><p>为字段指定别名</p><p>在使用 SELECT 语句查询数据时，MySQL 会显示每个 SELECT 后面指定输出的字段。有时为了显示结果更加直观，我们可以为字段指定一个别名。</p><p>为字段指定别名的基本语法格式为：</p><blockquote><p>&lt;字段名&gt; [AS] &lt;别名&gt;</p></blockquote><p>其中，各子句的语法含义如下：</p><ul><li><p><code>&lt;字段名&gt;</code>：为数据表中字段定义的名称。</p></li><li><p><code>&lt;字段别名&gt;</code>：字段新的名称。</p></li><li><p><code>AS</code> 关键字可以省略，省略后需要将字段名和别名用空格隔开。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>表别名只在执行查询时使用，并不在返回结果中显示。而字段定义别名之后，会返回给客户端显示，显示的字段为字段的别名。</p></div></li><li><p>替换查询结果中的数据</p><p>有时对所查询的某些字段希望得到的是一个总体情况，而不是具体的数据，这时就可以将查询结果替换。</p><p>要替换查询结果中的数据，则使用查询中的 case 表达式，其基本语法格式为：</p><blockquote><p>CASE</p><p>WHEN 条件 1 THEN 表达式 1</p><p>WHEN 条件 2 THEN 表达式 2</p><p>……</p><p>ELSE 表达式 N</p><p>END</p></blockquote><p>语法说明：</p><p><code>case 表达式</code>以 <code>case</code> 开始，<code>end</code> 结束。MySQL 从<code>条件 1</code>开始判断，<code>条件 1</code>成立，输出<code>表达式 1</code>，结束；若<code>条件 1</code>不成立，判断<code>条件 2</code>，若<code>条件 2</code>成立，输出<code>表达式 2</code>后结束；……如果条件都不成立，则输出<code>表达式 N</code>。</p><p>例如：</p><p>查询所有学生的每一门成绩总体情况</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT stuid, cid,
CASE
WHEN score &gt;  60 &amp;&amp; score &lt; 70 THEN &#39;及格&#39;
WHEN score &gt;= 70 &amp;&amp; score &lt; 80 THEN &#39;一般&#39;
WHEN score &gt;= 80 &amp;&amp; score &lt; 90 THEN &#39;良好&#39;
WHEN score &gt;= 90 then &#39;优秀&#39;
ELSE &#39;不及格&#39;
END
FROM score;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261345688.png" alt="202208261345688"></p></li><li><p>计算字段值</p><p>使用 <code>SELECT</code> 对字段进行查询时，在结果中可以输出对字段值计算后的值，即在 <code>SELECT</code> 子句中可以使用表达式作为结果</p><p>例如：</p><p>查询所有学生每门课程成绩的 90% 是多少</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT stuid, cid, score * 0.9 FROM score;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261345695.png" alt="202208261345695"></p></li><li><p>过滤重复数据</p><p>在 MySQL 中使用 <code>SELECT</code> 语句执行简单的数据查询时，返回的是所有匹配的记录。如果表中的某些字段没有唯一性约束，那么这些字段就可能存在重复值。为了实现查询不重复的数据，MySQL 提供了 <code>DISTINCT</code> 关键字。</p><p><code>DISTINCT</code> 关键字的主要作用就是对数据表中一个或多个字段重复的数据进行过滤，只返回其中的一条数据给用户。</p><p><code>DISTINCT</code> 关键字的语法格式为：</p><blockquote><p>SELECT DISTINCT &lt;字段名&gt; FROM &lt;表名&gt;;</p></blockquote></li></ol><p>其中，<code>字段名</code>为需要消除重复记录的字段名称，多个字段时用逗号隔开。</p><p>使用 <code>DISTINCT</code> 关键字时需要注意以下几点：</p><ul><li><code>DISTINCT</code> 关键字只能在 <code>SELECT</code> 语句中使用。</li><li>在对一个或多个字段去重时，<code>DISTINCT</code> 关键字必须在所有字段的最前面。</li><li>如果 <code>DISTINCT</code> 关键字后有多个字段，则会对多个字段进行组合去重，也就是说，只有多个字段组合起来完全是一样的情况下才会被去重。</li></ul><h3 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h3><p>MySQL 函数是 MySQL 数据库提供的内部函数，这些内部函数可以帮助用户更加方便地处理表中的数据。函数就像预定的公式一样存放在数据库里，每个用户都可以调用已经存在的函数来完成某些功能。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>函数就是输入值然后得到相应的输出结果，输入值称为参数（parameter），输出值称为返回值。</p></div><p>函数可以很方便的地实现业务逻辑的重用，并且 MySQL 数据库允许用户自己创建函数，以适应实际的业务操作。正确使用函数会让读者在编写 SQL 语句时起到事半功倍的效果。</p><p>MySQL 函数用来对数据表中的数据进行相应的处理，以便得到用户希望得到的数据，使 MySQL 数据库的功能更加强大。</p><p>下面将简单介绍 MySQL 中包含的几类函数，以及这几类函数的使用范围和作用。</p><p>MySQL 函数包括<strong>数学函数、字符串函数、日期和时间函数、条件判断函数、系统信息函数</strong>和<strong>加密函数</strong>等。这些函数不仅能帮助用户做很多事情，比如字符串的处理、数值的运算、日期的运算等，还可以帮助开发人员编写出简单快捷的 SQL 语句。</p><p><code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 语句及其子句（例如 <code>WHERE</code>、<code>ORDER BY</code>、<code>HAVING</code> 等）中都可以使用 MySQL 函数。例如，数据表中的某个数据是负数，现在需要将这个数据显示为整数，这时就可以在 SELECT 语句中使用绝对值函数。</p><p>下面介绍这几类函数的使用范围。</p><ul><li>数学函数主要用于处理数字。这类函数包括绝对值函数、正弦函数、余弦函数和获得随机数的函数等。</li><li>字符串函数主要用于处理字符串。其中包括字符串连接函数、字符串比较函数、将字符串的字母都变成小写或大写字母的函数和获取子串的函数等。</li><li>日期和时间函数主要用于处理日期和时间。其中包括获取当前时间的函数、获取当前日期的函数、返回年份的函数和返回日期的函数等。</li><li>条件判断函数主要用于在 SQL 语句中控制条件选择。其中包括 <code>IF</code> 语句、<code>CASE</code> 语句和 <code>WHERE</code> 语句等。</li><li>系统信息函数主要用于获取 MySQL 数据库的系统信息。其中包括获取数据库名的函数、获取当前用户的函数和获取数据库版本的函数等。</li><li>加密函数主要用于对字符串进行加密解密。其中包括字符串加密函数和字符串解密函数等。</li><li>其他函数主要包括格式化函数和锁函数等。</li></ul><h4 id="数学函数" tabindex="-1"><a class="header-anchor" href="#数学函数" aria-hidden="true">#</a> 数学函数</h4><table><thead><tr><th style="text-align:center;"><strong>函数名称</strong></th><th style="text-align:center;"><strong>作 用</strong></th></tr></thead><tbody><tr><td style="text-align:center;">ABS</td><td style="text-align:center;">求绝对值</td></tr><tr><td style="text-align:center;">SQRT</td><td style="text-align:center;">求二次方根</td></tr><tr><td style="text-align:center;">MOD</td><td style="text-align:center;">求余数</td></tr><tr><td style="text-align:center;">CEIL 和 CEILING</td><td style="text-align:center;">两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td></tr><tr><td style="text-align:center;">FLOOR</td><td style="text-align:center;">向下取整，返回值转化为一个 BIGINT</td></tr><tr><td style="text-align:center;">RAND</td><td style="text-align:center;">生成一个 0~1 之间的随机数，传入整数参数是，用来产生重复序列</td></tr><tr><td style="text-align:center;">ROUND</td><td style="text-align:center;">对所传参数进行四舍五入</td></tr><tr><td style="text-align:center;">SIGN</td><td style="text-align:center;">返回参数的符号</td></tr><tr><td style="text-align:center;">POW 和 POWER</td><td style="text-align:center;">两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td style="text-align:center;">SIN</td><td style="text-align:center;">求正弦值</td></tr><tr><td style="text-align:center;">ASIN</td><td style="text-align:center;">求反正弦值，与函数 SIN 互为反函数</td></tr><tr><td style="text-align:center;">COS</td><td style="text-align:center;">求余弦值</td></tr><tr><td style="text-align:center;">ACOS</td><td style="text-align:center;">求反余弦值，与函数 COS 互为反函数</td></tr><tr><td style="text-align:center;">TAN</td><td style="text-align:center;">求正切值</td></tr><tr><td style="text-align:center;">ATAN</td><td style="text-align:center;">求反正切值，与函数 TAN 互为反函数</td></tr><tr><td style="text-align:center;">COT</td><td style="text-align:center;">求余切值</td></tr></tbody></table><h4 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数" aria-hidden="true">#</a> 字符串函数</h4><table><thead><tr><th style="text-align:center;"><strong>函数名称</strong></th><th style="text-align:center;"><strong>作 用</strong></th></tr></thead><tbody><tr><td style="text-align:center;">LENGTH</td><td style="text-align:center;">计算字符串长度函数，返回字符串的字节长度</td></tr><tr><td style="text-align:center;">CONCAT</td><td style="text-align:center;">合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td></tr><tr><td style="text-align:center;">INSERT</td><td style="text-align:center;">替换字符串函数</td></tr><tr><td style="text-align:center;">LOWER</td><td style="text-align:center;">将字符串中的字母转换为小写</td></tr><tr><td style="text-align:center;">UPPER</td><td style="text-align:center;">将字符串中的字母转换为大写</td></tr><tr><td style="text-align:center;">LEFT</td><td style="text-align:center;">从左侧字截取符串，返回字符串左边的若干个字符</td></tr><tr><td style="text-align:center;">RIGHT</td><td style="text-align:center;">从右侧字截取符串，返回字符串右边的若干个字符</td></tr><tr><td style="text-align:center;">TRIM</td><td style="text-align:center;">删除字符串左右两侧的空格</td></tr><tr><td style="text-align:center;">REPLACE</td><td style="text-align:center;">字符串替换函数，返回替换后的新字符串</td></tr><tr><td style="text-align:center;">SUBSTRING</td><td style="text-align:center;">截取字符串，返回从指定位置开始的指定长度的字符换</td></tr></tbody></table><h4 id="日期和时间函数" tabindex="-1"><a class="header-anchor" href="#日期和时间函数" aria-hidden="true">#</a> 日期和时间函数</h4><table><thead><tr><th style="text-align:center;"><strong>函数名称</strong></th><th style="text-align:center;"><strong>作 用</strong></th></tr></thead><tbody><tr><td style="text-align:center;">CURDATE 和 CURRENT_DATE</td><td style="text-align:center;">两个函数作用相同，返回当前系统的日期值</td></tr><tr><td style="text-align:center;">CURTIME 和 CURRENT_TIME</td><td style="text-align:center;">两个函数作用相同，返回当前系统的时间值</td></tr><tr><td style="text-align:center;">NOW 和 SYSDATE</td><td style="text-align:center;">两个函数作用相同，返回当前系统的日期和时间值</td></tr><tr><td style="text-align:center;">UNIX_TIMESTAMP</td><td style="text-align:center;">获取 UNIX 时间戳函数，返回一个以 UNIX 时间戳为基础的无符号整数</td></tr><tr><td style="text-align:center;">FROM_UNIXTIME</td><td style="text-align:center;">将 UNIX 时间戳转换为时间格式，与 UNIX_TIMESTAMP 互为反函数</td></tr><tr><td style="text-align:center;">MONTH</td><td style="text-align:center;">获取指定日期中的月份</td></tr><tr><td style="text-align:center;">MONTHNAME</td><td style="text-align:center;">获取指定日期中的月份英文名称</td></tr><tr><td style="text-align:center;">DAYNAME</td><td style="text-align:center;">获取指定曰期对应的星期几的英文名称</td></tr><tr><td style="text-align:center;">DAYOFWEEK</td><td style="text-align:center;">获取指定日期对应的一周的索引位置值</td></tr><tr><td style="text-align:center;">WEEK</td><td style="text-align:center;">获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td></tr><tr><td style="text-align:center;">DAYOFYEAR</td><td style="text-align:center;">获取指定曰期是一年中的第几天，返回值范围是 1~366</td></tr><tr><td style="text-align:center;">DAYOFMONTH</td><td style="text-align:center;">获取指定日期是一个月中是第几天，返回值范围是 1~31</td></tr><tr><td style="text-align:center;">YEAR</td><td style="text-align:center;">获取年份，返回值范围是 1970〜2069</td></tr><tr><td style="text-align:center;">TIME_TO_SEC</td><td style="text-align:center;">将时间参数转换为秒数</td></tr><tr><td style="text-align:center;">SEC_TO_TIME</td><td style="text-align:center;">将秒数转换为时间，与 TIME_TO_SEC 互为反函数</td></tr><tr><td style="text-align:center;">DATE_ADD 和 ADDDATE</td><td style="text-align:center;">两个函数功能相同，都是向日期添加指定的时间间隔</td></tr><tr><td style="text-align:center;">DATE_SUB 和 SUBDATE</td><td style="text-align:center;">两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td style="text-align:center;">ADDTIME</td><td style="text-align:center;">时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td style="text-align:center;">SUBTIME</td><td style="text-align:center;">时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td style="text-align:center;">DATEDIFF</td><td style="text-align:center;">获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td style="text-align:center;">DATE_FORMAT</td><td style="text-align:center;">格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td style="text-align:center;">WEEKDAY</td><td style="text-align:center;">获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><p>MySQL 中 <code>DATE_FORMAT(date，format)</code>函数是根据 <code>format</code> 指定的格式显示 <code>date</code> 值。</p><p><code>DATE_FORMAT()</code> 函数接受两个参数：</p><ul><li><code>date</code>：是要格式化的有效日期值</li><li><code>format</code>：是由预定义的说明符组成的格式字符串，每个说明符前面都有一个百分比字符(%)。</li></ul><p>主要的 <code>format</code> 格式如下表所示。</p><table><thead><tr><th style="text-align:center;"><strong>说明符</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;">%a</td><td style="text-align:center;">工作日的缩写名称（Sun~Sat)</td></tr><tr><td style="text-align:center;">%b</td><td style="text-align:center;">月份的缩写名称（Jan…Dec)</td></tr><tr><td style="text-align:center;">%c</td><td style="text-align:center;">月份，数字形式（0~12)</td></tr><tr><td style="text-align:center;">%D</td><td style="text-align:center;">带有英语后缀的该月日期(0th, 2st, 3nd,…）</td></tr><tr><td style="text-align:center;">%d</td><td style="text-align:center;">该月日期，数字形式（00~31)</td></tr><tr><td style="text-align:center;">%e</td><td style="text-align:center;">该月日期，数字形式（(0~31)</td></tr><tr><td style="text-align:center;">%f</td><td style="text-align:center;">微秒（000000 …999999)</td></tr><tr><td style="text-align:center;">%H</td><td style="text-align:center;">以 2 位数表示 24 小时（00~23)</td></tr><tr><td style="text-align:center;">%h, %I</td><td style="text-align:center;">以 2 位数表示 12 小时（01~12)</td></tr><tr><td style="text-align:center;">%i</td><td style="text-align:center;">分钟，数字形式(00~59)</td></tr><tr><td style="text-align:center;">%j</td><td style="text-align:center;">—年中的天数（001~366)</td></tr><tr><td style="text-align:center;">%k</td><td style="text-align:center;">以 24 小时（0~23)表示</td></tr><tr><td style="text-align:center;">%l</td><td style="text-align:center;">以 12 小时（1~12)表示</td></tr><tr><td style="text-align:center;">%M</td><td style="text-align:center;">月份名称（January~December)</td></tr><tr><td style="text-align:center;">%m</td><td style="text-align:center;">月份，数字形式（00~12)</td></tr><tr><td style="text-align:center;">%p</td><td style="text-align:center;">上午（AM) 或下午（PM)</td></tr><tr><td style="text-align:center;">%r</td><td style="text-align:center;">时间，12 小时制（小时 (hh): 分钟 (mm) : 秒数 (ss) 后加 AM 或 PM)</td></tr><tr><td style="text-align:center;">%S, %s</td><td style="text-align:center;">以 2 位数形式表示秒（00~59)</td></tr><tr><td style="text-align:center;">%T</td><td style="text-align:center;">时间，24 小时制（小时 (hh): 分钟 (mm): 秒数 (ss))</td></tr><tr><td style="text-align:center;">%U</td><td style="text-align:center;">周（00~53)，其中周日为每周的第一天</td></tr><tr><td style="text-align:center;">%u</td><td style="text-align:center;">周（00~53)，其中周一为每周的第一天</td></tr><tr><td style="text-align:center;">%V</td><td style="text-align:center;">周（01~53)，其中周日为每周的第一天，和％X 同时使用</td></tr><tr><td style="text-align:center;">%v</td><td style="text-align:center;">周（01~53)，其中周一为每周的第一天，和%x 同时使用</td></tr><tr><td style="text-align:center;">%W</td><td style="text-align:center;">星期标识（周日、周一、周二…周六）</td></tr><tr><td style="text-align:center;">%w</td><td style="text-align:center;">—周中的每日（0= 周日…6= 周六）</td></tr><tr><td style="text-align:center;">%X</td><td style="text-align:center;">该周的年份，其中周日为每周的第一天，数字形式，4 位数，和％V 同时使用</td></tr><tr><td style="text-align:center;">%x</td><td style="text-align:center;">该周的年份，其中周一为每周的第一天，数字形式，4 位数，和%v 同时使用</td></tr><tr><td style="text-align:center;">%Y</td><td style="text-align:center;">4 位数形式表示年份</td></tr><tr><td style="text-align:center;">%y</td><td style="text-align:center;">2 位数形式表示年份</td></tr><tr><td style="text-align:center;">%%</td><td style="text-align:center;">%一个文字字符</td></tr></tbody></table><h4 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h4><table><thead><tr><th style="text-align:center;"><strong>函数名称</strong></th><th style="text-align:center;"><strong>作 用</strong></th></tr></thead><tbody><tr><td style="text-align:center;">MAX</td><td style="text-align:center;">查询指定列的最大值</td></tr><tr><td style="text-align:center;">MIN</td><td style="text-align:center;">查询指定列的最小值</td></tr><tr><td style="text-align:center;">COUNT</td><td style="text-align:center;">统计查询结果的行数</td></tr><tr><td style="text-align:center;">SUM</td><td style="text-align:center;">求和，返回指定列的总和</td></tr><tr><td style="text-align:center;">AVG</td><td style="text-align:center;">求平均值，返回指定列数据的平均值</td></tr></tbody></table><h4 id="流程控制函数" tabindex="-1"><a class="header-anchor" href="#流程控制函数" aria-hidden="true">#</a> 流程控制函数</h4><table><thead><tr><th style="text-align:center;"><strong>函数名称</strong></th><th style="text-align:center;"><strong>作 用</strong></th></tr></thead><tbody><tr><td style="text-align:center;">IF</td><td style="text-align:center;">判断，流程控制</td></tr><tr><td style="text-align:center;">IFNULL</td><td style="text-align:center;">判断是否为空</td></tr><tr><td style="text-align:center;">CASE</td><td style="text-align:center;">搜索语句</td></tr></tbody></table><p>MySQL <code>IF</code> 语句允许您根据表达式的某个条件或值结果来执行一组 SQL 语句。</p><p>要在 MySQL 中形成一个表达式，可以结合文字，变量，运算符，甚至函数来组合。表达式可以返回 <code>TRUE</code>,<code>FALSE</code> 或 <code>NULL</code>，这三个值之一。</p><p>语法结构如下：</p><blockquote><p>IF(expr,v1,v2)</p></blockquote><p>其中：表达式 expr 得到不同的结果，当 expr 为真是返回 v1 的值，否则返回 v2。</p><p>MySQL <code>IFNULL</code> 函数是 MySQL 控制流函数之一，它接受两个参数，如果不是 <code>NULL</code>，则返回第一个参数。否则，<code>IFNULL</code> 函数返回第二个参数。两个参数可以是文字值或表达式。</p><p>函数的语法：</p><blockquote><p>IFNULL(v1,v2)</p></blockquote><p>其中：如果 v1 不为 <code>NULL</code>，则 <code>IFNULL</code> 函数返回 v1; 否则返回 v2 的结果。</p><h3 id="单表查询" tabindex="-1"><a class="header-anchor" href="#单表查询" aria-hidden="true">#</a> 单表查询</h3><p>在 MySQL 中，可以使用 <code>SELECT</code> 语句来查询数据。查询数据是指从数据库中根据需求，使用不同的查询方式来获取不同的数据，是使用频率最高、最重要的操作。</p><p>SELECT 的语法格式如下：</p><blockquote><p>SELECT { * | &lt;字段列名&gt;} [FROM &lt;表 1&gt;, &lt;表 2&gt;… [WHERE &lt;表达式&gt; [GROUP BY <code>&lt;group by definition&gt;</code> [HAVING <code>&lt;expression&gt;</code> [{<code>&lt;operator&gt; &lt;expression&gt;</code>}…]] [ORDER BY <code>&lt;order by definition&gt;</code>] [LIMIT[<code>&lt;offset&gt;</code>,] <code>&lt;row count&gt;</code>] ]</p></blockquote><p>其中，各条子句的含义如下：</p><ul><li><code>{*|&lt;字段列名&gt;}</code>包含星号通配符的字段列表，表示所要查询字段的名称。</li><li><code>&lt;表 1&gt;，&lt;表 2&gt;…</code>，表 1 和表 2 表示查询数据的来源，可以是单个或多个。</li><li><code>WHERE &lt;表达式&gt;</code>是可选项，如果选择该项，将限定查询数据必须满足该查询条件。</li><li><code>GROUP BY &lt;字段&gt;</code>，该子句告诉 MySQL 如何显示查询出来的数据，并按照指定的字段分组。</li><li><code>[ORDER BY&lt;字段&gt;]</code>，该子句告诉 MySQL 按什么样的顺序显示查询出来的数据，可以进行的排序有升序（ASC）和降序（DESC），默认情况下是升序。</li><li><code>[LIMIT[&lt;offset&gt;,] &lt;row count&gt;]</code>，该子句告诉 MySQL 每次显示查询出来的数据条数。</li></ul><h4 id="条件查询数据" tabindex="-1"><a class="header-anchor" href="#条件查询数据" aria-hidden="true">#</a> 条件查询数据</h4><p>在 MySQL 中，如果需要有条件的从数据表中查询数据，可以使用 WHERE 关键字来指定查询条件。</p><p>使用 WHERE 关键字的语法格式如下：</p><blockquote><p>WHERE 查询条件</p></blockquote><p>查询条件可以是：</p><ul><li>带比较运算符和逻辑运算符的查询条件</li><li>带 <code>BETWEEN AND</code> 关键字的查询条件</li><li>带 <code>IS NULL</code> 关键字的查询条件</li><li>带 <code>IN</code> 关键字的查询条件</li><li>带 <code>LIKE</code> 关键字的查询条件</li></ul><ol><li><p>单一条件的查询语句</p><p>单一条件指的是在 <code>WHERE</code> 关键字后只有一个查询条件。</p></li><li><p>多条件的查询语句</p><p>在 <code>WHERE</code> 关键词后可以有多个查询条件，这样能够使查询结果更加精确。多个查询条件时用逻辑运算符 <code>AND</code>（<code>&amp;&amp;</code>）、<code>OR</code>（<code>||</code>）或 <code>XOR</code> 隔开。</p><ul><li><code>AND</code>：记录满足所有查询条件时，才会被查询出来。</li><li><code>OR</code>：记录满足任意一个查询条件时，才会被查询出来。</li><li><code>XOR</code>：记录满足其中一个条件，并且不满足另一个条件时，才会被查询出来。</li></ul><p><code>OR</code>、<code>AND</code> 和 <code>XOR</code> 可以一起使用，但是在使用时要注意运算符的优先级。</p><p>查询条件越多，查询出来的记录就会越少。因为，设置的条件越多，查询语句的限制就更多，能够满足所有条件的记录就更少。为了使查询出来的记录正是自己想要的，可以在 <code>WHERE</code> 语句中将查询条件设置的更加具体。</p></li><li><p>范围查询</p><p>MySQL 提供了 <code>BETWEEN AND</code> 关键字，用来判断字段的数值是否在指定范围内。</p><p><code>BETWEEN AND</code> 需要两个参数，即范围的起始值和终止值。如果字段值在指定的范围内，则这些记录被返回。如果不在指定范围内，则不会被返回。</p><p>使用 BETWEEN AND 的基本语法格式如下：</p><blockquote><p>[NOT] BETWEEN 取值 1 AND 取值 2</p></blockquote><p>其中：</p><ul><li><p>NOT：可选参数，表示指定范围之外的值。如果字段值不满足指定范围内的值，则这些记录被返回。</p></li><li><p>取值 1：表示范围的起始值。</p></li><li><p>取值 2：表示范围的终止值。</p></li></ul><p>BETWEEN AND 和 NOT BETWEEN AND 关键字在查询指定范围内的记录时很有用。例如，查询学生的年龄段、出生日期，员工的工资水平等。</p><p>在 MySQL 中，BETWEEN AND 能匹配指定范围内的所有值，包括起始值和终止值。</p></li><li><p>空值查询</p><p>MySQL 提供了 IS NULL 关键字，用来判断字段的值是否为空值（NULL）。空值不同于 0，也不同于空字符串。</p><p>如果字段的值是空值，则满足查询条件，该记录将被查询出来。如果字段的值不是空值，则不满足查询条件。</p><p>使用 IS NULL 的基本语法格式如下：</p><blockquote><p>IS [NOT] NULL</p></blockquote><p>其中，<code>NOT</code>是可选参数，表示字段值不是空值时满足条件。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>IS NULL</code> 是一个整体，不能将 <code>IS</code> 换成<code>=</code>。如果将 <code>IS</code> 换成<code>=</code>将不能查询出任何结果，数据库系统会出现<code>Empty set(0.00 sec)</code>这样的提示。</p><p>同理，<code>IS NOT NULL</code> 中的 <code>IS NOT</code> 不能换成<code>!=</code>或<code>&lt;&gt;</code>。</p></div><p><code>IS NOT NULL</code> 表示查询字段值不为空的记录。</p></li><li><p><code>IN</code> 和 <code>NOT IN</code> 用法详解</p><p>MySQL 中的 <code>IN</code> 运算符用来判断表达式的值是否位于给出的列表中；如果是，返回值为 1，否则返回值为 0。<br><code>NOT IN</code> 的作用和 <code>IN</code> 恰好相反，<code>NOT IN</code> 用来判断表达式的值是否不存在于给出的列表中；如果不是，返回值为 1，否则返回值为 0。<br><code>IN</code> 和 <code>NOT IN</code> 的语法格式如下：</p><blockquote><p>expr IN ( value1, value2, value3 ... valueN ) expr NOT IN ( value1, value2, value3 ... valueN )</p></blockquote><p>expr 表示要判断的表达式，value1, value2, value3 ... valueN 表示列表中的值。MySQL 会将 expr 的值和列表中的值逐一对比。</p></li></ol><h4 id="对空值-null-的处理" tabindex="-1"><a class="header-anchor" href="#对空值-null-的处理" aria-hidden="true">#</a> 对空值 NULL 的处理</h4><p>当 <code>IN</code> 运算符的两侧有一个为空值 <code>NULL</code> 时，如果找不到匹配项，则返回值为 NULL；如果找到了匹配项，则返回值为 1。</p><p><code>NOT IN</code> 恰好相反，当 <code>NOT IN</code> 运算符的两侧有一个为空值 <code>NULL</code> 时，如果找不到匹配项，则返回值为 <code>NULL</code>；如果找到了匹配项，则返回值为 0。</p><h4 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h4><p>在 MySQL 中，LIKE 关键字主要用于搜索匹配字段中的指定内容。其语法格式如下：</p><blockquote><p>[NOT] LIKE &#39;字符串&#39;</p></blockquote><p>其中：</p><ul><li><p><code>NOT</code>：可选参数，字段中的内容与指定的字符串不匹配时满足条件。</p></li><li><p>字符串：指定用来匹配的字符串。“字符串”可以是一个很完整的字符串，也可以包含通配符。</p><p><code>LIKE</code> 关键字支持百分号<code>%</code>和下划线<code>_</code>通配符。</p><p>通配符是一种特殊语句，主要用来模糊查询。当不知道真正字符或者懒得输入完整名称时，可以使用通配符来代替一个或多个真正的字符。</p></li></ul><ol><li><p>带有<code>%</code>通配符的查询</p><p><code>%</code>是 MySQL 中最常用的通配符，它能代表任何长度的字符串，字符串的长度可以为 0。例如，a%b 表示以字母 a 开头，以字母 b 结尾的任意长度的字符串。该字符串可以代表 ab、acb、accb、accrb 等字符串。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>匹配的字符串必须加单引号或双引号。</p></div></li><li><p>带有<code>_</code>通配符的查询</p><p><code>_</code>只能代表单个字符，字符的长度不能为 0。例如，a_b 可以代表 acb、adb、aub 等字符串。</p></li><li><p><code>LIKE</code> 区分大小写</p><p>默认情况下，<code>LIKE</code> 关键字匹配字符的时候是不区分大小写的。如果需要区分大小写，可以加入 <code>BINARY</code> 关键字。</p></li></ol><p><code>NOT LIKE</code> 表示字符串不匹配时满足条件。</p><h4 id="使用通配符的注意事项和技巧" tabindex="-1"><a class="header-anchor" href="#使用通配符的注意事项和技巧" aria-hidden="true">#</a> 使用通配符的注意事项和技巧</h4><p>下面是使用通配符的一些注意事项：</p><ul><li><p><strong>注意大小写</strong>。MySQL 默认是不区分大小写的。如果区分大小写，像<code>Tom</code>这样的数据就不能被&quot;t%&quot;所匹配到。</p></li><li><p><strong>注意尾部空格</strong>，尾部空格会干扰通配符的匹配。例如，&quot;T% &quot;就不能匹配到<code>Tom</code>。</p></li><li><p><strong>注意 NULL</strong>。<code>%</code>通配符可以到匹配任意字符，但是不能匹配 <code>NULL</code>。也就是说 <code>%</code>匹配不到 <code>tb_students_info</code> 数据表中值为 <code>NULL</code> 的记录。</p></li></ul><p>下面是一些使用通配符要记住的技巧。</p><ul><li><p>不要过度使用通配符，如果其它操作符能达到相同的目的，应该使用其它操作符。因为 MySQL 对通配符的处理一般会比其他操作符花费更长的时间。</p></li><li><p>在确定使用通配符后，除非绝对有必要，否则不要把它们用在字符串的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</p></li><li><p>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</p></li></ul><p>如果查询内容中包含通配符，可以使用<code>\\</code>转义符。</p><h4 id="对查询结果排序" tabindex="-1"><a class="header-anchor" href="#对查询结果排序" aria-hidden="true">#</a> 对查询结果排序</h4><p>通过条件查询语句可以查询到符合用户需求的数据，但是查询到的数据一般都是按照数据最初被添加到表中的顺序来显示。为了使查询结果的顺序满足用户的要求，MySQL 提供了 ORDER BY 关键字来对查询结果进行排序。</p><p>在实际应用中经常需要对查询结果进行排序，比如，在网上购物时，可以将商品按照价格进行排序；在医院的挂号系统中，可以按照挂号的先后顺序进行排序等。</p><p><code>ORDER BY</code> 关键字主要用来将查询结果中的数据按照一定的顺序进行排序。其语法格式如下：</p><blockquote><p>ORDER BY &lt;字段名&gt; [ASC|DESC]</p></blockquote><p>语法说明如下。</p><ul><li><code>&lt;字段名&gt;</code>：表示需要排序的字段名称，多个字段时用逗号隔开。</li><li><code>ASC|DESC</code>：<code>ASC</code> 表示字段按升序排序；<code>DESC</code> 表示字段按降序排序。其中 <code>ASC</code> 为默认值。</li></ul><p>使用 <code>ORDER BY</code> 关键字应该注意以下几个方面：</p><ul><li><code>ORDER BY</code> 关键字后可以跟子查询。</li><li>当排序的字段中存在空值时，<code>ORDER BY</code> 会将该空值作为最小值来对待。</li><li><code>ORDER BY</code> 指定多个字段进行排序时，MySQL 会按照字段的顺序从左到右依次进行排序。</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在对多个字段进行排序时，排序的第一个字段必须有相同的值，才会对第二个字段进行排序。如果第一个字段数据中所有的值都是唯一的，MySQL 将不再对第二个字段进行排序。</p><p>当使用 <code>ROLLUP</code> 时，不能同时使用 <code>ORDER BY</code> 子句进行结果排序。</p></div><h4 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询" aria-hidden="true">#</a> 分组查询</h4><p>在 MySQL 中，<code>GROUP BY</code> 关键字可以根据一个或多个字段对查询结果进行分组。</p><p>使用 <code>GROUP BY</code> 关键字的语法格式如下：</p><blockquote><p>GROUP BY &lt;字段名&gt;</p></blockquote><p>其中，<code>字段名</code>表示需要分组的字段名称，多个字段时用逗号隔开。</p><ol><li><p><code>GROUP BY</code> 单独使用</p><p>单独使用 <code>GROUP BY</code> 关键字时，查询结果会只显示每个分组的第一条记录。</p></li><li><p><code>GROUP BY</code> 与 <code>GROUP_CONCAT()</code></p><p><code>GROUP BY</code> 关键字可以和 <code>GROUP_CONCAT()</code> 函数一起使用。<code>GROUP_CONCAT()</code> 函数会把每个分组的字段值都显示出来。</p></li></ol><p>示例：</p><p>下面根据 <code>student</code> 表中的 <code>stusex</code> 字段进行分组查询，使用 <code>GROUP_CONCAT()</code> 函数将每个分组的 <code>stuname</code> 字段的值都显示出来。SQL 语句和运行结果如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT stusex, *GROUP_CONCAT(*stuname*)
*FROM student
GROUP BY stusex;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261425827.png" alt="202208261425827"></p><ol><li><p><code>GROUP BY</code> 与聚合函数</p><p>在数据统计时，<code>GROUP BY</code> 关键字经常和聚合函数一起使用。</p><p>聚合函数包括 <code>COUNT()</code>，<code>SUM()</code>，<code>AVG()</code>，<code>MAX()</code> 和 <code>MIN()</code>。其中，<code>COUNT()</code> 用来统计记录的条数；<code>SUM()</code> 用来计算字段值的总和；<code>AVG()</code> 用来计算字段值的平均值；<code>MAX()</code> 用来查询字段的最大值；<code>MIN()</code> 用来查询字段的最小值。</p></li><li><p><code>GROUP BY</code> 与 <code>WITH ROLLUP</code></p></li></ol><p><code>WITH POLLUP</code> 关键字用来在所有记录的最后加上一条记录，这条记录是上面所有记录的总和，即统计记录数量。</p><p>示例：</p><p>下面根据 <code>student</code> 表中的 <code>stusex</code> 字段进行分组查询，并使用 <code>WITH ROLLUP</code> 显示记录的总和。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT stusex, *GROUP_CONCAT(*stuname*)
*FROM student
GROUP BY stusex
WITH ROLLUP;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261345590.png" alt="202208261345590"></p><h4 id="过滤分组" tabindex="-1"><a class="header-anchor" href="#过滤分组" aria-hidden="true">#</a> 过滤分组</h4><p>在 MySQL 中，可以使用 <code>HAVING</code> 关键字对分组后的数据进行过滤。</p><p>使用 <code>HAVING</code> 关键字的语法格式如下：</p><blockquote><p>HAVING &lt;查询条件&gt;</p></blockquote><p><code>HAVING</code> 关键字和 <code>WHERE</code> 关键字都可以用来过滤数据，且 <code>HAVING</code> 支持 <code>WHERE</code> 关键字中所有的操作符和语法。</p><p>但是 <code>WHERE</code> 和 <code>HAVING</code> 关键字也存在以下几点差异：</p><ul><li>一般情况下，<code>WHERE</code> 用于过滤数据行，而 <code>HAVING</code> 用于过滤分组。</li><li><code>WHERE</code> 查询条件中不可以使用聚合函数，而 <code>HAVING</code> 查询条件中可以使用聚合函数。</li><li><code>WHERE</code> 在数据分组前进行过滤，而 <code>HAVING</code> 在数据分组后进行过滤 。</li><li><code>WHERE</code> 针对数据库文件进行过滤，而 <code>HAVING</code> 针对查询结果进行过滤。也就是说，<code>WHERE</code> 根据数据表中的字段直接进行过滤，而 <code>HAVING</code> 是根据前面已经查询出的字段进行过滤。</li><li><code>WHERE</code> 查询条件中不可以使用字段别名，而 <code>HAVING</code> 查询条件中可以使用字段别名。</li></ul><h4 id="限制查询结果的条数" tabindex="-1"><a class="header-anchor" href="#限制查询结果的条数" aria-hidden="true">#</a> 限制查询结果的条数</h4><p>当数据表中有上万条数据时，一次性查询出表中的全部数据会降低数据返回的速度，同时给数据库服务器造成很大的压力。这时就可以用 <code>LIMIT</code> 关键字来限制查询结果返回的条数。</p><p><code>LIMIT</code> 是 MySQL 中的一个特殊关键字，用于指定查询结果从哪条记录开始显示，一共显示多少条记录。</p><p><code>LIMIT</code> 关键字有 3 种使用方式，即指定初始位置、不指定初始位置以及与 <code>OFFSET</code> 组合使用。</p><ol><li><p>指定初始位置</p><p><code>LIMIT</code> 关键字可以指定查询结果从哪条记录开始显示，显示多少条记录。</p><p><code>LIMIT</code> 指定初始位置的基本语法格式如下：</p><blockquote><p>LIMIT 初始位置，记录数</p></blockquote><p>其中，<code>初始位置</code>表示从哪条记录开始显示；<code>记录数</code>表示显示记录的条数。第一条记录的位置是 0，第二条记录的位置是 1。后面的记录依次类推。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>LIMIT</code> 后的两个参数必须都是正整数。</p></div><p>分页公式：</p><p>每页显示 <code>pagsize</code> 条记录:</p><blockquote><p>第 pageno 页:(pageno - 1) * pagesize,pagesize</p></blockquote><p><code>pagesize</code>：每页显示多少条记录</p><p><code>pageno</code>：第几页</p></li><li><p>不指定初始位置</p><p><code>LIMIT</code> 关键字不指定初始位置时，记录从第一条记录开始显示。显示记录的条数由 <code>LIMIT</code> 关键字指定。</p><p><code>LIMIT</code> 不指定初始位置的基本语法格式如下：</p><blockquote><p>LIMIT 记录数</p></blockquote><p>其中，<code>记录数</code>表示显示记录的条数。如果<code>记录数</code>的值小于查询结果的总数，则会从第一条记录开始，显示指定条数的记录。如果<code>记录数</code>的值大于查询结果的总数，则会直接显示查询出来的所有记录。</p></li></ol><p>带一个参数的 <code>LIMIT</code> 指定从查询结果的首行开始，唯一的参数表示返回的行数，即<code>LIMIT n</code>与<code>LIMIT 0，n</code>返回结果相同。带两个参数的 <code>LIMIT</code> 可返回从任何位置开始指定行数的数据。</p><h4 id="limit-和-offset-组合使用" tabindex="-1"><a class="header-anchor" href="#limit-和-offset-组合使用" aria-hidden="true">#</a> LIMIT 和 OFFSET 组合使用</h4><p><code>LIMIT</code> 可以和 <code>OFFSET</code> 组合使用，语法格式如下：</p><blockquote><p>LIMIT 记录数 OFFSET 初始位置</p></blockquote><p>参数和 <code>LIMIT</code> 语法中参数含义相同，<code>初始位置</code>指定从哪条记录开始显示；<code>记录数</code>表示显示记录的条数。</p><h3 id="使用聚合函数查询" tabindex="-1"><a class="header-anchor" href="#使用聚合函数查询" aria-hidden="true">#</a> 使用聚合函数查询</h3><p>有时候不需要返回实际表中的数据，而只是对数据进行总结。</p><p>常用的聚合函数有：计数 <code>COUNT()</code>、求平均值 <code>AVG()</code>、求最大值 <code>MAX()</code>、求最小值 <code>MIN()</code>、求和 <code>SUM()</code>。</p><ol><li><p><code>COUNT</code> 函数：统计查询结果的行数</p><p>MySQL <code>COUNT()</code> 函数统计数据表中包含的记录行的总数，或者根据查询结果返回列中包含的数据行数，使用方法有以下两种：</p><ul><li><code>COUNT(*)</code> 计算表中总的行数，无论某列有数值或者为空值。</li><li><code>COUNT(字段名)</code>计算指定列下总的行数，计算时将忽略空值的行。</li></ul></li><li><p><code>SUM</code> 函数：求和</p><p>MySQL <code>SUM()</code>是一个求总和的函数，返回指定列值的总和。</p><p><code>SUM()</code> 函数是如何工作的？</p><ul><li>如果在没有返回匹配行 <code>SELECT</code> 语句中使用 <code>SUM</code> 函数，则 <code>SUM</code> 函数返回 <code>NULL</code>，而不是 0。</li><li><code>DISTINCT</code> 运算符允许计算集合中的不同值。</li><li><code>SUM</code> 函数忽略计算中的 NULL 值。</li></ul></li><li><p><code>AVG</code> 函数：求平均值</p><p>MySQL <code>AVG()</code>函数通过计算返回的行数和每一行数据的和，求得指定列数据的平均值。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>使用 <code>AVG()</code> 函数时，参数为要计算的列名称，若要得到多个列的平均值，则需要在每一列都使用 <code>AVG()</code> 函数。</p></div></li><li><p><code>MAX</code> 函数：查询指定列的最大值</p><p>MySQL <code>MAX()</code>函数是用来返回指定列中的最大值。</p><p><code>MAX()</code> 函数不仅适用于查找数值类型，也可应用于字符类型 <code>MAX()</code> 函数可以对字母进行大小判断，并返回最大的字符或者字符串值。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>MAX()</code>函数还可以返回任意列中的最大值，包括返回字符类型的最大值。在对字符类型的数据进行比较时，按照字符的 ASCII 码值大小进行比较，从 a ～ z，a 的 ASCII 码最小，z 的最大。在比较时，先比较第一个字符，如果相等，继续比较下一个字符，一直到两个字符不相等或者字符结束为止。例如，b 与 t 比较时，t 为最大值；bcd 与 bca 比较时，bcd 为最大值。</p></div></li><li><p><code>MIN</code> 函数：查询指定列的最小值</p><p>MySQL <code>MIN()</code>函数是用来返回查询列中的最小值。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>MIN()</code> 函数与 <code>MAX()</code> 函数类似，不仅适用于查找数值类型，也可应用于字符类型。</p></div></li></ol><h3 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询" aria-hidden="true">#</a> 连接查询</h3><h4 id="inner-join-内连接" tabindex="-1"><a class="header-anchor" href="#inner-join-内连接" aria-hidden="true">#</a> INNER JOIN：内连接</h4><p>内连接（<code>INNER JOIN</code>）主要通过设置连接条件的方式，来移除查询结果中某些数据行的交叉连接。简单来说，就是利用条件表达式来消除交叉连接的某些数据行。</p><p>内连接使用 <code>INNER JOIN</code> 关键字连接两张表，并使用 <code>ON</code> 子句来设置连接条件。如果没有连接条件，<code>INNER JOIN</code> 和 <code>CROSS JOIN</code>（交叉连接）在语法上是等同的，两者可以互换。</p><p>内连接的语法格式如下：</p><blockquote><p>SELECT &lt;字段名&gt; FROM &lt;表 1&gt; INNER JOIN &lt;表 2&gt; [ON 子句]</p></blockquote><p>语法说明如下。</p><ul><li><p><code>&lt;</code>字段名&gt;\`：需要查询的字段名称。</p></li><li><p><code>&lt;表 1&gt;&lt;表 2&gt;</code>：需要内连接的表名。</p></li><li><p><code>INNER JOIN</code> ：内连接中可以省略 INNER 关键字，只用关键字 JOIN。</p></li><li><p><code>ON</code> 子句：用来设置内连接的连接条件。</p><p><code>INNER JOIN</code> 也可以使用 <code>WHERE</code> 子句指定连接条件，但是 <code>INNER JOIN ... ON</code> 语法是官方的标准写法，而且 <code>WHERE</code> 子句在某些时候会影响查询的性能。</p></li></ul><p>多个表内连接时，在 <code>FROM</code> 后连续使用 <code>INNER JOIN</code> 或 <code>JOIN</code> 即可。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>当对多个表进行查询时，要在 <code>SELECT</code> 语句后面指定字段是来源于哪一张表。因此，在多表查询时，<code>SELECT</code> 语句后面的写法是<code>表名.列名</code>。另外，如果表名非常长的话，也可以给表设置别名，这样就可以直接在 <code>SELECT</code> 语句后面写上表的<code>别名.列名</code>。</p></div><h4 id="外连接" tabindex="-1"><a class="header-anchor" href="#外连接" aria-hidden="true">#</a> 外连接</h4><p>外连接可以分为左外连接和右外连接，下面根据实例分别介绍左外连接和右外连接。</p><ul><li><p>左连接</p><p>左外连接又称为左连接，使用 <code>LEFT OUTER JOIN</code> 关键字连接两个表，并使用 <code>ON 子句</code>来设置连接条件。</p><p>左连接的语法格式如下：</p><blockquote><p>SELECT &lt;字段名&gt; FROM &lt;表 1&gt; LEFT OUTER JOIN &lt;表 2&gt; <code>&lt;ON 子句&gt;</code></p></blockquote><p>语法说明如下。</p><ul><li><p><code>&lt;字段名</code>：需要查询的字段名称。</p></li><li><p><code>&lt;表 1&gt;&lt;表 2&gt;</code>：需要左连接的表名。</p></li><li><p><code>LEFT OUTER JOIN</code>：左连接中可以省略 OUTER 关键字，只使用关键字 LEFT JOIN。</p></li><li><p><code>ON 子句</code>：用来设置左连接的连接条件，不能省略。</p></li></ul><p>上述语法中，“表 1”为基表，“表 2”为参考表。左连接查询时，可以查询出“表 1”中的所有记录和“表 2”中匹配连接条件的记录。如果“表 1”的某行在“表 2”中没有匹配行，那么在返回结果中，“表 2”的字段值均为空值（NULL）。</p></li><li><p>右连接</p><p>右外连接又称为右连接，右连接是左连接的反向连接。使用 <code>RIGHT OUTER JOIN</code> 关键字连接两个表，并使用 <code>ON 子句</code>来设置连接条件。</p><p>右连接的语法格式如下：</p><blockquote><p>SELECT &lt;字段名&gt; FROM &lt;表 1&gt; RIGHT OUTER JOIN &lt;表 2&gt; <code>&lt;ON 子句&gt;</code></p></blockquote><p>语法说明如下。</p><ul><li><p><code>&lt;字段名&gt;</code>：需要查询的字段名称。</p></li><li><p><code>&lt;表 1&gt;&lt;表 2&gt;</code>：需要右连接的表名。</p></li><li><p><code>RIGHT OUTER JOIN</code>：右连接中可以省略 <code>OUTER</code> 关键字，只使用关键字 <code>RIGHT JOIN</code>。</p></li><li><p><code>ON 子句</code>：用来设置右连接的连接条件，不能省略。</p></li></ul><p>与左连接相反，右连接以“表 2”为基表，“表 1”为参考表。右连接查询时，可以查询出“表 2”中的所有记录和“表 1”中匹配连接条件的记录。如果“表 2”的某行在“表 1”中没有匹配行，那么在返回结果中，“表 1”的字段值均为空值（NULL）。</p></li></ul><p>多个表左/右连接时，在<code>ON 子句</code>后连续使用 <code>LEFT/RIGHT OUTER JOIN</code> 或 <code>LEFT/RIGHT JOIN</code> 即可。</p><p>使用外连接查询时，一定要分清需要查询的结果，是需要显示左表的全部记录还是右表的全部记录，然后选择相应的左连接和右连接。</p><h4 id="交叉连接" tabindex="-1"><a class="header-anchor" href="#交叉连接" aria-hidden="true">#</a> 交叉连接</h4><p>交叉连接（<code>CROSS JOIN</code>）一般用来返回连接表的笛卡尔积。</p><p>交叉连接的语法格式如下：</p><blockquote><p>SELECT &lt;字段名&gt; FROM &lt;表 1&gt; CROSS JOIN &lt;表 2&gt; [WHERE 子句]</p></blockquote><p>或</p><blockquote><p>SELECT &lt;字段名&gt; FROM &lt;表 1&gt;, &lt;表 2&gt; [WHERE 子句]</p></blockquote><p>语法说明如下：</p><ul><li><p><code>&lt;字段名&gt;</code>：需要查询的字段名称。</p></li><li><p><code>&lt;表 1&gt;&lt;表 2&gt;</code>：需要交叉连接的表名。</p></li><li><p><code>WHERE 子句</code>：用来设置交叉连接的查询条件。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>多个表交叉连接时，在 <code>FROM</code> 后连续使用 <code>CROSS JOIN</code> 或,即可。以上两种语法的返回结果是相同的，但是第一种语法才是官方建议的标准写法。</p><p>当连接的表之间没有关系时，我们会省略掉 <code>WHERE</code> 子句，这时返回结果就是两个表的笛卡尔积，返回结果数量就是两个表的数据行相乘。需要注意的是，如果每个表有 1000 行，那么返回结果的数量就有 1000×1000 = 1000000 行，数据量是非常巨大的。</p><p>如果在交叉连接时使用 <code>WHERE</code> 子句，MySQL 会先生成两个表的笛卡尔积，然后再选择满足 <code>WHERE</code> 条件的记录。因此，表的数量较多时，交叉连接会非常非常慢。一般情况下不建议使用交叉连接。</p></div></li></ul><h4 id="笛卡尔积" tabindex="-1"><a class="header-anchor" href="#笛卡尔积" aria-hidden="true">#</a> 笛卡尔积</h4><p>笛卡尔积（Cartesian product）是指两个集合 X 和 Y 的乘积。</p><p>例如，有 A 和 B 两个集合，它们的值如下：</p><blockquote><p>A = {1,2} B = {3,4,5}</p></blockquote><p>集合 A×B 和 B×A 的结果集分别表示为：</p><blockquote><p>A×B={(1,3), (1,4), (1,5), (2,3), (2,4), (2,5) }; B×A={(3,1), (3,2), (4,1), (4,2), (5,1), (5,2) };</p></blockquote><p>以上 A×B 和 B×A 的结果就叫做两个集合的笛卡尔积。</p><p>并且，从以上结果我们可以看出：</p><p>两个集合相乘，不满足交换率，即 A×B≠B×A。</p><p>A 集合和 B 集合的笛卡尔积是 A 集合的元素个数 × B 集合的元素个数。</p><p>多表查询遵循的算法就是以上提到的笛卡尔积，表与表之间的连接可以看成是在做乘法运算。在实际应用中，应避免使用笛卡尔积，因为笛卡尔积中容易存在大量的不合理数据，简单来说就是容易导致查询结果重复、混乱。</p><h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h3><p>子查询是 MySQL 中比较常用的查询方法，通过子查询可以实现多表查询。子查询指将一个查询语句嵌套在另一个查询语句中。子查询可以在 <code>SELECT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 语句中使用，而且可以进行多层嵌套。在实际开发时，子查询经常出现在 <code>WHERE</code> 子句中。</p><p>子查询在 <code>WHERE</code> 中的语法格式如下：</p><blockquote><p>WHERE &lt;表达式&gt; &lt;操作符&gt; (子查询)</p></blockquote><p>其中，操作符可以是比较运算符和 <code>IN</code>、<code>NOT IN</code>、<code>EXISTS</code>、<code>NOT EXISTS</code> 等关键字。</p><ol><li><p><code>IN | NOT IN</code></p><p>当表达式与子查询返回的结果集中的某个值相等时，返回 <code>TRUE</code>，否则返回 <code>FALSE</code>；若使用关键字 <code>NOT</code>，则返回值正好相反。</p></li><li><p><code>EXISTS | NOT EXISTS</code></p><p>用于判断子查询的结果集是否为空，若子查询的结果集不为空，返回 <code>TRUE</code>，否则返回 <code>FALSE</code>；若使用关键字 <code>NOT</code>，则返回的值正好相反。</p><p><code>EXISTS</code> 关键字可以和其它查询条件一起使用，条件表达式与 <code>EXISTS</code> 关键字之间用 <code>AND</code> 和 <code>OR</code> 连接。</p></li><li><p><code>ANY | SOME | ALL</code></p><p><code>ANY</code> 和 <code>SOME</code> 是同义词，表示满足其中任一条件，它们允许创建一个表达式对子查询的返回值列表进行比较，只要满足内存子查询中的任何一个比较条件，就返回一个结果作为外层查询条件。</p><p><code>ALL</code> 关键字与 <code>ANY</code> 和 <code>SOME</code> 不同，使用 <code>ALL</code> 时，需要满足所有内层查询的条件。</p></li></ol><p>习惯上，外层的 <code>SELECT</code> 查询称为父查询，圆括号中嵌入的查询称为子查询（子查询必须放在圆括号内）。MySQL 在处理上例的 <code>SELECT</code> 语句时，执行流程为：先执行子查询，再执行父查询。</p><h4 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h4><p>子查询的功能也可以通过表连接完成，但是子查询会使 SQL 语句更容易阅读和编写。</p><p>子查询注意事项</p><p>在完成较复杂的数据查询时，经常会使用到子查询，编写子查询语句时，要注意如下事项。</p><p><strong>子查询语句可以嵌套在 SQL 语句中任何表达式出现的位置。</strong></p><p>在 <code>SELECT</code> 语句中，子查询可以被嵌套在 <code>SELECT</code> 语句的列、表和查询条件中，即 <code>SELECT</code> 子句，<code>FROM</code> 子句、<code>WHERE</code> 子句、<code>GROUP BY</code> 子句和 <code>HAVING</code> 子句。</p><p>嵌套在 <code>SELECT</code> 语句的 <code>SELECT</code> 子句中的子查询语法格式如下。</p><blockquote><p>SELECT (子查询) FROM 表名;</p></blockquote><p>提示：子查询结果为单行单列，但不必指定列别名。</p><p>嵌套在 <code>SELECT</code> 语句的 <code>FROM</code> 子句中的子查询语法格式如下。</p><blockquote><p>SELECT * FROM (子查询) AS 表的别名;</p></blockquote><div class="custom-container tip"><p class="custom-container-title">提示</p><p>必须为表指定别名。一般返回多行多列数据记录，可以当作一张临时表。</p></div><p><strong>只出现在子查询中而没有出现在父查询中的表不能包含在输出列中。</strong></p><p>多层嵌套子查询的最终数据集只包含父查询（即最外层的查询）的 <code>SELECT</code> 子句中出现的字段，而子查询的输出结果通常会作为其外层子查询数据源或用于数据判断匹配。</p><p>常见错误如下：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM (SELECT * FROM result);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个子查询语句产生语法错误的原因在于主查询语句的 <code>FROM</code> 子句是一个子查询语句，因此应该为子查询结果集指定别名。正确代码如下。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SELECT * FROM (SELECT * FROM result) AS Temp;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="合并查询结果" tabindex="-1"><a class="header-anchor" href="#合并查询结果" aria-hidden="true">#</a> 合并查询结果</h2><p>利用 <code>UNION</code> 关键字，可以给多出条 <code>SELECT</code> 语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同。各个 <code>SELECT</code> 语句之间使用 <code>UNION</code> 或 <code>UNION ALL</code> 关键字分隔。<code>UNION</code> 不使用 <code>ALL</code> 关键字，执行时会删除重复记录，所有返回值都唯一；使用 <code>ALL</code> 关键字后不会删除重复行，也不会对结果进行自动排序。基本语法格式如下：</p><blockquote><p>SELECT &lt;字段名&gt; FROM 表 1</p><p>UNION [ALL]</p><p>SELECT &lt;字段名&gt; FROM 表 2</p></blockquote>`,243),i=[l];function n(r,a){return t(),d("div",null,i)}const g=e(o,[["render",n],["__file","4. 数据表的基本操作.html.vue"]]);export{g as default};
