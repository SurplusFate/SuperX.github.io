import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as i,a,b as s,d as e,e as l,r as c}from"./app.c48393f4.js";const o={},r=a("h1",{id:"_5-nacos-注册中心",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_5-nacos-注册中心","aria-hidden":"true"},"#"),s(" 5. Nacos 注册中心")],-1),u=a("p",null,"国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba 也推出了一个名为 Nacos 的注册中心。",-1),d={href:"https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery",target:"_blank",rel:"noopener noreferrer"},g=a("h2",{id:"_5-1-认识和安装-nacos",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_5-1-认识和安装-nacos","aria-hidden":"true"},"#"),s(" 5.1.认识和安装 Nacos")],-1),m={href:"https://nacos.io/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://spring.io/projects/spring-cloud",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/Netflix/eureka",target:"_blank",rel:"noopener noreferrer"},h=l(`<p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713230444308.png" alt="image-20210713230444308"></p><h2 id="_5-2-服务注册到-nacos" tabindex="-1"><a class="header-anchor" href="#_5-2-服务注册到-nacos" aria-hidden="true">#</a> 5.2.服务注册到 nacos</h2><p>Nacos 是 SpringCloudAlibaba 的组件，而 SpringCloudAlibaba 也遵循 SpringCloud 中定义的服务注册、服务发现规范。因此使用 Nacos 和使用 Eureka 对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="_5-2-1-引入依赖" tabindex="-1"><a class="header-anchor" href="#_5-2-1-引入依赖" aria-hidden="true">#</a> 5.2.1.引入依赖</h3><p>在 cloud-demo 父工程的 pom 文件中的<code>&lt;dependencyManagement&gt;</code>中引入 SpringCloudAlibaba 的依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 user-service 和 order-service 中的 pom 文件中引入 nacos-discovery 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉 eureka 的依赖。</p></blockquote><h3 id="_5-2-2-配置-nacos-地址" tabindex="-1"><a class="header-anchor" href="#_5-2-2-配置-nacos-地址" aria-hidden="true">#</a> 5.2.2.配置 nacos 地址</h3><p>在 user-service 和 order-service 的 application.yml 中添加 nacos 地址：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意</strong>：不要忘了注释掉 eureka 的地址</p></blockquote><h3 id="_5-2-3-重启" tabindex="-1"><a class="header-anchor" href="#_5-2-3-重启" aria-hidden="true">#</a> 5.2.3.重启</h3><p>重启微服务后，登录 nacos 管理页面，可以看到微服务信息：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713231439607.png" alt="image-20210713231439607"></p><h2 id="_5-3-服务分级存储模型" tabindex="-1"><a class="header-anchor" href="#_5-3-服务分级存储模型" aria-hidden="true">#</a> 5.3.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的 user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos 就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service 是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713232522531.png" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713232658928.png" alt="image-20210713232658928"></p><p>杭州机房内的 order-service 应该优先访问同机房的 user-service。</p><h3 id="_5-3-1-给-user-service-配置集群" tabindex="-1"><a class="header-anchor" href="#_5-3-1-给-user-service-配置集群" aria-hidden="true">#</a> 5.3.1.给 user-service 配置集群</h3><p>修改 user-service 的 application.yml 文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启两个 user-service 实例后，我们可以在 nacos 控制台看到下面结果：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713232916215.png" alt="image-20210713232916215"></p><p>我们再次复制一个 user-service 启动配置，添加属性：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dserver.port</span><span class="token operator">=</span><span class="token number">8083</span> -Dspring.cloud.nacos.discovery.cluster-name<span class="token operator">=</span>SH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置如图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713233528982.png" alt="image-20210713233528982"></p><p>启动 UserApplication3 后再次查看 nacos 控制台：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713233727923.png" alt="image-20210713233727923"></p><h3 id="_5-3-2-同集群优先的负载均衡" tabindex="-1"><a class="header-anchor" href="#_5-3-2-同集群优先的负载均衡" aria-hidden="true">#</a> 5.3.2.同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此 Nacos 中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给 order-service 配置集群信息</p><p>修改 order-service 的 application.yml 文件，添加集群配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ <span class="token comment"># 集群名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）修改负载均衡规则</p><p>修改 order-service 的 application.yml 文件，修改负载均衡规则：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.alibaba.cloud.nacos.ribbon.NacosRule <span class="token comment"># 负载均衡规则</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-4-权重配置" tabindex="-1"><a class="header-anchor" href="#_5-4-权重配置" aria-hidden="true">#</a> 5.4.权重配置</h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下 NacosRule 是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos 提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在 nacos 控制台，找到 user-service 的实例列表，点击编辑，即可修改权重：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713235133225.png" alt="image-20210713235133225"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210713235235219.png" alt="image-20210713235235219"></p><blockquote><p><strong>注意</strong>：如果权重修改为 0，则该实例永远不会被访问</p></blockquote><h2 id="_5-5-环境隔离" tabindex="-1"><a class="header-anchor" href="#_5-5-环境隔离" aria-hidden="true">#</a> 5.5.环境隔离</h2><p>Nacos 提供了 namespace 来实现环境隔离功能。</p><ul><li>nacos 中可以有多个 namespace</li><li>namespace 下可以有 group、service 等</li><li>不同 namespace 之间相互隔离，例如不同 namespace 的服务互相不可见</li></ul><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714000101516.png" alt="image-20210714000101516"></p><h3 id="_5-5-1-创建-namespace" tabindex="-1"><a class="header-anchor" href="#_5-5-1-创建-namespace" aria-hidden="true">#</a> 5.5.1.创建 namespace</h3><p>默认情况下，所有 service、data、group 都在同一个 namespace，名为 public：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714000414781.png" alt="image-20210714000414781"></p><p>我们可以点击页面新增按钮，添加一个 namespace：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714000440143.png" alt="image-20210714000440143"></p><p>然后，填写表单：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714000505928.png" alt="image-20210714000505928"></p><p>就能在页面看到一个新的 namespace：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714000522913.png" alt="image-20210714000522913"></p><h3 id="_5-5-2-给微服务配置-namespace" tabindex="-1"><a class="header-anchor" href="#_5-5-2-给微服务配置-namespace" aria-hidden="true">#</a> 5.5.2.给微服务配置 namespace</h3><p>给微服务配置 namespace 只能通过修改配置来实现。</p><p>例如，修改 order-service 的 application.yml 文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">cluster-name</span><span class="token punctuation">:</span> HZ
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 492a7d5d<span class="token punctuation">-</span>237b<span class="token punctuation">-</span>46a1<span class="token punctuation">-</span>a99a<span class="token punctuation">-</span>fa8e98e4b0f9 <span class="token comment"># 命名空间，填ID</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 order-service 后，访问控制台，可以看到下面的结果：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714000830703.png" alt="image-20210714000830703"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714000837140.png" alt="image-20210714000837140"></p><p>此时访问 order-service，因为 namespace 不同，会导致找不到 userservice，控制台会报错：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714000941256.png" alt="image-20210714000941256"></p><h2 id="_5-6-nacos-与-eureka-的区别" tabindex="-1"><a class="header-anchor" href="#_5-6-nacos-与-eureka-的区别" aria-hidden="true">#</a> 5.6.Nacos 与 Eureka 的区别</h2><p>Nacos 的服务实例分为两种 l 类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">ephemeral</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置为非临时实例</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nacos 和 Eureka 整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/image-20210714001728017.png" alt="image-20210714001728017"></p><ul><li><p>Nacos 与 eureka 的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos 与 Eureka 的区别</p><ul><li>Nacos 支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos 支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos 集群默认采用 AP 方式，当集群中存在非临时实例时，采用 CP 模式；Eureka 采用 AP 方式</li></ul></li></ul>`,89);function b(_,y){const n=c("ExternalLinkIcon");return t(),i("div",null,[r,u,a("p",null,[s("官方文档: "),a("a",d,[s("Nacos discovery · alibaba/spring-cloud-alibaba Wiki (github.com)"),e(n)])]),g,a("p",null,[a("a",m,[s("Nacos"),e(n)]),s("是阿里巴巴的产品，现在是"),a("a",k,[s("SpringCloud"),e(n)]),s("中的一个组件。相比"),a("a",v,[s("Eureka"),e(n)]),s("功能更加丰富，在国内受欢迎程度较高。")]),h])}const N=p(o,[["render",b],["__file","5. Nacos 注册中心.html.vue"]]);export{N as default};
