import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e as t}from"./app.b3e56b5b.js";const e={},p=t(`<h1 id="_5-xml-和-json" tabindex="-1"><a class="header-anchor" href="#_5-xml-和-json" aria-hidden="true">#</a> 5. xml 和 json</h1><h2 id="_1-xml-简介" tabindex="-1"><a class="header-anchor" href="#_1-xml-简介" aria-hidden="true">#</a> 1.XML 简介</h2><p>什么是 xml？</p><p>xml 是可扩展的标记性语言。</p><h3 id="xml-的作用" tabindex="-1"><a class="header-anchor" href="#xml-的作用" aria-hidden="true">#</a> xml 的作用？</h3><p>xml 的主要作用有：</p><ol><li>用来保存数据，而且这些数据具有自我描述性</li><li>它还可以做为项目或者模块的配置文件</li><li>还可以做为网络传输数据的格式（现在 JSON 为主）</li></ol><h3 id="xml-语法" tabindex="-1"><a class="header-anchor" href="#xml-语法" aria-hidden="true">#</a> xml 语法</h3><ol><li>文档声明。</li><li>元素（标签）</li><li>xml 属性</li><li>xml 注释</li><li>文本区域（CDATA 区）</li></ol><h3 id="文档声明" tabindex="-1"><a class="header-anchor" href="#文档声明" aria-hidden="true">#</a> 文档声明</h3><p>我们先创建一个简单 XML 文件，用来描述图书信息。</p><ol><li><p>创建一个 xml 文件</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271421621.png" alt="image-20220827142106369"></p><p>文件名：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271421028.png" alt="image-20220827142131999"></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--</span> <span class="token attr-name">xml</span> <span class="token attr-name">声明。-</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- xml 声明 version 是版本的意思 encoding 是编码 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!--而且这个</span> <span class="token attr-name">&quot;&lt;?xml&quot;</span> <span class="token attr-name">要连在一起写，否则会有报错-</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>属性</p><p>version 是版本号</p><p>encoding 是 xml 的文件编码</p><p>standalone=&quot;yes/no&quot; 表示这个 xml 文件是否是独立的 xml 文件</p></blockquote></li><li><p>图书有 id 属性 表示唯一 标识，书名，有作者，价格</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token comment">&lt;!-- xml 声明 version 是版本的意思 encoding 是编码 --&gt;</span>
<span class="token comment">&lt;!-- 这是 xml 注释 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>books</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SN123123413241<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- book 标签描述一本图书 id 属性描述 的是图书 的编号 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>java 编程思想<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- name 标签描述 的是图书 的信息 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>华仔<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- author 单词是作者的意思 ，描述图书作者 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">&gt;</span></span>9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- price 单词是价格，描述的是图书 的价格 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SN12341235123<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- book 标签描述一本图书 id 属性描述 的是图书 的编号 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>葵花宝典<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- name 标签描述 的是图书 的信息 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>班长<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- author 单词是作者的意思 ，描述图书作者 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">&gt;</span></span>5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- price 单词是价格，描述的是图书 的价格 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>books</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中可以查看到文档</p></li></ol><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271429385.png" alt="image-20220827142940226"></p><h2 id="xml-注释" tabindex="-1"><a class="header-anchor" href="#xml-注释" aria-hidden="true">#</a> <strong>xml</strong> 注释</h2><blockquote><p>html 和 XML 注释 一样 : <code>&lt;!-- html 注释 --&gt;</code></p></blockquote><h2 id="元素-标签" tabindex="-1"><a class="header-anchor" href="#元素-标签" aria-hidden="true">#</a> 元素（标签）</h2><p>咱们先回忆一下:</p><p>html 标签：</p><p>格式：<code>&lt;标签名&gt;封装的数据&lt;/标签名&gt;</code></p><p>单标签: <code>&lt;标签名 /&gt;</code>, <code>&lt;br /&gt;</code> 换行 <code>&lt;hr /&gt;</code>水平线</p><p>双标签： <code>&lt;标签名&gt;封装的数据&lt;/标签名&gt;</code></p><p>标签名大小写不敏感</p><p>标签有属性，有基本属性和事件属性</p><p>标签要闭合（不闭合 ，html 中不报错。但我们要养成良好的书写习惯。闭合）</p><h3 id="什么是-xml-元素" tabindex="-1"><a class="header-anchor" href="#什么是-xml-元素" aria-hidden="true">#</a> 什么是 xml 元素</h3><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271438766.png" alt="image-20220827143807686"></p><p>元素是指从开始标签到结束标签的内容。</p><p>例如：<code>&lt;title&gt;java 编程思想&lt;/title&gt;</code></p><p>元素我们可以简单的理解为是标签。</p><p>Element 翻译为元素</p><h3 id="xml-命名规则" tabindex="-1"><a class="header-anchor" href="#xml-命名规则" aria-hidden="true">#</a> XML 命名规则</h3><p>XML 元素必须遵循以下命名规则：</p><ol><li><p>名称可以含字母、数字以及其他的字符</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>books</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SN213412341<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 描述一本书 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>班导<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 描述书的作者信息 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>java 编程思想<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 书名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">&gt;</span></span>9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 价格 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>books</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>名称不能以数字或者标点符号开始</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271443506.png" alt="image-20220827144323419"></p></li><li><p>名称不能包含空格</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271445956.png" alt="image-20220827144502830"></p></li></ol><h3 id="xml-中的元素" tabindex="-1"><a class="header-anchor" href="#xml-中的元素" aria-hidden="true">#</a> <strong>xml</strong> 中的元素</h3><p>单标签</p><p>格式： <code>&lt;标签名 属性=”值” 属性=”值” ...... /&gt;</code></p><p>双标签</p><p>格式：<code>&lt;标签名 属性=”值” 属性=”值” ......&gt;文本数据或子标签&lt;/标签名&gt;</code></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271446497.png" alt="image-20220827144655391"></p><h2 id="xml-属性" tabindex="-1"><a class="header-anchor" href="#xml-属性" aria-hidden="true">#</a> <strong>xml</strong> 属性</h2><p>xml 的标签属性和 html 的标签属性是非常类似的，属性可以提供元素的额外信息</p><p>在标签上可以书写属性：</p><p>一个标签上可以书写多个属性。每个属性的值必须使用 引号 引起来。规则和标签的书写规则一致。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271452363.png" alt="image-20220827145202246"></p><p>属性必须使用引号引起来，不引会报错</p><p>示例代码</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271452270.png" alt="image-20220827145247165"></p><h2 id="语法规则" tabindex="-1"><a class="header-anchor" href="#语法规则" aria-hidden="true">#</a> 语法规则</h2><h3 id="所有-xml-元素都须有关闭标签" tabindex="-1"><a class="header-anchor" href="#所有-xml-元素都须有关闭标签" aria-hidden="true">#</a> 所有 <strong>XML</strong> 元素都须有关闭标签</h3><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271453719.png" alt="image-20220827145346606"></p><h3 id="xml-标签对大小写敏感" tabindex="-1"><a class="header-anchor" href="#xml-标签对大小写敏感" aria-hidden="true">#</a> <strong>XML</strong> 标签对大小写敏感</h3><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271454089.png" alt="image-20220827145412981"></p><h3 id="xml-必须正确地嵌套" tabindex="-1"><a class="header-anchor" href="#xml-必须正确地嵌套" aria-hidden="true">#</a> <strong>XML</strong> 必须正确地嵌套</h3><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271455870.png" alt="image-20220827145533760"></p><h3 id="xml-文档必须有根元素" tabindex="-1"><a class="header-anchor" href="#xml-文档必须有根元素" aria-hidden="true">#</a> <strong>XML</strong> 文档必须有根元素</h3><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271456947.png" alt="image-20220827145612833"></p><h3 id="xml-的属性值须加引号" tabindex="-1"><a class="header-anchor" href="#xml-的属性值须加引号" aria-hidden="true">#</a> <strong>XML</strong> 的属性值须加引号</h3><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271456175.png" alt="image-20220827145631064"></p><h3 id="xml-中的特殊字符" tabindex="-1"><a class="header-anchor" href="#xml-中的特殊字符" aria-hidden="true">#</a> <strong>XML</strong> 中的特殊字符</h3><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271457529.png" alt="image-20220827145701411"></p><h3 id="文本区域-cdata-区" tabindex="-1"><a class="header-anchor" href="#文本区域-cdata-区" aria-hidden="true">#</a> 文本区域（<strong>CDATA</strong> 区）</h3><p>CDATA 语法可以告诉 xml 解析器，我 CDATA 里的文本内容，只是纯文本，不需要 xml 语法解析</p><p>CDATA 格式：</p><p><code>&lt;![CDATA[这里可以把你输入的字符原样显示，不会解析 xml]]&gt;</code></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208271458541.png" alt="image-20220827145835392"></p><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h2><p>JSON 是 JavaScript Object Notation 的缩写，它去除了所有 JavaScript 执行代码，只保留 JavaScript 的对象格式。一个典型的 JSON 如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Java 核心技术&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;firstName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Abc&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lastName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Xyz&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;isbn&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1234567&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Network&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JSON 作为数据传输的格式，有几个显著的优点：</p><p>JSON 只允许使用 UTF-8 编码，不存在编码问题； JSON 只允许使用双引号作为 key，特殊字符用 \\ 转义，格式简单； 浏览器内置 JSON 支持，如果把数据用 JSON 发送给浏览器，可以用 JavaScript 直接处理。 因此，JSON 适合表示层次结构，因为它格式简单，仅支持以下几种数据类型：</p><p>键值对：{&quot;key&quot;: value} 数组：[1, 2, 3] 字符串：&quot;abc&quot; 数值（整数和浮点数）：12.34 布尔值：true 或 false 空值：null 浏览器直接支持使用 JavaScript 对 JSON 进行读写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// JSON string to JavaScript object:</span>
jsObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// JavaScript object to JSON string:</span>
jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>jsObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，开发 Web 应用的时候，使用 JSON 作为数据传输，在浏览器端非常方便。因为 JSON 天生适合 JavaScript 处理，所以，绝大多数 REST API 都选择 JSON 作为数据传输格式。</p><p>现在问题来了：使用 Java 如何对 JSON 进行读写？</p><h3 id="常用的-json-第三方库" tabindex="-1"><a class="header-anchor" href="#常用的-json-第三方库" aria-hidden="true">#</a> 常用的 JSON 第三方库</h3><p>Jackson Gson Fastjson ... 引入以下 Maven 依赖：</p><p><code>com.fasterxml.jackson.core:jackson-databind:2.12.0</code></p><p>就可以使用下面的代码解析一个 JSON 文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InputStream</span> input <span class="token operator">=</span> <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;/book.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 反序列化时忽略不存在的 JavaBean 属性:</span>
mapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Book</span> book <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心代码是创建一个 <code>ObjectMapper</code> 对象。关闭 <code>DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES</code> 功能使得解析时如果 <code>JavaBean</code> 不存在该属性时解析不会报错。</p><p>把 JSON 解析为 <code>JavaBean</code> 的过程称为反序列化。如果把 <code>JavaBean</code> 变为 JSON，那就是序列化。要实现 <code>JavaBean</code> 到 JSON 的序列化，只需要一行代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要把 JSON 的某些值解析为特定的 Java 对象，例如 <code>LocalDate</code>，也是完全可以的。例如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Java 核心技术&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;pubDate&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2016-09-01&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要解析为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">LocalDate</span> pubDate<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要引入标准的 JSR 310 关于 JavaTime 的数据格式定义至 Maven：</p><p><code>com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.0</code></p><p>然后，在创建 <code>ObjectMapper</code> 时，注册一个新的 <code>JavaTimeModule</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaTimeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有些时候，内置的解析规则和扩展的解析规则如果都不满足我们的需求，还可以自定义解析。</p><p>举个例子，假设 Book 类的 isbn 是一个 <code>BigInteger</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> isbn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但 JSON 数据并不是标准的整形格式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Java 核心技术&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;isbn&quot;</span><span class="token operator">:</span> <span class="token string">&quot;978-7-111-54742-6&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接解析，肯定报错。这时，我们需要自定义一个 <code>IsbnDeserializer</code>，用于解析含有非数字的字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IsbnDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> p<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> ctxt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>
<span class="token comment">// 读取原始的 JSON 字符串内容:</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getValueAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JsonParseException</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在 Book 类中使用注解标注：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token comment">// 表示反序列化 isbn 时使用自定义的 IsbnDeserializer:</span>
<span class="token annotation punctuation">@JsonDeserialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">IsbnDeserializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> isbn<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的，自定义序列化时我们需要自定义一个 <code>IsbnSerializer</code>，然后在 Book 类中标注 <code>@JsonSerialize(using = ...)</code> 即可。</p><p>反序列化 在反序列化时，Jackson 要求 Java 类需要一个默认的无参数构造方法，否则，无法直接实例化此类。存在带参数构造方法的类，如果要反序列化，注意再提供一个无参数构造方法。</p><p>对于 <code>enum</code> 字段，Jackson 按 String 类型处理，即：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">DayOfWeek</span> start <span class="token operator">=</span> <span class="token constant">MONDAY</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MONDAY&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 record 类型，Jackson 会自动找出它的带参数构造方法，并根据 JSON 的 key 进行匹配，可直接反序列化。对 record 类型的支持需要版本 2.12.0 以上。</p>`,106),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","5. xml 和 json.html.vue"]]);export{d as default};
