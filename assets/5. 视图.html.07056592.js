import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,e as c}from"./app.296a2f9c.js";const d={},l=c('<h1 id="_5-视图" tabindex="-1"><a class="header-anchor" href="#_5-视图" aria-hidden="true">#</a> 5. 视图</h1><h2 id="视图概述" tabindex="-1"><a class="header-anchor" href="#视图概述" aria-hidden="true">#</a> 视图概述</h2><p>MySQL 视图（View）是一种虚拟存在的表，同真实表一样，视图也由列和行构成，但视图并不实际存在于数据库中。行和列的数据来自于定义视图的查询中所使用的表，并且还是在使用视图时动态生成的。</p><p>数据库中只存放了视图的定义，并没有存放视图中的数据，这些数据都存放在定义视图查询所引用的真实表中。使用视图查询数据时，数据库会从真实表中取出对应的数据。因此，视图中的数据是依赖于真实表中的数据的。一旦真实表中的数据发生改变，显示在视图中的数据也会发生改变。</p><p>视图可以从原有的表上选取对用户有用的信息，那些对用户没用，或者用户没有权限了解的信息，都可以直接屏蔽掉，作用类似于筛选。这样做既使应用简单化，也保证了系统的安全。</p><p>MySQL 的视图不支持输入参数的功能，因此交互性上还有欠缺。但对于变化不是很大的操作，使用视图可以很大程度上简化用户的操作。</p><p>视图并不同于数据表，它们的区别在于以下几点：</p><ul><li>视图不是数据库中真实的表，而是一张虚拟表，其结构和数据是建立在对数据中真实表的查询基础上的。</li><li>存储在数据库中的查询操作 SQL 语句定义了视图的内容，列数据和行数据来自于视图查询所引用的实际表，引用视图时动态生成这些数据。</li><li>视图没有实际的物理记录，不是以数据集的形式存储在数据库中的，它所对应的数据实际上是存储在视图所引用的真实表中的。</li><li>视图是数据的窗口，而表是内容。表是实际数据的存放单位，而视图只是以不同的显示方式展示数据，其数据来源还是实际表。</li><li>视图是查看数据表的一种方法，可以查询数据表中某些字段构成的数据，只是一些 SQL 语句的集合。从安全的角度来看，视图的数据安全性更高，使用视图的用户不接触数据表，不知道表结构。</li><li>视图的建立和删除只影响视图本身，不影响对应的基本表。</li></ul><p><strong>视图的优点：</strong></p><p>视图与表在本质上虽然不相同，但视图经过定义以后，结构形式和表一样，可以进行查询、修改、更新和删除等操作。同时，视图具有如下优点：</p><ol><li><p>定制用户数据，聚焦特定的数据</p><p>在实际的应用过程中，不同的用户可能对不同的数据有不同的要求。</p><p>例如，当数据库同时存在时，如学生基本信息表、课程表和教师信息表等多种表同时存在时，可以根据需求让不同的用户使用各自的数据。</p><p>学生查看修改自己基本信息的视图，安排课程人员查看修改课程表和教师信息的视图，教师查看学生信息和课程信息表的视图。</p></li><li><p>简化数据操作</p><p>在使用查询时，很多时候要使用聚合函数，同时还要显示其他字段的信息，可能还需要关联到其他表，语句可能会很长，如果这个动作频繁发生的话，可以创建视图来简化操作。</p></li><li><p>提高数据的安全性</p><p>视图是虚拟的，物理上是不存在的。可以只授予用户视图的权限，而不具体指定使用表的权限，来保护基础数据的安全。</p></li><li><p>共享所需数据</p><p>通过使用视图，每个用户不必都定义和存储自己所需的数据，可以共享数据库中的数据，同样的数据只需要存储一次。</p></li><li><p>更改数据格式</p><p>通过使用视图，可以重新格式化检索出的数据，并组织输出到其他应用程序中。</p></li><li><p>重用 SQL 语句</p><p>视图提供的是对查询操作的封装，本身不包含数据，所呈现的数据是根据视图定义从基础表中检索出来的，如果基础表的数据新增或删除，视图呈现的也是更新后的数据。视图定义后，编写完所需的查询，可以方便地重用该视图。</p></li></ol><p>要注意区别视图和数据表的本质，即视图是基于真实表的一张虚拟的表，其数据来源均建立在真实表的基础上。</p><p>使用视图的时候，还应该注意以下几点：</p><ul><li><p>创建视图需要足够的访问权限。</p></li><li><p>创建视图的数目没有限制。</p></li><li><p>视图可以嵌套，即从其他视图中检索数据的查询来创建视图。</p></li><li><p>视图不能索引，也不能有关联的触发器、默认值或规则。</p></li><li><p>视图可以和表一起使用。</p></li><li><p>视图不包含数据，所以每次使用视图时，都必须执行查询中所需的任何一个检索操作。如果用多个连接和过滤条件创建了复杂的视图或嵌套了视图，可能会发现系统运行性能下降得十分严重。因此，在部署大量视图应用时，应该进行系统测试。</p></li></ul><p>提示：<code>ORDER BY</code> 子句可以用在视图中，但若该视图检索数据的 <code>SELECT</code> 语句中也含有 <code>ORDER BY</code> 子句，则该视图中的 <code>ORDER BY</code> 子句将被覆盖。</p><h2 id="创建视图" tabindex="-1"><a class="header-anchor" href="#创建视图" aria-hidden="true">#</a> 创建视图</h2><p>可以使用 <code>CREATE VIEW</code> 语句来创建视图。</p><p>语法格式如下：</p><blockquote><p>CREATE VIEW &lt;视图名&gt; AS <code>&lt;SELECT 语句&gt;</code></p></blockquote><p>语法说明如下。</p><ul><li><p><code>&lt;视图名&gt;</code>：指定视图的名称。该名称在数据库中必须是唯一的，不能与其他表或视图同名。</p><p>对于创建视图中的 <code>SELECT</code> 语句的指定存在以下限制：</p></li><li><p>用户除了拥有 <code>CREATE VIEW</code> 权限外，还具有操作中涉及的基础表和其他视图的相关权限。</p></li><li><p><code>SELECT</code> 语句不能引用系统或用户变量。</p></li><li><p><code>SELECT</code> 语句不能包含 <code>FROM</code> 子句中的子查询。</p></li><li><p><code>SELECT</code> 语句不能引用预处理语句参数。</p></li><li><p><code>&lt;SELECT 语句&gt;</code>：指定创建视图的 <code>SELECT</code> 语句，可用于查询多个基础表或源视图。</p></li></ul><p>视图定义中引用的表或视图必须存在。但是，创建完视图后，可以删除定义引用的表或视图。可使用 <code>CHECK TABLE</code> 语句检查视图定义是否存在这类问题。</p><p>视图定义中允许使用 <code>ORDER BY</code> 语句，但是若从特定视图进行选择，而该视图使用了自己的 <code>ORDER BY</code> 语句，则视图定义中的 <code>ORDER BY</code> 将被忽略。</p><p>视图定义中不能引用 <code>TEMPORARY</code> 表（临时表），不能创建 <code>TEMPORARY</code> 视图。</p><p><code>WITH CHECK OPTION</code> 的意思是，修改视图时，检查插入的数据是否符合 <code>WHERE</code> 设置的条件。</p><h2 id="查询视图" tabindex="-1"><a class="header-anchor" href="#查询视图" aria-hidden="true">#</a> 查询视图</h2><p>视图一经定义之后，就可以如同查询数据表一样，使用 <code>SELECT</code> 语句查询视图中的数据，语法和查询基础表的数据一样。</p><p>视图用于查询主要应用在以下几个方面：</p><ul><li>使用视图重新格式化检索出的数据。</li><li>使用视图简化复杂的表连接。</li><li>使用视图过滤数据。</li></ul><p><code>DESCRIBE</code> 可以用来查看视图，语法如下：</p><blockquote><p>DESCRIBE 视图名；</p></blockquote><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>DESCRIBE</code> 一般情况下可以简写成 <code>DESC</code>，输入这个命令的执行结果和输入 <code>DESCRIBE</code> 是一样的。</p></div><ol><li><p>查看视图</p><p>创建好视图后，可以通过查看视图的语句来查看视图的字段信息以及详细信息。</p></li><li><p>查看视图的字段信息</p><p>查看视图的字段信息与查看数据表的字段信息一样，都是使用 <code>DESCRIBE</code> 关键字来查看的。具体语法如下：</p><blockquote><p>DESCRIBE 视图名;</p></blockquote><p>或简写成：</p><blockquote><p>DESC 视图名;</p></blockquote></li></ol><h3 id="查看视图的详细信息" tabindex="-1"><a class="header-anchor" href="#查看视图的详细信息" aria-hidden="true">#</a> 查看视图的详细信息</h3><p>在 MySQL 中，<code>SHOW CREATE VIEW</code> 语句可以查看视图的详细定义。其语法如下所示：</p><blockquote><p>SHOW CREATE VIEW 视图名;</p></blockquote><p>通过上面的语句，还可以查看创建视图的语句。创建视图的语句可以作为修改或者重新创建视图的参考，方便用户操作。</p><h2 id="修改视图" tabindex="-1"><a class="header-anchor" href="#修改视图" aria-hidden="true">#</a> 修改视图</h2><p>修改视图是指修改 MySQL 数据库中存在的视图，当基本表的某些字段发生变化时，可以通过修改视图来保持与基本表的一致性。</p><p><strong>基本语法：</strong></p><p>可以使用 <code>ALTER VIEW</code> 语句来对已有的视图进行修改。</p><p>语法格式如下：</p><blockquote><p>ALTER VIEW &lt;视图名&gt; AS <code>&lt;SELECT 语句&gt;</code></p></blockquote><p>语法说明如下：</p><ul><li><p><code>&lt;视图名&gt;</code>：指定视图的名称。该名称在数据库中必须是唯一的，不能与其他表或视图同名。</p></li><li><p><code>&lt;SELECT 语句&gt;</code>：指定创建视图的 <code>SELECT</code> 语句，可用于查询多个基础表或源视图。</p><p>需要注意的是，对于 <code>ALTER VIEW</code> 语句的使用，需要用户具有针对视图的 <code>CREATE VIEW</code> 和 <code>DROP</code> 权限，以及由 <code>SELECT</code> 语句选择的每一列上的某些权限。</p><p>修改视图的定义，除了可以通过 <code>ALTER VIEW</code> 外，也可以使用 <code>DROP VIEW</code> 语句先删除视图，再使用 <code>CREATE VIEW</code> 语句来实现。</p></li></ul><h3 id="修改视图内容" tabindex="-1"><a class="header-anchor" href="#修改视图内容" aria-hidden="true">#</a> 修改视图内容</h3><p>视图是一个虚拟表，实际的数据来自于基本表，所以通过插入、修改和删除操作更新视图中的数据，实质上是在更新视图所引用的基本表的数据。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>对视图的修改就是对基本表的修改，因此在修改时，要满足基本表的数据定义。</p></div><p>某些视图是可更新的。也就是说，可以使用 <code>UPDATE</code>、<code>DELETE</code> 或 <code>INSERT</code> 等语句更新基本表的内容。对于可更新的视图，视图中的行和基本表的行之间必须具有一对一的关系。</p><p>还有一些特定的其他结构，这些结构会使得视图不可更新。更具体地讲，如果视图包含以下结构中的任何一种，它就是不可更新的：</p><ul><li><p>聚合函数 <code>SUM()</code>、<code>MIN()</code>、<code>MAX()</code>、<code>COUNT()</code> 等。</p></li><li><p><code>DISTINCT</code> 关键字。</p></li><li><p><code>GROUP BY</code> 子句。</p></li><li><p><code>HAVING</code> 子句。</p></li><li><p><code>UNION</code> 或 <code>UNION ALL</code> 运算符。</p></li><li><p>位于选择列表中的子查询。</p></li><li><p><code>FROM</code> 子句中的不可更新视图或包含多个表。</p></li><li><p><code>WHERE</code> 子句中的子查询，引用 <code>FROM</code> 子句中的表。</p></li><li><p><code>ALGORITHM</code> 选项为 <code>TEMPTABLE</code>（使用临时表总会使视图成为不可更新的）的时候。</p></li></ul><h3 id="修改视图名称" tabindex="-1"><a class="header-anchor" href="#修改视图名称" aria-hidden="true">#</a> 修改视图名称</h3><p>修改视图的名称可以先将视图删除，然后按照相同的定义语句进行视图的创建，并命名为新的视图名称。</p><ol><li><p>删除视图</p><p>删除视图是指删除 MySQL 数据库中已存在的视图。删除视图时，只能删除视图的定义，不会删除数据。</p><p><strong>基本语法：</strong></p><p>可以使用 <code>DROP VIEW</code> 语句来删除视图。</p><p>语法格式如下：</p><blockquote><p>DROP VIEW &lt;视图名 1&gt; [ , &lt;视图名 2&gt; …]</p></blockquote></li></ol><p>其中：<code>&lt;视图名&gt;</code>指定要删除的视图名。<code>DROP VIEW</code> 语句可以一次删除多个视图，但是必须在每个视图上拥有 <code>DROP</code> 权限。</p>',55),i=[l];function E(t,a){return o(),p("div",null,i)}const n=e(d,[["render",E],["__file","5. 视图.html.vue"]]);export{n as default};
