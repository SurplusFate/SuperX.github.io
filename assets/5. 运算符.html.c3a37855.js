import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.15757ee9.js";const t={},p=e(`<h1 id="_5-运算符" tabindex="-1"><a class="header-anchor" href="#_5-运算符" aria-hidden="true">#</a> 5. 运算符</h1><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。Java 语言使用运算符将一个或多个操作数连缀成执行性语句，用以实现特定功能。</p><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h2><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。</p><p>下表列出了所有的算术运算符。假设整数变量 A 的值为 10，变量 B 的值为 20：</p><table><thead><tr><th style="text-align:center;">符号</th><th style="text-align:center;">描述</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:center;">加法 - 相加运算符两侧的值</td><td style="text-align:center;"><code>A + B = 30</code></td></tr><tr><td style="text-align:center;"><code>-</code></td><td style="text-align:center;">减法 - 左操作数减去右操作数</td><td style="text-align:center;"><code>A – B = 10</code></td></tr><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:center;">乘法 - 相乘操作符两侧的值</td><td style="text-align:center;"><code>A * B = 200</code></td></tr><tr><td style="text-align:center;"><code>/</code></td><td style="text-align:center;">除法 - 左操作数除以右操作数</td><td style="text-align:center;"><code>B / A = 2</code></td></tr><tr><td style="text-align:center;"><code>％</code></td><td style="text-align:center;">取模 - 左操作数除以右操作数的余数</td><td style="text-align:center;"><code>B % A = 0</code></td></tr><tr><td style="text-align:center;"><code>++</code></td><td style="text-align:center;">自增 - 操作数的值增加 1</td><td style="text-align:center;"><code>B++ 或 ++B = 21</code></td></tr><tr><td style="text-align:center;"><code>--</code></td><td style="text-align:center;">自减 - 操作数的值减少 1</td><td style="text-align:center;"><code>B-- 或 --B = 19</code></td></tr></tbody></table><p><strong>加法运算符：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">5.2</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.1</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token comment">// 8.3</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，<code>+</code> 还可以作为字符串的连接运算符。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;5.2&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;3.1&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token comment">// 5.23.1</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>减法运算符：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">5.2</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.1</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> sub <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token comment">// 2.1</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-</code> 作为求负运算符。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//定义double变量x，其值为-5.0</span>
<span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">;</span>
<span class="token comment">//将x求负，其值变成5.0</span>
× <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>乘法运算符：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">5.2</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.1</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> mul <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token comment">// 16.12</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mul<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>除法运算符：</strong></p><p>除法运算符有些特殊，如果除法运算符的两个操作数都是整数类型，则计算结果也是整数，就是将自然除法的结果截断取整，例如 19/4 的结果是 4，而不是 5。如果除法运算符的两个运算数都是整数类型，则除数不可以是 0，否则将引发除以零异常。</p><p>但如果除法运算符的两个操作数有 1 个是浮点数，或者 2 个都是浮点数，则计算结果也是浮点数，这个结果就是自然除法的结果。而且此时允许除数是 0，或者 0.0，得到结果是正无穷大或负无穷大。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DivTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">5.2</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.1</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> div <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
        <span class="token comment">// div的值将是1.6774193548387097</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出正无穷大:Infinity</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5除以0.0的结果是:&quot;</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出负无穷大:-Infinity</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-5除以0.0的结果是:&quot;</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下面代码将出现异常</span>
        <span class="token comment">// java.lang.ArithmeticException: / by zero</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-5除以0的结果是:&quot;</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>求余运算符：</strong></p><p>求余运算的结果不一定总是整数，它的计算结果是使用第一个操作数除以第二个操作数，得到一个整除的结果后剩下的值就是余数。</p><p>由于求余运算也需要进行除法运算，因此如果求余运算的两个操作数都是整数类型，则求余运算的第二个运算数不能是 0，否则将引发除以零异常。</p><p>如果求余运算的两个操作数中有 1 个或者 2 个都是浮点数，则允许第二个操作数是 0 或 0.0，只是求余运算的结果是非数：<code>NaN</code>。</p><p>0 或 0.0 对零以外的任何数求余都将得到 0 或 0.0。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">5.2</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">3.1</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> mod <span class="token operator">=</span> a <span class="token operator">%</span> b<span class="token punctuation">;</span>
        <span class="token comment">// mod的值为2.1</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出非数︰NaN</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5对0.0求余的结果是:&quot;</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出非数︰NaN</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-5.0对0求余的结果是:&quot;</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">5.0</span> <span class="token operator">%</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;O对5.0求余的结果是:&quot;</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">%</span> <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出非数:NaN</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;O对0.0求余的结果是:&quot;</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">%</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下面代码将出现异常</span>
        <span class="token comment">// java.lang.ArithmeticException: / by zero</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-5对0求余的结果是:&quot;</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">%</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自加：</strong></p><p>这是个单目运算符，运算符既可以出现在操作数的左边，也可以出现在操作数的右边。但出现在左边和右边的效果是不一样的。</p><p>如果把++放在左边，则先把操作数加 1，然后才把操作数放入表达式中运算；如果把++放在右边，则先把操作数放入表达式中运算，然后才把操作数加 1。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">//让a先执行算术运算，然后自加</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token comment">//输出a的值为6，b的值为11</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当++在操作数右边时，先执行 a+6 的运算（此时 a 的值为 5），然后对 a 加 1。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">//让a先自加，然后执行算术运算</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>a <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token comment">//输出a的值为6，b的值为12</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自减：</strong></p><p>也是个单目运算符，用法与++基本相似，只是将操作数的值减 1。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>加和自减只能用于操作变量，不能用于操作数值直接量或常量。例如，5++、6--等写法都是错误的。</p></div><p>Java 并没有提供其他更复杂的运算符，如果需要完成乘方、开方等运算，则可借助于<code>java.lang.Math</code>类的工具方法完成复杂的数学运算。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 定义变量a为3.2</span>
        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">3.2</span><span class="token punctuation">;</span>
        <span class="token comment">// 求a的5次方，并将计算结果赋给b</span>
        <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出b的值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 求a的平方根，并将结果赋给c</span>
        <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出c的值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算随机数，返回一个0~1之间的伪随机数</span>
        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出随机数d的值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 求1.57的sin函数值:1.57被当成弧度数</span>
        <span class="token keyword">double</span> e <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">1.57</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出接近1</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Math 类下包含了丰富的静态方法，用于完成各种复杂的数学运算。</p><h2 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h2><p>比较运算符用于判断两个变量或常量的大小，比较运算的结果是一个布尔值（true 或 false）。</p><p>Java 支持的比较运算符如下。</p><p>假设整数变量 A 的值为 10，变量 B 的值为 20：</p><p><code>==</code>：检查如果两个操作数的值是否相等，如果相等则条件为真。（A == B）为假(非真)</p><p><code>!=</code>：检查如果两个操作数的值是否相等，如果值不相等则条件为真。 (A != B) 为真</p><p><code>&gt;</code>：检查左操作数的值是否大于右操作数的值，如果是那么条件为真。 （A &gt; B）非真</p><p><code>&lt;</code>：检查左操作数的值是否小于右操作数的值，如果是那么条件为真。 （A &lt; B）为真</p><p><code>&gt;=</code>：检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。 （A &gt;= B）为假</p><p><code>&lt;=</code>：检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。 （A &lt;= B）为真</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>基本类型的变量、值不能和引用类型的变量、值使用 <code>==</code> 进行比较；</p><p><code>boolean</code> 类型的变量、值不能与其他任意类型的变量、值使用<code>==</code>进行比较；</p><p>如果两个引用类型之间没有父子继承关系，那么它们的变量也不能使用 <code>==</code> 进行比较。</p><p><code>!=</code>：如果两个操作数都是引用类型，只有当两个引用变量引用的相同类的实例时才可以比较，只要两个引用指向的不是同一个对象就会返回 <code>true</code>。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparableOperatorTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 输出true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5是否大于4.0:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;5和5.0是否相等: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;97和&#39;a&#39;是否相等:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">97</span> <span class="token operator">==</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 输出false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;true和false是否相等:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建2个ComparableOperatorTest对象，分别赋给t1和t2两个引用</span>
        <span class="token class-name">ComparableOperatorTest</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparableOperatorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ComparableOperatorTest</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComparableOperatorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// t1和t2是同一个类的两个实例的引用，所以可以比较</span>
        <span class="token comment">// 但t1和t2是引用不同的对象，所以返回false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;t1是否等于t2:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 直接将t1的值赋给t3，即让t3指向t1指向的对象</span>
        <span class="token class-name">ComparableOperatorTest</span> t3 <span class="token operator">=</span> t1<span class="token punctuation">;</span>
        <span class="token comment">// t1和t3指向同一个对象，所以返回true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;t1是否等于t3: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><p>Java 定义了位运算符，应用于整数类型 <code>int</code>、长整型 <code>long</code>、短整型 <code>short</code>、字符型 <code>char</code> 和字节型 <code>byte</code> 等类型。</p><p>位运算符作用在所有的位上，并且按位运算。</p><p>假设整数变量 A 的值为 60 和变量 B 的值为 13：</p><p><code>＆</code>：如果相对应位都是 1，则结果为 1，否则为 0（A＆B）得到 12，即 0000 1100</p><p><code>|</code>：如果相对应位都是 0，则结果为 0，否则为 1（A | B）得到 61，即 0011 1101</p><p><code>^</code>：如果相对应位值相同，则结果为 0，否则为 1（A ^ B）得到 49，即 0011 0001</p><p><code>〜</code>：按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0。（〜A）得到-61，即 1100 0011</p><p><code>&lt;&lt;</code>：按位左移运算符。左操作数按位左移右操作数指定的位数。（A &lt;&lt; 2）得到 240，即 1111 0000</p><p><code>&gt;&gt;</code>：位右移运算符。左操作数按位右移右操作数指定的位数。（A &gt;&gt; 2）得到 15，即 1111</p><p><code>&gt;&gt;&gt;</code>：按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。（A&gt;&gt;&gt;2）得到 15，即 0000 1111</p><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>//将输出1
System.out.println(5 &amp; 9);
//将输出13
System.out.println(5 | 9);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5 的二进制码是 00000101（省略了前面的 24 个 0），而 9 的二进制码是 00001001（省略了前面的 24 个 0）。运算过程如图所示。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202207061625483.jpeg" alt="img"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//将输出4</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//将输出12</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">^</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序执行~-5 的结果是 4，执行 5 ^ 9 的结果是 12。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202207061629872.jpeg" alt="img"></p><p>而 5 ^ 9 是 00000101 和 00001001 进行异或运算，运算过程如图所示。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202207061633886.jpeg" alt="img"></p><p>左移运算符是将运算数的二进制码整体左移指定位数，左移后右边空出来的位以 0 填充。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//输出20</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出-20</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202207061634699.jpeg" alt="img"></p><p>上面的 32 位数是-5 的补码，左移两位后得到一个二进制补码，这个二进制补码的最高位是 1，表明是一个负数，换算成十进制数就是-20。</p><p>Java 的右移运算符有两个：<code>&gt;&gt;</code> 和 <code>&gt;&gt;&gt;</code>，对于 <code>&gt;&gt;</code> 运算符而言，把第一个操作数的二进制码右移指定位数后，左边空出来的位以原来的符号位填充，即如果第一个操作数原来是正数，则左边补 0；如果第一个操作数是负数，则左边补 1。</p><p><code>&gt;&gt;&gt;</code> 是无符号右移运算符，它把第一个操作数的二进制码右移指定位数后，左边空出来的位总是以 0 填充。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//输出-2</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出1073741822</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-5 右移 2 位后左边空出 2 位，空出来的 2 位以符号位补充。从图中可以看出，右移运算后得到的结果的正负与第一个操作数的正负相同。右移后的结果依然是一个负数，这是一个二进制补码，换算成十进制数就是-2。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202207061637679.jpeg" alt="img"></p><p>-5 无符号右移 2 位后左边空出 2 位，空出来的 2 位以 0 补充。从图中可以看出，无符号右移运算后的结果总是得到一个正数。图中下面的正数是 1073741822（230-2）</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202207061638713.jpeg" alt="img"></p><p>必须指出的是，<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code> 和 <code>&lt;&lt;</code> 3 个移位运算符并不适合所有的数值类型，它们只适合对 <code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code> 和 <code>long</code> 等整数类型进行运算。除此之外，进行移位运算时还要遵循如下规则。</p><ol><li><p>对于低于 <code>int</code> 类型（如 <code>byte</code>、<code>short</code> 和 <code>char</code>）的操作数总是先自动类型转换为 <code>int</code> 类型后再移位。</p></li><li><p>对于 <code>int</code> 类型的整数移位 a&gt;&gt;b，当 b&gt;32 时，系统先用 b 对 32 求余（因为 <code>int</code> 类型只有 32 位），得到的结果才是真正移位的位数。例如，a&gt;&gt;33 和 a&gt;&gt;1 的结果完全一样，而 a&gt;&gt;32 的结果和 a 相同。</p></li><li><p>对于 <code>long</code> 类型的整数移位 a&gt;&gt;b，当 b&gt;64 时，总是先用 b 对 64 求余（因为 long 类型是 64 位），得到的结果才是真正移位的位数。</p></li></ol><div class="custom-container warning"><p class="custom-container-title">注意</p><p>当进行移位运算时，只要被移位的二进制码没有发生有效位的数字丢失（对于正数而言，通常指被移出的位全部都是 0），不难发现左移 n 位就相当于乘以 2 的 n 次方，右移 n 位则是除以 2 的 n 次方。</p><p>这里存在一个问题：左移时左边舍弃的位中数字通常是无效的，但右移时右边舍弃的位常常是有效的，因此左移和右移更容易看出这种运行效果。</p><p>不仅如此，进行移位运算不会改变操作数本身，只是得到了一个新的运算结果，而原来的操作数本身是不会改变的。</p></div><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><p>逻辑运算符用于操作两个布尔型的变量或常量。</p><p>假设布尔变量 A 为真，变量 B 为假</p><p><code>&amp;&amp;</code>：短路与。当且仅当两个操作数都为真，条件才为真。 （A <code>&amp;&amp;</code> B）为假。</p><p><code>||</code>：短路或。如果任何两个操作数任何一个为真，条件为真。 （A <code>||</code> B）为真。</p><p><code>!</code>：非。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code>。 <code>!(A &amp;&amp; B)</code>为真。</p><p><code>&amp;</code>：逻辑与。作用与 <code>&amp;&amp;</code> 相同，但不会短路。</p><p><code>|</code>：逻辑或。作用与 <code>||</code> 相同，但不会短路。</p><p><code>^</code>：异或，当两个操作数不同时才返回 <code>true</code>，如果两个操作数相同则返回 <code>false</code>。</p><p><strong>短路判断与逻辑判断的区别：</strong></p><p>逻辑判断全部走一遍，短路判断有结果就停。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 直接对false求非运算，将返回true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 5&gt;3返回true，&#39;6&#39;转换为整数54，&#39;6&#39;&gt;10返回true，求与后返回true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token char">&#39;6&#39;</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4&gt;=5返回false，&#39;c&#39;&gt;&#39;a&#39;返回true。求或后返回true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token operator">||</span> <span class="token char">&#39;c&#39;</span> <span class="token operator">&gt;</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4&gt;=5返回false，&#39;c&#39;&gt;&#39;a&#39;返回true。两个不同的操作数求异或返回true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token operator">^</span> <span class="token char">&#39;C&#39;</span> <span class="token operator">&gt;</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于|与||的区别。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义变量a,b，并为两个变量赋值</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// 对a &gt; 4和b++ &gt;10求或运算</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">|</span> b<span class="token operator">++</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 输出a的值是5，b的值是11</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a的值是:&quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot;b的值是:&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>b 的值为 11，这表明 b++&gt; 10 表达式得到了计算，但实际上没有计算的必要，因为 a &gt; 4 已经返回了 true，则整个表达式一定返回 true。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义变量c,d，并为两个变量赋值</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// c &gt;4 || d++ &gt;10求或运算</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token operator">||</span> d<span class="token operator">++</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 输出c的值是5，d的值是10</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c的值是:&quot;</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">&quot; d的值是:&quot;</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于短路逻辑或||而言，如果第一个操作数返回 true，|| 将不再对第二个操作数求值，直接返回 true。</p><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><p>赋值运算符用于为变量指定变量值，与 C 类似，Java 也使用 <code>=</code> 作为赋值运算符。通常，使用赋值运算符将一个常量值赋给变量。</p><p><code>=</code> 简单的赋值运算符，将右操作数的值赋给左侧操作数 <code>C = A + B</code> 将把 <code>A + B</code> 得到的值赋给 C</p><p><code>+=</code> 加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数 <code>C += A</code> 等价于 <code>C = C(C 的数据类型) + A</code></p><p><code>-=</code> 减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数 <code>C -= A</code> 等价于 <code>C = C(C 的数据类型) - A</code></p><p><code>*=</code> 乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数 <code>C *= A</code> 等价于 <code>C = C(C 的数据类型) * A</code></p><p><code>/=</code> 除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数 <code>C /= A</code>，C 与 A 同类型时等价于 <code>C = C(C 的数据类型) / A</code></p><p><code>％=</code> 取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数 <code>C ％= A</code> 等价于 <code>C = C(C 的数据类型) ％ A</code></p><p><code>&lt;&lt;=</code> 左移位赋值运算符 <code>C &lt;&lt; = 2</code> 等价于 <code>C = C &lt;&lt; 2</code></p><p><code>&gt;&gt;=</code> 右移位赋值运算符 <code>C &gt;&gt; = 2</code> 等价于 <code>C = C &gt;&gt; 2</code></p><p><code>＆=</code> 按位与赋值运算符 <code>C ＆= 2</code> 等价于 <code>C = C(C 的数据类型)＆2</code></p><p><code>^=</code> 按位异或赋值操作符 <code>C ^= 2</code> 等价于 <code>C = C(C 的数据类型) ^ 2</code></p><p><code>|=</code> 按位或赋值操作符 <code>C |= 2</code> 等价于 <code>C = C(C 的数据类型) | 2</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//为变量str赋值Java</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//为变量pi赋值3.14</span>
<span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token comment">//为变量visited赋值true</span>
<span class="token keyword">boolean</span> visited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，也可使用赋值运算符将一个变量的值赋给另一个变量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//将变量str的值赋给str2</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> str<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值运算符支持连续赋值，通过使用多个赋值运算符，可以一次为多个变量赋值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
<span class="token comment">//通过为a, b , c赋值，3个变量的值都是7</span>
a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token comment">//输出3个变量的值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>虽然 Java 支持这种一次为多个变量赋值的写法，但这种写法导致程序的可读性降低，因此不推荐这样写。</p></div><p>赋值运算符还可用于将表达式的值赋给变量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span>
<span class="token comment">//将表达式的值赋给d2</span>
<span class="token keyword">double</span> d2 <span class="token operator">=</span> d1 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token comment">//输出d2的值</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符" aria-hidden="true">#</a> 三目运算符</h2><ol><li><p>语法格式:</p><blockquote><p>布尔表达式 ? 表达式 1 : 表达式 2</p></blockquote></li><li><p>执行原理:</p><p>如果布尔表达式结果为 true，则执行表达式 1</p><p>如果布尔表达式结果为 false，则执行表达式 2</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> sex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> sex ？ <span class="token char">&#39;男&#39;</span> <span class="token operator">:</span> <span class="token char">&#39;女&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出结果为女</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符的结合性和优先级" tabindex="-1"><a class="header-anchor" href="#运算符的结合性和优先级" aria-hidden="true">#</a> 运算符的结合性和优先级</h2><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算顺序。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202207062105016.jpeg" alt="img"></p><p>因为 Java 运算符存在这种优先级的关系，有时候能看到这种代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">-</span> <span class="token operator">--</span>b <span class="token operator">*</span> <span class="token operator">++</span>a <span class="token operator">/</span> b<span class="token operator">--</span> <span class="token operator">&gt;&gt;</span><span class="token number">2</span> <span class="token operator">%</span> a<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token comment">// c的值是多少？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的代码只能在考试中出现，源代码的可读性比代码运行效率更重要。</p><blockquote><ol><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它分成几步来完成；</li><li>不要过多地依赖运算符的优先级来控制表达式的执行顺序，这样可读性太差，尽量使用<code>()</code>来控制表达式的执行顺序。</li></ol></blockquote>`,131),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","5. 运算符.html.vue"]]);export{d as default};
