import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e as t}from"./app.afa0a23a.js";const p={},e=t(`<h1 id="redis-消息队列" tabindex="-1"><a class="header-anchor" href="#redis-消息队列" aria-hidden="true">#</a> Redis 消息队列</h1><h2 id="认识消息队列" tabindex="-1"><a class="header-anchor" href="#认识消息队列" aria-hidden="true">#</a> 认识消息队列</h2><p>什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括 3 个角色：</p><ul><li>消息队列：存储和管理消息，也被称为<strong>消息代理</strong>（Message Broker）</li><li>生产者：发送消息到消息队列</li><li>消费者：从消息队列获取消息并处理消息</li></ul><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011022318.png" alt="image-20221101102221209"></p><p>使用队列的好处在于 **解耦：**所谓解耦，举一个生活中的例子就是：快递员(生产者)把快递放到快递柜里边(Message Queue)去，我们(消费者)从快递柜里边去拿东西，这就是一个异步，如果耦合，那么这个快递员相当于直接把快递交给你，这事固然好，但是万一你不在家，那么快递员就会一直等你，这就浪费了快递员的时间，所以这种思想在我们日常开发中，是非常有必要的。</p><p>这种场景在我们秒杀中就变成了：我们下单之后，利用 redis 去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度。</p><p>这里我们可以使用一些现成的 mq，比如 kafka，rabbitmq 等等，但是呢，如果没有安装 mq，我们也可以直接使用 redis 提供的 mq 方案，降低我们的部署和学习成本。</p><h2 id="基于-list-实现消息队列" tabindex="-1"><a class="header-anchor" href="#基于-list-实现消息队列" aria-hidden="true">#</a> 基于 List 实现消息队列</h2><p><strong>基于 List 结构模拟消息队列:</strong></p><p>消息队列（Message Queue），字面意思就是存放消息的队列。而 Redis 的 list 数据结构是一个双向链表，很容易模拟出队列效果。</p><p>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP 来实现。 不过要注意的是，当队列中没有消息时 RPOP 或 LPOP 操作会返回 null，并不像 JVM 的阻塞队列那样会阻塞并等待消息。因此这里应该使用 BRPOP 或者 BLPOP 来实现阻塞效果。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011024780.png" alt="image-20221101102417730"></p><p>基于 List 的消息队列有哪些优缺点？ 优点：</p><ul><li>利用 Redis 存储，<strong>不受限于 JVM 内存上限</strong></li><li>基于 Redis 的<strong>持久化机制</strong>，<strong>数据安全性</strong>有保证</li><li>可以满足消息有序性</li></ul><p>缺点：</p><ul><li>无法避免<strong>消息丢失</strong></li><li>只支持<strong>单消费者</strong></li></ul><h2 id="基于-pubsub-的消息队列" tabindex="-1"><a class="header-anchor" href="#基于-pubsub-的消息队列" aria-hidden="true">#</a> 基于 PubSub 的消息队列</h2><p>PubSub（发布订阅）是 Redis2.0 版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个 channel，生产者向对应 channel 发送消息后，所有订阅者都能收到相关消息。</p><p>SUBSCRIBE channel [channel] ：订阅一个或多个频道 PUBLISH channel msg ：向一个频道发送消息 PSUBSCRIBE pattern[pattern] ：订阅与 pattern 格式匹配的所有频道</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011026264.png" alt="image-20221101102642213"></p><p>基于 PubSub 的消息队列有哪些优缺点？ 优点：</p><ul><li>采用发布订阅模型，支持多生产、多消费</li></ul><p>缺点：</p><ul><li>不支持<strong>数据持久化</strong></li><li>无法避免<strong>消息丢失</strong></li><li><strong>消息堆积有上限</strong>，超出时数据丢失</li></ul><h2 id="基于-stream-的消息队列" tabindex="-1"><a class="header-anchor" href="#基于-stream-的消息队列" aria-hidden="true">#</a> 基于 Stream 的消息队列</h2><p>Stream 是 Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p><p>发送消息的命令：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011028741.png" alt="image-20221101102823691"></p><p>例如：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011028223.png" alt="image-20221101102841185"></p><p>读取消息的方式之一：XREAD</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011029844.png" alt="image-20221101102910789"></p><p>例如，使用 XREAD 读取第一个消息：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011029730.png" alt="image-20221101102925687"></p><p>XREAD 阻塞方式，读取最新的消息：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011029479.png" alt="image-20221101102943447"></p><p>在业务开发中，我们可以循环的调用 XREAD 阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011030935.png" alt="image-20221101103006889"></p><p>注意：当我们指定起始 ID 为$时，代表读取最新的消息，如果我们处理一条消息的过程中，又有超过 1 条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现<strong>漏读</strong>消息的问题</p><p>STREAM 类型消息队列的 XREAD 命令特点：</p><ul><li>消息可回溯</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息<strong>漏读</strong>的风险</li></ul><h3 id="消费者组" tabindex="-1"><a class="header-anchor" href="#消费者组" aria-hidden="true">#</a> 消费者组</h3><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011031892.png" alt="image-20221101103141833"></p><p>创建消费者组：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011032058.png" alt="image-20221101103211032"></p><p>key：队列名称 groupName：消费者组名称 ID：起始 ID 标示，$代表队列中最后一个消息，0 则代表队列中第一个消息 MKSTREAM：队列不存在时自动创建队列 其它常见命令：</p><p><strong>删除指定的消费者组:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">XGROUP</span> <span class="token constant">DESTORY</span> key groupName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>给指定的消费者组添加消费者:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">XGROUP</span> <span class="token constant">CREATECONSUMER</span> key groupname consumername
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>删除消费者组中的指定消费者:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">XGROUP</span> <span class="token constant">DELCONSUMER</span> key groupname consumername
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从消费者组读取消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">XREADGROUP</span> <span class="token constant">GROUP</span> group consumer <span class="token punctuation">[</span><span class="token constant">COUNT</span> count<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">BLOCK</span> milliseconds<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token constant">NOACK</span><span class="token punctuation">]</span> <span class="token constant">STREAMS</span> key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token constant">ID</span> <span class="token punctuation">[</span><span class="token constant">ID</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>group：消费组名称</li><li>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</li><li>count：本次查询的最大数量</li><li>BLOCK milliseconds：当没有消息时最长等待时间</li><li>NOACK：无需手动 ACK，获取到消息后自动确认</li><li>STREAMS key：指定队列名称</li><li>ID：获取消息的起始 ID： <ul><li>&quot;&gt;&quot;：从下一个未消费的消息开始</li><li>其它：根据指定 id 从 pending-list 中获取已消费但未确认的消息，例如 0，是从 pending-list 中的第一个消息开始</li></ul></li></ul><p>消费者监听消息的基本思路：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011033590.png" alt="image-20221101103301529"></p><p>STREAM 类型消息队列的 XREADGROUP 命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><p>最后我们来个小对比</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011033109.png" alt="image-20221101103331047"></p><h3 id="实现异步秒杀下单" tabindex="-1"><a class="header-anchor" href="#实现异步秒杀下单" aria-hidden="true">#</a> 实现异步秒杀下单</h3><blockquote><ul><li>创建一个 Stream 类型的消息队列，名为 stream.orders</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>XGROUP CREATE stream.orders g1 <span class="token number">0</span> MKSTREAM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>修改之前的秒杀下单 Lua 脚本，在认定有抢购资格后，直接向 stream.orders 中添加消息，内容包含 voucherId、userId、orderId <ul><li>发送消息到队列中，XADD stream.orders * k1 v1 k2 v2</li></ul></li><li>项目启动时，开启一个线程任务，尝试获取 stream.orders 中的消息，完成下单 <ul><li>从队列中读取消息 <code>XREADGROUP GROUP g1 c1 count 1 BLOCK 2000 STREAM S1 &gt;</code></li><li>若消息为空，说明还没有消息，继续下次循坏</li><li>创建订单</li><li>手动 ACK XACK</li><li>出现异常，编写方法 handlePendingList <ul><li>从 PendingList 中读取消息 XREADGROUP GROUP g1 c1 count 1 BLOCK 2000 STREAM S1 0</li><li>若消息为空，说明没有异常消息，结束循坏</li><li>创建订单</li><li>手动 ACK XACK</li><li>出现异常，睡眠 20 ms，继续下一次循坏</li></ul></li></ul></li></ul></blockquote><p>创建一个 Stream 类型的消息队列，名为 stream.orders</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>XGROUP CREATE stream.orders g1 <span class="token number">0</span> MKSTREAM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改之前的秒杀下单 Lua 脚本，在认定有抢购资格后，直接向 stream.orders 中添加消息，内容包含 voucherId、userId、orderId</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011036476.png" alt="image-20221101103540093"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211011036627.png" alt="image-20221101103629577"></p><p>项目启动时，开启一个线程任务，尝试获取 stream.orders 中的消息，完成下单</p><p>VoucherOrderServiceImpl</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">VoucherOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MapRecord</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>
                    <span class="token class-name">Consumer</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;g1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">StreamReadOptions</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">StreamOffset</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;stream.orders&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ReadOffset</span><span class="token punctuation">.</span><span class="token function">lastConsumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 2.判断订单信息是否为空</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果为null，说明没有消息，继续下一次循环</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 解析数据</span>
                <span class="token class-name">MapRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> value <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">fillBeanWithMap</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 3.创建订单</span>
                <span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 4.确认消息 XACK</span>
                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token string">&quot;s1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g1&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;处理订单异常&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//处理异常消息</span>
                <span class="token function">handlePendingList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handlePendingList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">// 1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MapRecord</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>
                    <span class="token class-name">Consumer</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;g1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">StreamReadOptions</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">StreamOffset</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;stream.orders&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ReadOffset</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 2.判断订单信息是否为空</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 如果为null，说明没有异常消息，结束循环</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 解析数据</span>
                <span class="token class-name">MapRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> value <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">VoucherOrder</span> voucherOrder <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">fillBeanWithMap</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">VoucherOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 3.创建订单</span>
                <span class="token function">createVoucherOrder</span><span class="token punctuation">(</span>voucherOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 4.确认消息 XACK</span>
                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token string">&quot;s1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;g1&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;处理pendding订单异常&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span><span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,73),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","6. Redis 消息队列.html.vue"]]);export{k as default};
