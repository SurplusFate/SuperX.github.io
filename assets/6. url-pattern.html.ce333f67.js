import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as p,a as l,b as n,d as o,w as c,e as s,r as i}from"./app.b8ec8d86.js";const u={},r=s(`<h1 id="_6-url-pattern" tabindex="-1"><a class="header-anchor" href="#_6-url-pattern" aria-hidden="true">#</a> 6. url-pattern</h1><p>配置详解:</p><blockquote><ol><li><p><strong>*.do</strong></p><p>在没有特殊要求的情况下，SpringMVC 的中央调度器 DispatcherServlet 的 <code>&lt;url-pattern/&gt;</code></p><p>常使用后辍匹配方式，如写为 <code>.do</code> 或者 <code>.action</code>, <code>*.mvc</code> 等。</p></li><li><p><strong>/</strong></p><p>可以写为/，因为 DispatcherServlet 会将向静态资源的获取请求，例如.css、.js、.jpg、.png</p><p>等资源的获取请求，当作是一个普通的 Controller 请求。中央调度器会调用处理器映射器为</p><p>其查找相应的处理器。当然也是找不到的，所以在这种情况下，<strong>所有的静态资源获取请求也均会报 404 错误</strong>。</p></li></ol></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>myweb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--
使用框架的时候， url-pattern可以使用两种值
1. 使用扩展名方式， 语法 *.xxxx , xxxx是自定义的扩展名。 常用的方式 *.do, *.action, *.mvc等等
不能使用 *.jsp
http://localhost:8080/myweb/some.do
http://localhost:8080/myweb/other.do

2.使用斜杠 &quot;/&quot;
当你的项目中使用了  / ，它会替代 tomcat中的default。
导致所有的静态资源都给DispatcherServlet处理， 默认情况下DispatcherServlet没有处理静态资源的能力。
没有控制器对象能处理静态资源的访问。所以静态资源（html，js，图片，css）都是404.

动态资源some.do是可以访问，的因为我们程序中有MyController控制器对象，能处理some.do请求。
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态资源访问方式一" tabindex="-1"><a class="header-anchor" href="#静态资源访问方式一" aria-hidden="true">#</a> 静态资源访问方式一</h2><p><strong>在 springmvc 配置文件中声明 <code>&lt;mvc:default-servlet-handler/&gt;</code></strong></p><p>原理是：加入这个标签后，框架会创健控制器对象 DefaultServletHttpRequestHandler(类似我们自己创建的 MyController)</p><p>DefaultServletHttpRequestHandler 这个对象可以把接收的请求转发给 tomcat 的 default 这个 servlet。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--1. 第一种处理静态资源的方式--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!--2. default-servlet-handler 和 @RequestMapping注解 有冲突， 需要加入annotation-driven 解决问题--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Tomcat 中，有一个专门用于处理静态资源访问的 Servlet 名叫 DefaultServlet。其 <code>&lt;servlet-name/&gt;</code> 为 default。可以处理各种静态资源访问请求。该 Servlet 注册在 Tomcat 服务器的 web.xml 中</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202209151557742.png" alt="url"></p><h2 id="静态资源访问方式二" tabindex="-1"><a class="header-anchor" href="#静态资源访问方式二" aria-hidden="true">#</a> 静态资源访问方式二</h2><p><strong>使用 <code>&lt;mvc:resources/&gt;</code>（掌握）</strong></p><p>在 Spring3.0 版本后，Spring 定义了专门用于处理静态资源访问请求的处理器</p>`,14),d=s(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--第二种处理静态资源的方式--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/images/**<span class="token punctuation">&quot;</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/images/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/html/**<span class="token punctuation">&quot;</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/html/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/**<span class="token punctuation">&quot;</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!--images/**:可以表示 images/p1.jpg  , images/user/logo.gif , images/order/history/list.png--&gt;</span>

<span class="token comment">&lt;!--mvc:resources和@RequestMapping有一定的冲突--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!--使用一个配置语句，指定多种静态资源的访问--&gt;</span>
<span class="token comment">&lt;!--&lt;mvc:resources mapping=&quot;/static/**&quot; location=&quot;/static/&quot; /&gt;--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理:</p><blockquote><p>mvc:resources 加入后框架会创建 ResourceHttpRequestHandler 这个处理器对象。</p><p>让这个对象处理静态资源的访问，不依赖 tomcat 服务器。</p><p>mapping: 访问静态资源的 uri 地址， 使用通配符 **</p><p>location: 静态资源在你的项目中的目录位置。</p></blockquote>`,3);function m(v,g){const a=i("RouterLink");return e(),p("div",null,[r,l("p",null,[n("ResourceHttpRequestHandler。并且添加了"),o(a,{to:"/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/mvc:resources/"},{default:c(()=>[n("mvc:resources/")]),_:1}),n("标签，专门用于解决静态资源无法访问问题。需要在 springmvc 配置文件中添加如下形式的配置：")]),d])}const h=t(u,[["render",m],["__file","6. url-pattern.html.vue"]]);export{h as default};
