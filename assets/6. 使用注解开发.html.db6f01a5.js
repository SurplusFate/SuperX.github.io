import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as s,e}from"./app.018e494d.js";const t={},o=e(`<h1 id="_6-使用注解开发" tabindex="-1"><a class="header-anchor" href="#_6-使用注解开发" aria-hidden="true">#</a> 6. 使用注解开发</h1><p>基于注解的 di: 通过注解完成 java 对象创建,属性赋值</p><ol><li><p>加入 maven 的依赖 spring-context ,在你加入 spring-context 的同时, 间接加入 spring-aop 的依赖</p><p>使用注解必须使用 spring-aop 依赖</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202209052232849.png" alt="注解开发"></p></li><li><p>在类中加入 spring 的注解（多个不同功能的注解）</p></li><li><p>在 spring 的配置文件中,加入一个组件扫描器的标签,说明注解在你的项目中的位置</p></li><li><p>学习的注解:</p><ol><li><code>@Component</code></li><li><code>@Repository</code></li><li><code>@Service</code></li><li><code>@Controller</code></li><li><code>@Value</code></li><li><code>@Autowired</code></li><li><code>@Resource</code></li></ol></li></ol><h2 id="_1-导入-context-约束-增加注解支持" tabindex="-1"><a class="header-anchor" href="#_1-导入-context-约束-增加注解支持" aria-hidden="true">#</a> 1. 导入 Context 约束, 增加注解支持</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
                           https://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!--声明组件扫描器(component-scan),组件就是java对象
        base-package: 指定注解在你的项目中的包名
        component-scan工作方式:  spring会扫描遍历base-package指定的包,
           把包中和子包中的所有类,找到类中的注解,按照注解的功能创建对象,或给属性赋值

       加入了component-scan标签,配置文件的变化:
        1.加入一个新的约束文件spring-context.xsd
        2.给这个新的约束文件起个命名空间的名称
    --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pojo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定多个包的三种方式</li></ul><blockquote><p>第一种方式: 使用多次组件扫描器,指定不同的包</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.bjpowernode.ba01<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.bjpowernode.ba02<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第二种方式: 使用分隔符（;或,）分隔多个包名</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.bjpowernode.ba01;com.bjpowernode.ba02<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>第三种方式: 指定父包</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.bjpowernode<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-注解" tabindex="-1"><a class="header-anchor" href="#_2-注解" aria-hidden="true">#</a> 2. 注解</h2><ol><li><p><code>@Component</code></p><blockquote><ul><li><p>创建对象的注解, 等同于<code>&lt;bean&gt;</code>的功能</p></li><li><p>属性:</p></li><li><p>value 就是对象的名称,也就是 bean 的 id 值,value 的值是唯一的,创建的对象在整个 spring 容器中就一个</p></li><li><p>省略 value<code>@Component(&quot;user&quot;)</code></p></li><li><p>不指定对象名称,由 spring 提供默认名称: 类名的首字母小写<code>@Component</code></p></li><li><p>位置: 在类的上面</p></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以在属性上</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>@Component</code>(value = &quot;user&quot;)等同于</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.demo.ba01.User<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote></li><li><p>衍生的注解</p><blockquote><ul><li><p><code>@Component</code>的衍生注解</p></li><li><p>dao [<code>@Repository</code>]</p></li><li><p>service[<code>@Service</code>]</p></li><li><p>controller[<code>@Controller</code>]</p></li></ul><p>以上三个注解的使用语法和<code>@Component</code>一样的 都能创建对象,但是这三个注解还有额外的功能</p><p><code>@Repository</code>,<code>@Service</code>,<code>@Controller</code>是给项目的对象分层的</p></blockquote></li><li><p><code>@Value</code></p><blockquote><ul><li><p>简单类型的属性赋值</p></li><li><p>属性:</p><ul><li>value 是 String 类型的,表示简单类型的属性值</li></ul></li><li><p>位置:</p><ul><li>可以在属性上, 也可以在方法上, 在属性定义的上面,<strong>无需 set 方法</strong>, 推荐使用</li></ul></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以在属性上</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token comment">// 也可以在方法上</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>@Autowired</code></p><blockquote><ul><li>引用类型的赋值</li><li><code>@Autowired</code> spring 框架提供的注解,实现引用类型的赋值</li><li>spring 中通过注解给引用类型赋值,使用的是自动注入原理,支持 byName, byType</li><li><code>@Autowired</code>: 默认使用的是 byType 自动注入</li><li>属性: required,是一个 boolean 类型的,默认 true <ul><li>required=true: 表示引用类型赋值失败,程序报错,并终止执行</li><li>required=false: 引用类型如果赋值失败, 程序正常执行,引用类型是 null</li></ul></li><li>位置: <ul><li>可以在属性上, 也可以在方法上, 在属性定义的上面,<strong>无需 set 方法</strong>, 推荐使用</li></ul></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果要使用 byName 方式,需要做的是:</p></li><li><p>在属性上面加入<code>@Autowired</code></p></li><li><p>在属性上面加入<code>@Qualifier(value=&quot;bean的id&quot;)</code>: 表示使用指定名称的 bean 完成赋值</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;school&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>@Resource</code></p><blockquote><ul><li>引用类型</li><li>来自 jdk 中的注解,spring 框架提供了对这个注解的功能支持,可以使用它给引用类型赋值, 使用的也是自动注入原理,支持 byName, byType ,默认是 byName</li><li>位置: <ul><li>可以在属性上, 也可以在方法上, 在属性定义的上面,<strong>无需 set 方法</strong>, 推荐使用</li></ul></li><li>默认是 byName: 先使用 byName 自动注入,如果 byName 赋值失败,再使用 byType</li><li><code>@Resource</code> 只使用 byName 方式,需要增加一个属性 name</li><li>name 的值是 bean 的 id（名称）</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;school&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">School</span> school2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>@Scope(&quot;xxx&quot;)</code></p><blockquote><p>修改作用域</p><ul><li><p>singleton 单例模式 -- 全局有且仅有一个实例</p></li><li><p>prototype 原型模式 -- 每次获取 Bean 的时候会有一个新的实例</p></li><li><p>request -- request 表示该针对每一次 HTTP 请求都会产生一个新的 bean,同时该 bean 仅在当前 HTTP request 内有效</p></li><li><p>session -- session 作用域表示该针对每一次 HTTP 请求都会产生一个新的 bean,同时该 bean 仅在当前 HTTP session 内有效</p></li><li><p>globalsession -- global session 作用域类似于标准的 HTTP Session 作用域,不过它仅仅在基于 portlet 的 web 应用中才有意义</p></li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>小结</p><blockquote><ul><li><p>xml: 万能, 适用性任何场景, 维护简单方便</p></li><li><p>注解: 不是自己的类使用不了, 维护复杂</p></li><li><p>xml 与注解的最佳实践</p><ol><li>xml 管理 bean</li><li>注解完成属性的注入</li></ol></li></ul></blockquote></li></ol>`,14),p=[o];function l(c,i){return a(),s("div",null,p)}const r=n(t,[["render",l],["__file","6. 使用注解开发.html.vue"]]);export{r as default};
