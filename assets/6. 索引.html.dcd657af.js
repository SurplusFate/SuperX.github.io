import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as d,e as l}from"./app.c25ca293.js";const c={},i=l(`<h1 id="_6-索引" tabindex="-1"><a class="header-anchor" href="#_6-索引" aria-hidden="true">#</a> 6. 索引</h1><p>索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录。本节将详细讲解索引的含义、作用和优缺点。</p><p>通过索引，查询数据时不用读完记录的所有信息，而只是查询索引列。否则，数据库系统将读取每条记录的所有信息进行匹配。</p><p>可以把索引比作新华字典的音序表。例如，要查“库”字，如果不使用音序，就需要从字典的 400 页中逐页来找。但是，如果提取拼音出来，构成音序表，就只需要从 10 多页的音序表中直接查找。这样就可以大大节省时间。</p><p>因此，使用索引可以很大程度上提高数据库的查询速度，还有效的提高了数据库系统的性能。</p><h2 id="索引的优缺点" tabindex="-1"><a class="header-anchor" href="#索引的优缺点" aria-hidden="true">#</a> 索引的优缺点</h2><p>索引有其明显的优势，也有其不可避免的缺点。</p><p><strong>优点：</strong></p><p>索引的优点如下：</p><ul><li>通过创建唯一索引可以保证数据库表中每一行数据的唯一性。</li><li>可以给所有的 MySQL 列类型设置索引。</li><li>可以大大加快数据的查询速度，这是使用索引最主要的原因。</li><li>在实现数据的参考完整性方面可以加速表与表之间的连接。</li><li>在使用分组和排序子句进行数据查询时也可以显著减少查询中分组和排序的时间</li></ul><p><strong>缺点：</strong></p><p>增加索引也有许多不利的方面，主要如下：</p><ul><li>创建和维护索引组要耗费时间，并且随着数据量的增加所耗费的时间也会增加。</li><li>索引需要占磁盘空间，除了数据表占数据空间以外，每一个索引还要占一定的物理空间。如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态维护，这样就降低了数据的维护速度。</li></ul><p>使用索引时，需要综合考虑索引的优点和缺点。</p><p>索引可以提高查询速度，但是会影响插入记录的速度。因为，向有索引的表中插入记录时，数据库系统会按照索引进行排序，这样就降低了插入记录的速度，插入大量记录时的速度影响会更加明显。这种情况下，最好的办法是先删除表中的索引，然后插入数据，插入完成后，再创建索引。</p><h2 id="索引类型" tabindex="-1"><a class="header-anchor" href="#索引类型" aria-hidden="true">#</a> 索引类型</h2><p>索引的类型和存储引擎有关，每种存储引擎所支持的索引类型不一定完全相同。MySQL 索引可以从存储方式、逻辑角度和实际使用的角度来进行分类。</p><p><strong>逻辑区分：</strong></p><p>根据索引的具体用途，MySQL 中的索引在逻辑上分为以下 5 类：</p><ol><li><p>普通索引</p><p>普通索引是 MySQL 中最基本的索引类型，它没有任何限制，唯一任务就是加快系统对数据的访问速度。</p><p>普通索引允许在定义索引的列中插入重复值和空值。</p><p>创建普通索引时，通常使用的关键字是 <code>INDEX</code> 或 <code>KEY</code>。</p></li><li><p>唯一索引</p><p>唯一索引与普通索引类似，不同的是创建唯一性索引的目的不是为了提高访问速度，而是为了避免数据出现重复。</p><p>唯一索引列的值必须唯一，允许有空值。如果是组合索引，则列值的组合必须唯一。</p><p>创建唯一索引通常使用 <code>UNIQUE</code> 关键字。</p></li><li><p>主键索引</p><p>顾名思义，主键索引就是专门为主键字段创建的索引，也属于索引的一种。</p><p>主键索引是一种特殊的唯一索引，不允许值重复或者值为空。</p><p>创建主键索引通常使用 <code>PRIMARY KEY</code> 关键字。不能使用 <code>CREATE INDEX</code> 语句创建主键索引。</p></li><li><p>空间索引</p><p>空间索引是对空间数据类型的字段建立的索引，使用 <code>SPATIAL</code> 关键字进行扩展。</p><p>创建空间索引的列必须将其声明为 <code>NOT NULL</code>，空间索引只能在存储引擎为 <code>MyISAM</code> 的表中创建。</p><p>空间索引主要用于地理空间数据类型 <code>GEOMETRY</code>。对于初学者来说，这类索引很少会用到。</p></li><li><p>全文索引</p><p>全文索引主要用来查找文本中的关键字，只能在 <code>CHAR、VARCHAR</code> 或 <code>TEXT</code> 类型的列上创建。在 MySQL 中只有 <code>MyISAM</code> 存储引擎支持全文索引。</p><p>全文索引允许在索引列中插入重复值和空值。</p><p>不过对于大容量的数据表，生成全文索引非常消耗时间和硬盘空间。</p><p>创建全文索引使用 <code>FULLTEXT</code> 关键字。</p></li></ol><p><strong>实际使用区分：</strong></p><p>索引在逻辑上分为以上 5 类，但在实际使用中，索引通常被创建成单列索引和组合索引。</p><ol><li><p>单列索引</p><p>单列索引就是索引只包含原表的一个列。在表中的单个字段上创建索引，单列索引只根据该字段进行索引。</p><p>单列索引可以是普通索引，也可以是唯一性索引，还可以是全文索引。只要保证该索引只对应一个字段即可。</p></li><li><p>多列索引</p><p>组合索引也称为复合索引或多列索引。相对于单列索引来说，组合索引是将原表的多个列共同组成一个索引。多列索引是在表的多个字段上创建一个索引。该索引指向创建时对应的多个字段，可以通过这几个字段进行查询。但是，只有查询条件中使用了这些字段中第一个字段时，索引才会被使用。</p><p>例如，在表中的 <code>id</code>、<code>name</code> 和 <code>sex</code> 字段上建立一个多列索引，那么，只有查询条件使用了 <code>id</code> 字段时，该索引才会被使用。</p></li></ol><p>提示：一个表可以有多个单列索引，但这些索引不是组合索引。一个组合索引实质上为表的查询提供了多个索引，以此来加快查询速度。比如，在一个表中创建了一个组合索引(c1，c2，c3)，在实际查询中，系统用来实际加速的索引有三个：单个索引(c1)、双列索引(c1，c2)和多列索引(c1，c2，c3)。</p><h2 id="索引的创建" tabindex="-1"><a class="header-anchor" href="#索引的创建" aria-hidden="true">#</a> 索引的创建</h2><p>创建索引是指在某个表的一列或多列上建立一个索引，可以提高对表的访问速度。创建索引对 MySQL 数据库的高效运行来说是很重要的。</p><p><strong>基本语法：</strong></p><p>MySQL 提供了三种创建索引的方法：</p><ol><li><p>使用 <code>CREATE INDEX</code> 语句</p><p>可以使用专门用于创建索引的 <code>CREATE INDEX</code> 语句在一个已有的表上创建索引，但该语句不能创建主键。</p><p>语法格式：</p><blockquote><p>CREATE &lt;索引名&gt; ON &lt;表名&gt; (&lt;列名&gt; [&lt;长度&gt;] [ ASC | DESC])</p></blockquote><p>语法说明如下：</p><ul><li><code>&lt;索引名&gt;</code>：指定索引名。一个表可以创建多个索引，但每个索引在该表中的名称是唯一的。</li><li><code>&lt;表名&gt;</code>：指定要创建索引的表名。</li><li><code>&lt;列名&gt;</code>：指定要创建索引的列名。通常可以考虑将查询语句中在 JOIN 子句和 WHERE 子句里经常出现的列作为索引列。</li><li><code>&lt;长度&gt;</code>：可选项。指定使用列前的 length 个字符来创建索引。使用列的一部分创建索引有利于减小索引文件的大小，节省索引列所占的空间。在某些情况下，只能对列的前缀进行索引。索引列的长度有一个最大上限 255 个字节（<code>MyISAM</code> 和 <code>InnoDB</code> 表的最大上限为 1000 个字节），如果索引列的长度超过了这个上限，就只能用列的前缀进行索引。另外，BLOB 或 TEXT 类型的列也必须使用前缀索引。</li><li><code>ASC|DESC</code>：可选项。<code>ASC</code> 指定索引按照升序来排列，<code>DESC</code> 指定索引按照降序来排列，默认为 <code>ASC</code>。</li></ul></li><li><p>使用 <code>CREATE TABLE</code> 语句</p><p>索引也可以在创建表（CREATE TABLE）的同时创建。在 CREATE TABLE 语句中添加以下语句。</p><p>语法格式：</p><blockquote><p>CONSTRAINT PRIMARY KEY [索引类型] (&lt;列名&gt;,…)</p></blockquote><p>在 CREATE TABLE 语句中添加此语句，表示在创建新表的同时创建该表的主键。</p><p>语法格式：</p><blockquote><p>KEY | INDEX [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</p></blockquote><p>在 <code>CREATE TABLE</code> 语句中添加此语句，表示在创建新表的同时创建该表的索引。</p><p>语法格式：</p><blockquote><p>UNIQUE [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</p></blockquote><p>在 <code>CREATE TABLE</code> 语句中添加此语句，表示在创建新表的同时创建该表的唯一性索引。</p><p>语法格式：</p><blockquote><p>FOREIGN KEY &lt;索引名&gt; &lt;列名&gt;</p></blockquote><p>在 <code>CREATE TABLE</code> 语句中添加此语句，表示在创建新表的同时创建该表的外键。</p><p>在使用 <code>CREATE TABLE</code> 语句定义列选项的时候，可以通过直接在某个列定义后面添加 <code>PRIMARY KEY</code> 的方式创建主键。而当主键是由多个列组成的多列索引时，则不能使用这种方法，只能用在语句的最后加上一个 <code>PRIMARY KRY(&lt;列名&gt;，…) 子句</code> 的方式来实现。</p></li><li><p>使用 <code>ALTER TABLE</code> 语句</p><p><code>CREATE INDEX</code> 语句可以在一个已有的表上创建索引，<code>ALTER TABLE</code> 语句也可以在一个已有的表上创建索引。在使用 <code>ALTER TABLE</code> 语句修改表的同时，可以向已有的表添加索引。具体的做法是在 <code>ALTER TABLE</code> 语句中添加以下语法成分的某一项或几项。</p><p>语法格式：</p><blockquote><p>ADD INDEX [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</p></blockquote><p>在 <code>ALTER TABLE</code> 语句中添加此语法成分，表示在修改表的同时为该表添加索引。</p><p>语法格式：</p><blockquote><p>ADD PRIMARY KEY [&lt;索引类型&gt;] (&lt;列名&gt;,…)</p></blockquote><p>在 <code>ALTER TABLE</code> 语句中添加此语法成分，表示在修改表的同时为该表添加主键。</p><p>语法格式：</p><blockquote><p>ADD UNIQUE [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…)</p></blockquote><p>在 <code>ALTER TABLE</code> 语句中添加此语法成分，表示在修改表的同时为该表添加唯一性索引。</p><p>语法格式：</p><blockquote><p>ADD FOREIGN KEY [&lt;索引名&gt;] (&lt;列名&gt;,…)</p></blockquote><p>在 <code>ALTER TABLE</code> 语句中添加此语法成分，表示在修改表的同时为该表添加外键。</p></li></ol><h3 id="创建普通索引" tabindex="-1"><a class="header-anchor" href="#创建普通索引" aria-hidden="true">#</a> 创建普通索引</h3><p>创建普通索引时，通常使用 <code>INDEX</code> 关键字。</p><p>示例：在创建 <code>tb_stu_info</code> 表时添加普通索引</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE tb_stu_info

(

id INT NOT NULL,

name CHAR(45) DEFAULT NULL,

dept_id INT DEFAULT NULL,

age INT DEFAULT NULL,

height INT DEFAULT NULL,

INDEX (height)

);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建唯一索引" tabindex="-1"><a class="header-anchor" href="#创建唯一索引" aria-hidden="true">#</a> 创建唯一索引</h3><p>创建唯一索引，通常使用 <code>UNIQUE</code> 参数。</p><p>示例：创建一个表 <code>tb_stu_info2</code>，在该表的 <code>id</code> 字段上使用 <code>UNIQUE</code> 关键字创建唯一索引。</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>CREATE TABLE tb_stu_info2
(
 id INT NOT NULL,
 name CHAR(45) DEFAULT NULL,
 dept_id INT DEFAULT NULL,
 age INT DEFAULT NULL,
 height INT DEFAULT NULL,
 UNIQUE INDEX (height)
);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看索引" tabindex="-1"><a class="header-anchor" href="#查看索引" aria-hidden="true">#</a> 查看索引</h3><p>索引创建完成后，可以利用 SQL 语句查看已经存在的索引。在 MySQL 中，可以使用 <code>SHOW INDEX</code> 语句查看表中创建的索引。</p><p>查看索引的语法格式如下：</p><blockquote><p>SHOW INDEX FROM &lt;表名&gt; [ FROM &lt;数据库名&gt;]</p></blockquote><p>语法说明如下：</p><ul><li><p><code>&lt;表名&gt;</code>：指定需要查看索引的数据表名。</p></li><li><p><code>&lt;数据库名&gt;</code>：指定需要查看索引的数据表所在的数据库，可省略。比如，<code>SHOW INDEX FROM student FROM test;</code> 语句表示查看 <code>test</code> 数据库中 <code>student</code> 数据表的索引。</p><p>示例：查看学生索引</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>SHOW INDEX FROM student FROM stumis;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202208261703568.png" alt="202208261703568"></p></li></ul><p>主要参数说明</p><table><thead><tr><th style="text-align:center;"><strong>参数</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;">Table</td><td style="text-align:center;">表示创建索引的数据表名，这里是 tb_stu_info2 数据表。</td></tr><tr><td style="text-align:center;">Non_unique</td><td style="text-align:center;">表示该索引是否是唯一索引。若不是唯一索引，则该列的值为 1；若是唯一索引，则该列的值为 0。</td></tr><tr><td style="text-align:center;">Key_name</td><td style="text-align:center;">表示索引的名称。</td></tr><tr><td style="text-align:center;">Seq_in_index</td><td style="text-align:center;">表示该列在索引中的位置，如果索引是单列的，则该列的值为 1；如果索引是组合索引，则该列的值为每列在索引定义中的顺序。</td></tr><tr><td style="text-align:center;">Column_name</td><td style="text-align:center;">表示定义索引的列字段。</td></tr><tr><td style="text-align:center;">Collation</td><td style="text-align:center;">表示列以何种顺序存储在索引中。在 MySQL 中，升序显示值“A”（升序），若显示为 NULL，则表示无分类。</td></tr><tr><td style="text-align:center;">Cardinality</td><td style="text-align:center;">索引中唯一值数目的估计值。基数根据被存储为整数的统计数据计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。</td></tr><tr><td style="text-align:center;">Sub_part</td><td style="text-align:center;">表示列中被编入索引的字符的数量。若列只是部分被编入索引，则该列的值为被编入索引的字符的数目；若整列被编入索引，则该列的值为 NULL。</td></tr><tr><td style="text-align:center;">Packed</td><td style="text-align:center;">指示关键字如何被压缩。若没有被压缩，值为 NULL。</td></tr><tr><td style="text-align:center;">Null</td><td style="text-align:center;">用于显示索引列中是否包含 NULL。若列含有 NULL，该列的值为 YES。若没有，则该列的值为 NO。</td></tr><tr><td style="text-align:center;">Index_type</td><td style="text-align:center;">显示索引使用的类型和方法（BTREE、FULLTEXT、HASH、RTREE）。</td></tr><tr><td style="text-align:center;">Comment</td><td style="text-align:center;">显示评注。</td></tr></tbody></table><h3 id="修改和删除索引" tabindex="-1"><a class="header-anchor" href="#修改和删除索引" aria-hidden="true">#</a> 修改和删除索引</h3><p>删除索引是指将表中已经存在的索引删除掉。不用的索引建议进行删除，因为它们会降低表的更新速度，影响数据库的性能。对于这样的索引，应该将其删除。</p><p>在 MySQL 中修改索引可以通过删除原索引，再根据需要创建一个同名的索引，从而实现修改索引的操作。</p><p><strong>基本语法：</strong></p><p>当不再需要索引时，可以使用 <code>DROP INDEX</code> 语句或 <code>ALTER TABLE</code> 语句来对索引进行删除。</p><ol><li><p>使用 <code>DROP INDEX</code> 语句</p><p>语法格式：</p><blockquote><p>DROP INDEX &lt;索引名&gt; ON &lt;表名&gt;</p></blockquote><p>语法说明如下：</p><ul><li>&lt;索引名&gt;：要删除的索引名。</li><li>&lt;表名&gt;：指定该索引所在的表名。</li></ul></li><li><p>使用 <code>ALTER TABLE</code> 语句</p><p>根据 <code>ALTER TABLE</code> 语句的语法可知，该语句也可以用于删除索引。具体使用方法是将 <code>ALTER TABLE</code> 语句的语法中部分指定为以下子句中的某一项。</p><ul><li><code>DROP PRIMARY KEY</code>：表示删除表中的主键。一个表只有一个主键，主键也是一个索引。</li><li><code>DROP INDEX index_name</code>：表示删除名称为 <code>index_name</code> 的索引。</li><li><code>DROP FOREIGN KEY fk_symbol</code>：表示删除外键。</li></ul></li></ol><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果删除的列是索引的组成部分，那么在删除该列时，也会将该列从索引中删除；如果组成索引的所有列都被删除，那么整个索引将被删除。</p></div><h3 id="设计原则和注意事项" tabindex="-1"><a class="header-anchor" href="#设计原则和注意事项" aria-hidden="true">#</a> 设计原则和注意事项</h3><p>索引的设计可以遵循一些已有的原则，创建索引的时候应尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。本节将介绍一些索引的设计原则。</p><ol><li><p>选择唯一性索引</p><p>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p></li><li><p>为经常需要排序、分组和联合操作的字段建立索引</p><p>经常需要 <code>ORDER BY</code>、<code>GROUP BY</code>、<code>DISTINCT</code> 和 <code>UNION</code> 等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p></li><li><p>为常作为查询条件的字段建立索引</p><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>常查询条件的字段不一定是所要选择的列，换句话说，最适合索引的列是出现在 WHERE 子句中的列，或连接子句中指定的列，而不是出现在 SELECT 关键字后的选择列表中的列。</p></div></li><li><p>限制索引的数目</p><p>索引的数目不是“越多越好”。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。在修改表的内容时，索引必须进行更新，有时还可能需要重构。因此，索引越多，更新表的时间就越长。</p><p>如果有一个索引很少利用或从不使用，那么会不必要地减缓表的修改速度。此外，MySQL 在生成一个执行计划时，要考虑各个索引，这也要花费时间。创建多余的索引给查询优化带来了更多的工作。索引太多，也可能会使 MySQL 选择不到所要使用的最佳索引。</p></li><li><p>尽量使用数据量少的索引</p><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个 <code>CHAR(100)</code> 类型的字段进行全文检索需要的时间肯定要比对 <code>CHAR(10)</code> 类型的字段需要的时间要多。</p></li><li><p>数据量小的表最好不要使用索引</p><p>由于数据较小，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</p></li><li><p>尽量使用前缀来索引</p><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，<code>TEXT</code> 和 <code>BLOG</code> 类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p></li><li><p>删除不再使用或者很少使用的索引</p><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。应该定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p></li></ol>`,55),o=[i];function p(n,a){return t(),d("div",null,o)}const E=e(c,[["render",p],["__file","6. 索引.html.vue"]]);export{E as default};
