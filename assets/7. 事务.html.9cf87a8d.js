import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,e as c}from"./app.3016d384.js";const d={},a=c('<h1 id="_7-事务" tabindex="-1"><a class="header-anchor" href="#_7-事务" aria-hidden="true">#</a> 7. 事务</h1><p>在银行业务中，有一条记账原则，即有借有贷，借贷相等。为了保证这种原则，每发生一笔银行业务，就必须确保会计账目上借方科目和贷方科目至少各记一笔，并且这两笔账要么同时成功，要么同时失败。如果出现只记录了借方科目，或者只记录了贷方科目的情况，就违反了记账原则。会出现记错账的情况。</p><p>在银行的日常业务中，只要是同一银行（如都是中国农业银行，简称农行），一般都支持账户间的直接转账。因此，银行转账操作往往会涉及两个或两个以上的账户。在转出账户的存款减少一定金额的同时，转入账户的存款就要增加相应的金额。</p><p>事务可以将一系列的数据操作捆绑成一个整体进行统一管理，如果某一事务执行成功，则在该事务中进行的所有数据更改均会提交，成为数据库中的永久组成部分。如果事务执行时遇到错误，则就必须取消或回滚。取消或回滚后，数据将全部恢复到操作前的状态，所有数据的更改均被清除。</p><p>MySQL 通过事务保证了数据的一致性。上述提到的转账过程就是一个事务，它需要两条 UPDATE 语句来完成。这两条语句是一个整体，如果其中任何一个环节出现问题，则整个转账业务也应取消，两个账户中的余额应恢复为原来的数据，从而确保转账前和转账后的余额总和不变。</p><h2 id="事务的基本概念" tabindex="-1"><a class="header-anchor" href="#事务的基本概念" aria-hidden="true">#</a> 事务的基本概念</h2><p>数据库的**事务（Transaction）**是一种机制、一个操作序列，包含了一组数据库操作命令。事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元。</p><p>在数据库系统上执行并发操作时，事务是作为最小的控制单元来使用的，特别适用于多用户同时操作的数据库系统。例如，航空公司的订票系统、银行、保险公司以及证券交易系统等。</p><p>事务具有 4 个特性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），这 4 个特性通常简称为 ACID。</p><ol><li><p>原子性</p><p>事务是一个完整的操作。事务的各元素是不可分的（原子的）。事务中的所有元素必须作为一个整体提交或回滚。如果事务中的任何元素失败，则整个事务将失败。</p><p>以银行转账事务为例，如果该事务提交了，则这两个账户的数据将会更新。如果由于某种原因，事务在成功更新这两个账户之前终止了，则不会更新这两个账户的余额，并且会撤销对任何账户余额的修改，事务不能部分提交。</p></li><li><p>一致性</p><p>当事务完成时，数据必须处于一致状态。也就是说，在事务开始之前，数据库中存储的数据处于一致状态。在正在进行的事务中. 数据可能处于不一致的状态，如数据可能有部分被修改。然而，当事务成功完成时，数据必须再次回到已知的一致状态。通过事务对数据所做的修改不能损坏数据，或者说事务不能使数据存储处于不稳定的状态。</p><p>以银行转账事务事务为例。在事务开始之前，所有账户余额的总额处于一致状态。在事务进行的过程中，一个账户余额减少了，而另一个账户余额尚未修改。因此，所有账户余额的总额处于不一致状态。事务完成以后，账户余额的总额再次恢复到一致状态。</p></li><li><p>隔离性</p><p>对数据进行修改的所有并发事务是彼此隔离的，这表明事务必须是独立的，它不应以任何方式依赖于或影响其他事务。修改数据的事务可以在另一个使用相同数据的事务开始之前访问这些数据，或者在另一个使用相同数据的事务结束之后访问这些数据。</p><p>另外，当事务修改数据时，如果任何其他进程正在同时使用相同的数据，则直到该事务成功提交之后，对数据的修改才能生效。张三和李四之间的转账与王五和赵二之间的转账，永远是相互独立的。</p></li><li><p>持久性</p><p>事务的持久性指不管系统是否发生了故障，事务处理的结果都是永久的。</p><p>一个事务成功完成之后，它对数据库所作的改变是永久性的，即使系统出现故障也是如此。也就是说，一旦事务被提交，事务对数据所做的任何变动都会被永久地保留在数据库中。</p><p>事务的 ACID 原则保证了一个事务或者成功提交，或者失败回滚，二者必居其一。因此，它对事务的修改具有可恢复性。即当事务失败时，它对数据的修改都会恢复到该事务执行前的状态。</p></li></ol><h2 id="事务提交与回滚" tabindex="-1"><a class="header-anchor" href="#事务提交与回滚" aria-hidden="true">#</a> 事务提交与回滚</h2><p>SQL 使用下列语句来管理事务。</p><ol><li><p>开始事务</p><p><code>BEGIN;</code>或<code>START TRANSACTION;</code></p><p>这个语句显式地标记一个事务的起始点。</p></li><li><p>提交事务</p><p>MySQL 使用下面的语句来显示提交事务：<code>COMMIT</code>;</p><p><code>COMMIT</code> 表示提交事务，即提交事务的所有操作，具体地说，就是将事务中所有对数据库的更新都写到磁盘上的物理数据库中，事务正常结束。</p><p>提交事务，意味着将事务开始以来所执行的所有数据都修改成为数据库的永久部分，因此也标志着一个事务的结束。一旦执行了该命令，将不能回滚事务。只有在所有修改都准备好提交给数据库时，才执行这一操作。</p><p>在 MySQL 中，更新语句、数据定义语句和权限管理语句是隐式提交的。</p><p>更新语句有：<code>BEGIN</code>、<code>START TRANSACTION</code>、<code>RENAME</code> <code>TABLE</code>、<code>TRUNCATE TABLE</code> 等。</p><p>数据定义语句（CREATE、ALTER、DROP）有：<code>CREATE DATABASE</code>、<code>ALTER TABLE</code>、<code>DROP VIEW</code> 等。权限管理和账户管理语句：<code>GRANT</code>、<code>SET PASSWORD</code>、<code>CREATE USER</code>、<code>DROP USER</code> 等。</p></li><li><p>回滚（撤销）事务</p><p>先关闭 MySQL 的自动提交功能：<code>SET AUTOCOMMIT = 0;</code></p><p>MySQL 回滚事务：<code>ROLLBACK;</code></p><p><code>ROLLBACK</code> 表示撤销事务，即在事务运行的过程中发生了某种故障，事务不能继续执行，系统将事务中对数据库的所有已完成的操作全部撤销，回滚到事务开始时的状态。这里的操作指对数据库的更新操作。</p><p>当事务执行过程中遇到错误时，使用 <code>ROLLBACK</code> 语句使事务回滚到起点或指定的保持点处。同时，系统将清除自事务起点或到某个保存点所做的所有的数据修改，并且释放由事务控制的资源。因此，这条语句也标志着事务的结束。</p></li></ol><h2 id="保存点" tabindex="-1"><a class="header-anchor" href="#保存点" aria-hidden="true">#</a> 保存点</h2><p>保存点可以实现事务的“部分”提交或部分回滚。可以使用<code>SAVEPOINT 保存点名;</code>语句创建保存点。然后执行<code>ROLLBACK TO 保存点名;</code>语句回滚到已经设置好的保存点。回滚到保存点后不会自动提交，事务结束必须使用 <code>COMMIT</code> 或 <code>ROLLBACK</code> 命令。</p>',15),i=[a];function r(t,l){return o(),p("div",null,i)}const n=e(d,[["render",r],["__file","7. 事务.html.vue"]]);export{n as default};
