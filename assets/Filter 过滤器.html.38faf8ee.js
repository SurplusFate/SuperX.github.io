import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as p,a as n,b as s,d as t,e as o,r as i}from"./app.78c3ab32.js";const c={},r=o(`<h1 id="filter-过滤器" tabindex="-1"><a class="header-anchor" href="#filter-过滤器" aria-hidden="true">#</a> Filter 过滤器</h1><blockquote><ol><li>Filter 过滤器它是 JavaWeb 的三大组件之一。三大组件分别是：Servlet 程序、Listener 监听器、Filter 过滤器。</li><li>Filter 过滤器它是 JavaEE 的规范。也就是接口</li><li>Filter 过滤器它的作用是：拦截请求，过滤响应。</li></ol></blockquote><p>拦截请求常见的应用场景有：</p><ol><li>权限检查</li><li>日记操作</li><li>事务管理 ……等等</li></ol><p>Filter 过滤器的使用步骤：</p><ol><li>编写一个类去实现 Filter 接口</li><li>实现过滤方法 doFilter()</li><li>到 web.xml 中去配置 Filter 的拦截路径</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
    * doFilter 方法，专门用于拦截请求。可以做权限检查
    */</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> user <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果等于 null，说明还没有登录</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            servletRequest<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 让程序继续往下访问用户的目标资源</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>web.xml 中的配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--filter 标签用于配置一个 Filter 过滤器--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--给 filter 起一个别名--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--配置 filter 的全类名--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.atguigu.filter.AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--filter-mapping 配置 Filter 过滤器的拦截路径--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--filter-name 表示当前的拦截路径给哪个 filter 使用--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>AdminFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--url-pattern 配置拦截路径 / 表示请求地址为：http://ip:port/工程路径/ 映射到 IDEA 的 web 目录 /admin/* 表示请求地址为：http://ip:port/工程路径/admin/* --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/admin/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="filter-的生命周期" tabindex="-1"><a class="header-anchor" href="#filter-的生命周期" aria-hidden="true">#</a> Filter 的生命周期</h2><p>Filter 的生命周期包含几个方法</p><ol><li>构造器方法</li><li>init 初始化方法 第 1，2 步，在 web 工程启动的时候执行（Filter 已经创建）</li><li>doFilter 过滤方法 第 3 步，每次拦截到请求，就会执行</li><li>destroy 销毁 第 4 步，停止 web 工程的时候，就会执行（停止 web 工程，也会销毁 Filter 过滤器）</li></ol><h2 id="filter-的拦截路径" tabindex="-1"><a class="header-anchor" href="#filter-的拦截路径" aria-hidden="true">#</a> Filter 的拦截路径</h2><h3 id="精确匹配" tabindex="-1"><a class="header-anchor" href="#精确匹配" aria-hidden="true">#</a> 精确匹配</h3>`,14),u=n("code",null,"<url-pattern>/target.jsp</url-pattern>",-1),d={href:"http://ip:port/%E5%B7%A5%E7%A8%8B%E8%B7%AF%E5%BE%84/target.jsp",target:"_blank",rel:"noopener noreferrer"},k=n("h3",{id:"目录匹配",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#目录匹配","aria-hidden":"true"},"#"),s(" 目录匹配")],-1),m=n("code",null,"<url-pattern>/admin/*</url-pattern>",-1),v={href:"http://ip:port/%E5%B7%A5%E7%A8%8B%E8%B7%AF%E5%BE%84/admin/*",target:"_blank",rel:"noopener noreferrer"},h=n("h3",{id:"后缀名匹配",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#后缀名匹配","aria-hidden":"true"},"#"),s(" 后缀名匹配")],-1),g=n("p",null,[n("code",null,"<url-pattern>*.html</url-pattern>"),s(" 以上配置的路径，表示请求地址必须以.html 结尾才会拦截到")],-1),b=n("p",null,[n("code",null,"<url-pattern>*.do</url-pattern>"),s(" 以上配置的路径，表示请求地址必须以.do 结尾才会拦截到")],-1),f=n("p",null,[n("code",null,"<url-pattern>*.action</url-pattern>"),s(" 以上配置的路径，表示请求地址必须以.action 结尾才会拦截到")],-1),_=n("blockquote",null,[n("p",null,"Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在！！！")],-1);function F(x,q){const a=i("ExternalLinkIcon");return l(),p("div",null,[r,n("p",null,[u,s(" 以上配置的路径，表示请求地址必须为："),n("a",d,[s("http://ip:port/工程路径/target.jsp"),t(a)])]),k,n("p",null,[m,s(" 以上配置的路径，表示请求地址必须为："),n("a",v,[s("http://ip:port/工程路径/admin/*"),t(a)])]),h,g,b,f,_])}const R=e(c,[["render",F],["__file","Filter 过滤器.html.vue"]]);export{R as default};
