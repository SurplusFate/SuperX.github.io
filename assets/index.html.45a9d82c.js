import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c,a as e,b as a,d as n,e as i,r as l}from"./app.691e2e41.js";const r={},p=e("h1",{id:"git",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),a(" Git")],-1),o=e("p",null,"在线练习:",-1),u={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},g=i(`<h2 id="基础篇" tabindex="-1"><a class="header-anchor" href="#基础篇" aria-hidden="true">#</a> 基础篇</h2><p>设置全局账号信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置全局的用户名称</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;tangseng&quot;</span>

<span class="token comment"># 设置全局的邮箱地址</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;tangseng@bjpowernode.com&quot;</span>

<span class="token comment"># 查看全局配置信息</span>
<span class="token function">git</span> config <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建本地仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加到暂存区(.git 文件夹)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> 文件名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看文件状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>红色代表没有被 git 管理的文件，即使是已经管理过，但是修改后，也是红色的状态</p><p>绿色代表添加到暂存区的文件</p><p>已暂存：文件被管理到暂存区，绿色</p><p>未修改：文件还没有被管理到暂存区，红色</p><p>已提交：文件已经交给 git 仓库进行管理了</p></blockquote><p>提交修改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;日志信息&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个分支 <code>bugFix</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>bugFix<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除分支</p><blockquote><p>创建出的分支如果没有被修改，可以通过普通的方式进行删除</p><p>创建出的分支如果被修改过，那么就必须强制删除了</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token comment"># 普通删除</span>
 <span class="token function">git</span> branch <span class="token parameter variable">-d</span> 分支名称

 <span class="token comment"># 强制删除</span>
 <span class="token function">git</span> branch <span class="token parameter variable">-D</span> 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><em>在 Git 2.23 版本中，引入了一个名为 <code>git switch</code> 的新命令，最终会取代 <code>git checkout</code>，因为 <code>checkout</code> 作为单个命令有点超载（它承载了很多独立的功能）。</em></p></div><p>多个分支是在提交后才会创建出来</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041413130.png" alt="image-20221104141331080"></p><h3 id="分支与合并" tabindex="-1"><a class="header-anchor" href="#分支与合并" aria-hidden="true">#</a> 分支与合并</h3><p>将不同分支的修改合并到一起</p><p>merge 合并</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把 <code>bugFix</code> 的提交合并到 <code>main</code> 里</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 先切换到 bugFix 分支</span>
<span class="token function">git</span> switch bugFix
<span class="token comment"># 将该分支的提交合并到 main</span>
<span class="token function">git</span> merge main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rebase 合并</p><p>优势就是可以创造更线性的提交历史</p><blockquote><p>理解为将当前分支的提交复制一份到目标分支的子节点</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 <code>bugFix</code> 的提交使用 <code>rebase</code> 合并到 <code>main</code> 分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch bugFix
<span class="token function">git</span> rebase main
<span class="token function">git</span> switch main
<span class="token function">git</span> rebase bugFix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>冲突的产生和解决</p><blockquote><p>冲突的产生原因就是两个或多个人或两个分支，修改了同一个文件的相同或相邻的几行，那么导致 git 在合并代码时，不知道以谁为主，这就产生了冲突</p><p>解决冲突也非常简单，删除标记 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> <code>===========</code> <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>，保留代码，提交到本地仓库即可，同时也可以推送到远程仓库</p></blockquote><h2 id="高级篇" tabindex="-1"><a class="header-anchor" href="#高级篇" aria-hidden="true">#</a> 高级篇</h2><p>查看日志信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看本地日志信息</span>
<span class="token function">git</span> log
<span class="token comment"># 查看本地日志信息，简介模式</span>
<span class="token function">git</span> log <span class="token parameter variable">--oneline</span>
<span class="token comment"># 查看历史日志信息</span>
<span class="token function">git</span> reflog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看提交的文件内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看此次提交的文件列表</span>
<span class="token function">git</span> ls-tree commit 唯一标识

<span class="token comment"># 查看文件列表中的文件内容</span>
<span class="token function">git</span> cat-file blob 文件的唯一标识
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件内容比较</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 比较的是本地仓库的工作目录的文件差异</span>
<span class="token function">git</span> <span class="token function">diff</span> 文件名称

<span class="token comment"># 其他版本的文件比较，比较的是其他版本的本地仓库的内容和当前的文件的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> 版本标识 文件名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果文件没有被本地仓库管理，那么可以直接删除</span>
<span class="token comment"># 如果文件已经被本地仓库管理，那么直接删除，本地仓库中还是包含这个文件的</span>
<span class="token comment"># 先删除文件，再添加到暂存区，然后提交到本地仓库中</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> 文件名称

<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;日志信息&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="head-引用" tabindex="-1"><a class="header-anchor" href="#head-引用" aria-hidden="true">#</a> HEAD 引用</h3><p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><h4 id="分离的-head" tabindex="-1"><a class="header-anchor" href="#分离的-head" aria-hidden="true">#</a> 分离的 HEAD</h4><p>分离的 HEAD 就是让其指向了某个具体的<strong>提交记录</strong>而不是分支名。在命令执行之前的状态如下所示：</p><blockquote><p>HEAD -&gt; main -&gt; C1</p></blockquote><p>执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch C1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在变成了</p><blockquote><p>HEAD -&gt; C1</p></blockquote><div class="custom-container tip"><p class="custom-container-title">提示</p><p>提交记录实际是以哈希值的方式存储, 在实际应用时，不得不用 <code>git log</code> 来查查看提交记录的哈希值。</p><p>Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。</p><p><code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code></p><p>可以仅输入 <code>fed2</code> 而不是上面的一长串字符。</p></div><h3 id="相对引用" tabindex="-1"><a class="header-anchor" href="#相对引用" aria-hidden="true">#</a> 相对引用</h3><p>使用 <code>^</code> 向上移动 1 个提交记录</p><p><code>main^</code> 相当于 “<code>main</code> 的父节点”</p><p><code>main^^</code> 是 <code>main</code> 的第二个父节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch main^^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以将 <code>HEAD</code> 作为相对引用的参照</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 分离 HEAD</span>
<span class="token function">git</span> switch C3
<span class="token comment"># 移动到父节点</span>
<span class="token function">git</span> switch HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch HEAD~3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="强制修改分支位置" tabindex="-1"><a class="header-anchor" href="#强制修改分支位置" aria-hidden="true">#</a> 强制修改分支位置</h4><p>使用 <code>-f</code> 选项让分支指向另一个提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-f</span> main HEAD~3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会将 main 分支强制指向 HEAD 的第 3 级父提交。</p><p>也可以指定具体提交记录的哈希值。</p><h3 id="撤销变更" tabindex="-1"><a class="header-anchor" href="#撤销变更" aria-hidden="true">#</a> 撤销变更</h3><p>reset 撤销</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 版本唯一标识
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过把分支记录回退几个提交记录来实现撤销改动。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD~1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把 main 分支移回到 <code>C1</code>；在 reset 后， <code>C2</code> 所做的变更还在，但是处于未加入暂存区状态。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041623843.png" alt="image-20221104162309805"></p><p>revert 撤销</p><p><code>git reset</code> 只能在本地分支使用, 远程分支无效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> revert HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在我们要撤销的提交记录后面会多一个新提交, 这是因为新提交记录 <code>C2&#39;</code> 引入了<strong>更改</strong> —— 这些更改刚好是用来撤销 <code>C2</code> 这个提交的。也就是说 <code>C2&#39;</code> 的状态与 <code>C1</code> 是相同的。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041627300.png" alt="image-20221104162709263"></p><p>文件找回</p><blockquote><p>通过撤销的命令，切换到没有删除的提交当中即可，保存好你当前的代码，再去操作</p></blockquote><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="整理提交记录" tabindex="-1"><a class="header-anchor" href="#整理提交记录" aria-hidden="true">#</a> 整理提交记录</h3><p>cherry-pick</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>提交号<span class="token operator">&gt;</span><span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将被目标提交记录抓过来追加到当前分支下。</p><p>将另外一个分支的 <code>C2</code> 和 <code>C4</code> 的提交记录抓到当前分支 <code>main</code> 下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick C2 C4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="交互式的-rebase" tabindex="-1"><a class="header-anchor" href="#交互式的-rebase" aria-hidden="true">#</a> 交互式的 rebase</h3><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令，简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项，Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>当 rebase UI 界面打开时，你能做 3 件事:</p><ul><li>调整提交记录的顺序</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> C1 C5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会把 <code>C2</code> 到 <code>C5</code> 的提交记录显示出来</p><h3 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h3><p>标签不会随着分支的提交而前进, 可以标记一些大版本的版本更新之类的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag v1 C1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将这个标签命名为 <code>v1</code>，并且明确地让它指向提交记录 <code>C1</code>，如果你不指定提交记录，Git 会用 <code>HEAD</code> 所指向的位置。</p><h3 id="锚点" tabindex="-1"><a class="header-anchor" href="#锚点" aria-hidden="true">#</a> 锚点</h3><p>由于标签在代码库中起着 “锚点” 的作用，Git 还为此专门设计了一个命令用来<strong>描述</strong>离你最近的锚点（也就是标签），它就是 <code>git describe</code>！</p><p>Git Describe 能帮你在提交历史中移动了多次以后找到方向；当你用 <code>git bisect</code>（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时，可能会用到这个命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> describe <span class="token operator">&lt;</span>ref<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&lt;ref&gt;</code> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（<code>HEAD</code>）。</p><p>它输出的结果是这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span>_<span class="token operator">&lt;</span>numCommits<span class="token operator">&gt;</span>_g<span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>tag</code> 表示的是离 <code>ref</code> 最近的标签， <code>numCommits</code> 是表示这个 <code>ref</code> 与 <code>tag</code> 相差有多少个提交记录， <code>hash</code> 表示的是你所给定的 <code>ref</code> 所表示的提交记录哈希值的前几位。</p><p>当 <code>ref</code> 提交记录上有某个标签时，则只输出标签名称</p><h3 id="选择父提交记录" tabindex="-1"><a class="header-anchor" href="#选择父提交记录" aria-hidden="true">#</a> 选择父提交记录</h3><p>操作符 <code>^</code> 与 <code>~</code> 符一样，后面也可以跟一个数字。</p><p>但是该操作符后面的数字与 <code>~</code> 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。</p><p>Git 默认选择合并提交的 “第一个” 父提交，在操作符 <code>^</code> 后跟一个数字可以改变这一默认行为。</p><p>如果不加数字修改符直接检出 <code>main^</code>，会回到第一个父提交记录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch main^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回到另外一个父分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch main^2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041756674.png" alt="image-20221104175600633"></p><p>这些操作符还支持链式操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch HEAD~^2~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041758651.png" alt="image-20221104175814614"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041758045.png" alt="image-20221104175828009"></p><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><h3 id="注册远程账号" tabindex="-1"><a class="header-anchor" href="#注册远程账号" aria-hidden="true">#</a> 注册远程账号</h3>`,132),m=e("code",null,"[推荐]",-1),h=e("li",null,"服务器在国内，中文",-1),b={href:"https://gitee.com",target:"_blank",rel:"noopener noreferrer"},v=e("li",null,"服务器在国外，网络不稳定， 英文",-1),f={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},k=i(`<h3 id="关联远程仓库" tabindex="-1"><a class="header-anchor" href="#关联远程仓库" aria-hidden="true">#</a> 关联远程仓库</h3><p>将本地仓库与远程仓库建立关联关系</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 建立远程仓库的关联关系，可以建立多个</span>
<span class="token function">git</span> remote <span class="token function">add</span> 关联名称 仓库地址

<span class="token comment"># 查询当前本地仓库关联的远程仓库关系</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除关联关系" tabindex="-1"><a class="header-anchor" href="#删除关联关系" aria-hidden="true">#</a> 删除关联关系</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote remove 关联名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="克隆" tabindex="-1"><a class="header-anchor" href="#克隆" aria-hidden="true">#</a> 克隆</h3><p><code>git clone</code> 命令在真实的环境下的作用是在<strong>本地</strong>创建一个远程仓库的拷贝（比如从 github.com）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="远程分支" tabindex="-1"><a class="header-anchor" href="#远程分支" aria-hidden="true">#</a> 远程分支</h3><p>克隆完成后本地仓库会多一个名为 <code>o/main</code> 的分支，这种类型的分支就叫<strong>远程</strong>分支。由于远程分支的特性导致其拥有一些特殊属性。</p><p>远程分支反映了远程仓库 (在你上次和它通信时) 的<strong>状态</strong>。这会有助于你理解本地的工作与公共工作的差别 —— 这是你与别人分享工作成果前至关重要的一步.</p><p>远程分支有一个特别的属性，在你检出时自动进入分离 HEAD 状态。Git 这么做是出于不能直接在这些分支上进行操作的原因，你必须在别的地方完成你的工作，（更新了远程分支之后）再用远程分享你的工作成果。</p><h4 id="为什么有-o" tabindex="-1"><a class="header-anchor" href="#为什么有-o" aria-hidden="true">#</a> 为什么有 <code>o/</code>？</h4><p>远程分支有一个命名规范 —— 它们的格式是:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>remote name<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此，如果你看到一个名为 <code>o/main</code> 的分支，那么这个分支就叫 <code>main</code>，远程仓库的名称就是 <code>o</code>。</p><p>大多数的开发人员会将它们主要的远程仓库命名为 <code>origin</code>，并不是 <code>o</code>。这是因为当你用 <code>git clone</code> 某个仓库时，Git 已经帮你把远程仓库的名称设置为 <code>origin</code> 了</p><h3 id="删除远程分支" tabindex="-1"><a class="header-anchor" href="#删除远程分支" aria-hidden="true">#</a> 删除远程分支</h3><p>除了远程仓库的默认分支外，其余分支都可以被删除掉</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-d</span> 远程分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从远程仓库获取数据" tabindex="-1"><a class="header-anchor" href="#从远程仓库获取数据" aria-hidden="true">#</a> 从远程仓库获取数据</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们从远程仓库获取数据时，远程分支也会更新以反映最新的远程仓库。</p><p><code>git fetch</code> 完成了仅有的但是很重要的两步:</p><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新远程分支指针 (如 <code>o/main</code>)</li></ul><p><code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。</p><p>理解这一点很重要，因为许多开发人员误以为执行了 <code>git fetch</code> 以后，他们本地仓库就与远程仓库同步了。它可能已经将进行这一操作所需的所有数据都下载了下来，但是<strong>并没有</strong>修改你本地的文件</p><h3 id="合并数据" tabindex="-1"><a class="header-anchor" href="#合并数据" aria-hidden="true">#</a> 合并数据</h3><p>可以像合并本地分支那样来合并远程分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick o/main
<span class="token function">git</span> rebase o/main
<span class="token function">git</span> merge o/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。</p><p>使用 <code>git pull</code></p><p>拉取本地已有的分支代码，更新代码</p><p>拉取本地没有的代码，更新分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将当前远程分支代码更新到本地所处分支</span>
<span class="token function">git</span> pull 关联名称 远程分支名称

<span class="token comment"># 将远程仓库的分支更新下来</span>
<span class="token function">git</span> pull 关联名称 远程分支名称:本地分支名称

<span class="token comment"># 如果强制的要求远程分支和本地分支进行合并需要指定参数--allow-unrelated-histories</span>
<span class="token function">git</span> pull 关联名称 远程分支名称 --allow-unrelated-histories
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="推送本地代码到远程仓库中" tabindex="-1"><a class="header-anchor" href="#推送本地代码到远程仓库中" aria-hidden="true">#</a> 推送本地代码到远程仓库中</h3><p>第一次推送代码时，会输入用户名和密码</p><p>如果密码输入错误，清理 windows 的 git 凭证，重新推送，输入用户名和密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push 关联名称 本地仓库分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="历史偏离" tabindex="-1"><a class="header-anchor" href="#历史偏离" aria-hidden="true">#</a> 历史偏离</h3><p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目<strong>旧版</strong>的代码，与远程仓库最新的代码不匹配了。</p><p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 <code>push</code> 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p><p><strong>解决办法:</strong></p><ol><li><p>用 <code>rebase</code>, 用 <code>git fetch</code> 更新本地仓库中的远程分支，然后用 rebase 将我们的工作移动到最新的提交记录下，最后再用 <code>git push</code> 推送到远程仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch<span class="token punctuation">;</span> <span class="token function">git</span> rebase o/main<span class="token punctuation">;</span> <span class="token function">git</span> push<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>用 <code>merge</code>, 尽管 <code>git merge</code> 不会移动你的工作（它会创建新的合并提交），但是它会告诉 Git 你已经合并了远程仓库的所有变更。这是因为远程分支现在是你本地分支的祖先，也就是说你的提交已经包含了远程分支的所有变化。</p><p>用 <code>git fetch</code> 更新了本地仓库中的远程分支，然后<strong>合并</strong>了新变更到我们的本地分支（为了包含远程仓库的变更），最后我们用 <code>git push</code> 把工作推送到远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch<span class="token punctuation">;</span> <span class="token function">git</span> merge o/main<span class="token punctuation">;</span> <span class="token function">git</span> push<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>用 <code>git pull --rebase</code>, <code>git pull --rebase</code> 是 fetch 和 rebase 的简写！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull --rebase<span class="token punctuation">;</span> <span class="token function">git</span> push<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="远程服务器拒绝" tabindex="-1"><a class="header-anchor" href="#远程服务器拒绝" aria-hidden="true">#</a> 远程服务器拒绝</h2><p>如果你是在一个大的合作团队中工作，很可能是 main 被锁定了，需要一些 Pull Request 流程来合并修改。如果你直接提交 (commit) 到本地 main, 然后试图推送 (push) 修改，你将会收到这样类似的信息:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">!</span> <span class="token punctuation">[</span>远程服务器拒绝<span class="token punctuation">]</span> main -<span class="token operator">&gt;</span> main <span class="token punctuation">(</span>TF402455: 不允许推送<span class="token punctuation">(</span>push<span class="token punctuation">)</span>这个分支<span class="token punctuation">;</span> 你必须使用pull request来更新这个分支.<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="为什么会被拒绝" tabindex="-1"><a class="header-anchor" href="#为什么会被拒绝" aria-hidden="true">#</a> 为什么会被拒绝？</h3><p>远程服务器拒绝直接推送 (push) 提交到 main, 因为策略配置要求 pull requests 来提交更新.</p><h3 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h3><p>新建一个分支 feature, 推送到远程服务器。然后 reset 你的 main 分支和远程服务器保持一致，否则下次你 pull 并且他人的提交和你冲突的时候就会有问题.</p><h2 id="公司多人合作项目-git-基本操作流程" tabindex="-1"><a class="header-anchor" href="#公司多人合作项目-git-基本操作流程" aria-hidden="true">#</a> 公司多人合作项目 Git 基本操作流程</h2><h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>一般我们进到公司，公司的代码库已经是创建好了的，我们只需要拉取代码到本地即可。所以就不讲解仓库初始化的操作了。</p><p>大部分公司现在都使用的是 <strong>GitLab</strong> 搭建的私服来作为公司的 Git 服务器，<strong>GitLab，GitHub，Gitee</strong> 本质使用的都是 <strong>Git</strong> 工具，所以操作方法也是大同小异，下面具体给大家讲解一下刚进公司的 <strong>Git</strong> 使用方法。</p><h3 id="git-工具下载" tabindex="-1"><a class="header-anchor" href="#git-工具下载" aria-hidden="true">#</a> Git 工具下载</h3><p>一般公司电脑都会安装好 Git，如果没有安装，或者自己电脑没装可以使用下面的链接下载安装，推荐使用淘宝的 CDN 镜像，下载速度更快！</p>`,57),x={href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"},_={href:"https://registry.npmmirror.com/binary.html?path=git-for-windows/",target:"_blank",rel:"noopener noreferrer"},F=i(`<p>淘宝镜像这个选择好版本之后点击进入文件夹，然后选择对应的 64 位.exe 就行了</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/7761e215eb134bb98c3b550d935caefd.png" alt="在这里插入图片描述"><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/a9f81021f7c3451ca4c618552951956b.png" alt="在这里插入图片描述"></p><p>安装过程过于简单，省略啦。。。（双击安装程序，下一步下一步就好啦）</p><p>安装记得勾选 git bash 的选项，就可以在桌面或者目录直接右键打开 git 命令行了。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/22ed097279124e6391852bc7604a3e4c.png" alt="在这里插入图片描述"></p><p>已安装的可以输入一下命令查看 Git 版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/761e2054c4314eb09bef6517c56e369a.png" alt="在这里插入图片描述"></p><p>看到上面的信息就说明 Git 安装成功了，可以继续下面的操作了</p><h3 id="配置-git-用户信息" tabindex="-1"><a class="header-anchor" href="#配置-git-用户信息" aria-hidden="true">#</a> 配置 Git 用户信息</h3><p>有的童鞋看到 Git 已安装好就直接开始进行 clone - 修改 - add - commit 一系列操作了（就比如在下），这是不对的，安装好的 Git 虽然可以直接使用，但是很重要的用户信息没有配置，就会导致提交代码的时候显示别人的名字。正确的步骤是要先检查一边当前配置的用户信息。</p><p>使用下面的命令来查看当前的用户名和邮箱</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--list</span> <span class="token comment"># global查看全局配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/234e459986bd4704b0d9e0de3f72191c.png" alt="在这里插入图片描述"></p><p>如果发现上面的邮箱和用户名不是自己的，可以使用下面的命令修改成自己的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;你的名字&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;你的邮箱&quot;</span>
<span class="token comment"># 或者直接在VIM编辑器直接编辑：</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">-e</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/537183b379b04f4fae62ef992e8eac2d.png" alt="在这里插入图片描述"></p><p>配置完成后就可以开开心心的拉代码了。</p><h3 id="重点" tabindex="-1"><a class="header-anchor" href="#重点" aria-hidden="true">#</a> 重点</h3><h4 id="一、拉取远程代码-gitee" tabindex="-1"><a class="header-anchor" href="#一、拉取远程代码-gitee" aria-hidden="true">#</a> 一、拉取远程代码（Gitee）</h4><p>开始接触项目后，公式领导或者同事就会将你拉人项目组，这个时候会给你 Git 地址，或者让你注册 GItHub、GitLab、Gitee 的账号，注册过程就不解释了，下面直接进入到拉取项目的环节。</p><p>下面以 Gitee 为例： 注册登录成功之后，点击屏幕中间的 <strong>我的</strong> 查看自己的仓库，公司项目组里面的项目可能在里面。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/cd75c5d218124ca1842fd5b201b9f572.png" alt="在这里插入图片描述"></p>`,23),G={href:"https://gitee.com/iuoly/tomson-yipin",target:"_blank",rel:"noopener noreferrer"},j=i(`<p>首先点击仓库名进入</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/5353de789680496dbdf73615912ce92e.png" alt="在这里插入图片描述"></p><p>如果是单人项目的话，可以直接点击 <strong>克隆 / 下载</strong> 按钮获取仓库的地址，然后克隆到本地，但是公司多人开发可以不用这样，我们先创建一个自己的分支（命名按照公司的要求），具体步骤如下：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/b5a72662438c427caccba0f9da06b140.png" alt="在这里插入图片描述"><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/448c29a7bd7b452aa985f48ec7481c29.png" alt="在这里插入图片描述"></p><p>回到首页看到分支里面有自己的分支就可以开始下面的操作啦。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/d40cfed484034ce0b3d84b59730b3b54.png" alt="在这里插入图片描述"></p><p>复制仓库地址</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/ebae8da63d9c43c8aeacaf10a11ecffc.png" alt="在这里插入图片描述"></p><p>可以在 Git 命令行直接输入下面的代码来克隆项目，显得很专业</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://gitee.com/iuoly/tomson-yipin.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后将克隆好的项目在 IDEA 开发工具中打开。这边推荐一个更便捷的方法：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/48f7241b78eb46c7a637ed3227a5d96e.png" alt="在这里插入图片描述"><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/91f64fa3414348ce91eda3992a63cc7a.png" alt="在这里插入图片描述"></p><p>点击 clone 按钮，项目就会自动克隆下来并打开。（超级方便）</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/ff8e98f1862d4e3bb37afeeef7dd0dbe.png" alt="在这里插入图片描述"></p><p>这个时候，大家是不是就要直接开始写代码了，不对，还有一件事要做，那就是把本地的分支也切换到你创建的远程分支，不建议直接在 master 分支上面直接进行改动。（我又踩坑)</p><p>具体步骤是：</p><p>点击下方的工具栏中的 master</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/583d506a346441328e5d2f2e0b60e22c.png" alt="在这里插入图片描述"></p><p>选择自己创建的远程分支，点击 checkout ，切换到自己的分支。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/641f88e7aafd4c43a77fbcf380fe5345.png" alt="在这里插入图片描述"></p><p>返回就可以查看分支变化啦。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/f58c4aa21f4c41ab9f932e142bc64d79.png" alt="在这里插入图片描述"></p><h4 id="二、本地代码提交" tabindex="-1"><a class="header-anchor" href="#二、本地代码提交" aria-hidden="true">#</a> 二、本地代码提交</h4><p>在自己的分支上开发完成后，需要提交代码的时候，可以直接使用命令行来操作，但是也更推荐直接使用 IDEA 上面的 Git 工具。</p><p>提交前，先 pull 更新一下代码，防止有其他同事修改的代码没有同步到本地</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/de32a89f02b34fce88dda27e389f88da.png" alt="在这里插入图片描述"></p><p>然后点击下面的分支，选择远程的 master 分支， 将远程 master 分支上面的改动合并到自己的分支中，这个时候如果发生了冲突需要自己手动合并。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/a275628f2b9e4ea3aa5de0355d9ab544.png" alt="在这里插入图片描述"></p><p>没有冲突的话，就可以直接提交自己的代码啦！</p><p>点击上方工具栏中的 √</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/36b7d865a3e4446891029b745f710624.png" alt="在这里插入图片描述"></p><p>上面查看是否是自己改动的文件，确认无误在下面写上提交的备注信息，一般用于解释自己这次提交的改动。</p><p>然后点击 commitAndPush 就可以自动提交并推送到远程</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/bcd810c7b8a2484c813aba276f1758d7.png" alt="在这里插入图片描述"></p><p>推送前查看远程分支名是否正确。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/dbc52128a68f4408b879e945e713b5e5.png" alt="在这里插入图片描述"></p><p>点击 PUSH 之后， 就可以在 Gitee 上面查看到提交的信息了。</p><p>但是这个时候我们知识把自己的代码提交到自己的远程分支上面了，怎么和大家的代码合到一起呢？</p><p>继续往下：</p><h4 id="三、pull-request" tabindex="-1"><a class="header-anchor" href="#三、pull-request" aria-hidden="true">#</a> 三、Pull Request</h4><p>我们在自己的分支上面进行了开发，这个时候就要用到 Pull Request 来创建合并请求，将我们的代码合并到主分支上面去，如何操作嗯？ 在 Gitee 上面进入仓库， 点击中间的 + Pull Request</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/df5238c19ed74370bbbf0a965f8fddc4.png" alt="在这里插入图片描述"></p><p>选择源分支为我们自己的分支，目标分支位 master 主分支。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/9e8635dabc034b8abc2f863aaf55f5cc.png" alt="在这里插入图片描述"></p><p>因为我是这个项目的管理员，所以这边显示可自动合并，实际工作中我们是没有合并的权限的，需要在右边指定审查人员，并且在左边框内填写提交信息让其他人知道目的。然后将这个合并请求提交给有权限的人（一般是项目经理）</p><p>左边可以配置其他选项，可自行了解。</p><p>底部可以继续查看提交记录和文件改动。</p><p>确保万无一失之后就可以点击创建 Pull Request 按钮来创建合并请求。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/17e9816c252a49c2b82c19cea94e23ac.png" alt="在这里插入图片描述"></p><p>管理员看到之后就可以帮你合并代码啦。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211051710220.png" alt="在这里插入图片描述"><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211051710135.png" alt="在这里插入图片描述"><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/65e6581dbc7c47a1b054db9e79eb0973.png" alt="在这里插入图片描述"></p><p>这个时候查看主分支，也会有你修改的记录，你的本次开发代码就成功加入到组织里啦。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211051710366.png" alt="在这里插入图片描述"></p><p>后面要继续进行修改，步骤从头再来一遍就好了。但是要记得拉取代码之后将主分支代码合并到本地自己分支。</p><h4 id="github" tabindex="-1"><a class="header-anchor" href="#github" aria-hidden="true">#</a> GitHub</h4><p>Github 的操作和 Git 大同小异，就不具体讲解了，贴一下具体操作的位置图</p><p>在这里插入图片描述</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/f1ea545847d6408b93290a635a9e1ad0.png" alt="在这里插入图片描述"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/86ba3727dcaf40f39801ede2538a0704.png" alt="在这里插入图片描述"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/262c881969934a638b954449ea12645d.png" alt="在这里插入图片描述"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/ca1df48b8e8443e9b46871345d350ca5.png" alt="在这里插入图片描述"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/44a8ee18fd0e4dcfbbea917d2cf5a05e.png" alt="在这里插入图片描述"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/a730a4e3f625483fb3a52a96079881ab.png" alt="在这里插入图片描述"></p><h4 id="gitlab" tabindex="-1"><a class="header-anchor" href="#gitlab" aria-hidden="true">#</a> GitLab</h4><p>对于一些保密要求较高的企业来说，将代码存放在 Gitee 、获取 Github 等开源网站上不是一个很好的选择，所以就有了 GitLab 这个可以自己搭建的开源代码仓库私服，一般用于企业内部代码版本控制，操作流程和 Gitee/Github 也差不多：</p><p>仓库位置：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/904c252f2d5d4e20b0c7cca9000192d5.png" alt="在这里插入图片描述"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/21c764534d5742909aea82c358d34e1d.png" alt="在这里插入图片描述"></p><p>创建分支</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/10075dabd75046caae53b37daa9d2eb9.png" alt="在这里插入图片描述"></p><p>合并请求位置，或者在提交改动后会有弹窗按钮</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/aeea29f6c91e45cfbf3e07ae85015c80.png" alt="在这里插入图片描述"></p><p>选择分支</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/403ce7d8db204602a91f36f3e8b08732.png" alt="在这里插入图片描述"></p><h2 id="同步fork仓库-git-upstream" tabindex="-1"><a class="header-anchor" href="#同步fork仓库-git-upstream" aria-hidden="true">#</a> 同步Fork仓库 git upstream</h2>`,75),S={href:"https://www.jianshu.com/p/7f6598253a2b",target:"_blank",rel:"noopener noreferrer"},q=i(`<p>查看你的远程仓库的路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果只有origin的两行, 说明你未设置 upstream （中文叫：上游代码库） 一般情况下，设置好一次 upstream 后就无需重复设置。</p></blockquote><p>执行命令:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> upstream https://*.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次执行命令 <code>git remote -v</code> 检查是否成功</p><p>将未提交的提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令 <code>git fetch upstream</code> 抓取原仓库的更新</p><p>执行命令 <code>git merge upstream/master</code> 合并远程的master分支</p><p>执行命令 <code>git push</code> 把本地仓库向github仓库（你fork到自己名下的仓库）推送修改</p>`,11);function w(C,D){const s=l("ExternalLinkIcon");return t(),c("div",null,[p,o,e("p",null,[e("a",u,[a("Learn Git Branching"),n(s)])]),g,e("ul",null,[e("li",null,[a("Gitee "),m,e("ul",null,[h,e("li",null,[e("a",b,[a("https://gitee.com"),n(s)])])])]),e("li",null,[a("Github "),e("ul",null,[v,e("li",null,[e("a",f,[a("https://github.com"),n(s)])])])])]),k,e("blockquote",null,[e("p",null,[a("1 官网下载："),e("a",x,[a("https://git-scm.com/download/win"),n(s)]),a(" 2. 国内淘宝镜像（速度更快）："),e("a",_,[a("https://registry.npmmirror.com/binary.html?path=git-for-windows/"),n(s)])])]),F,e("p",null,[a("下面假设 我们公司的项目是这个"),e("a",G,[a("汤臣亿品（springboot+vue 智慧社区管理系统）"),n(s)])]),j,e("p",null,[e("a",S,[a("同步Fork仓库 git upstream - 简书 (jianshu.com)"),n(s)])]),q])}const H=d(r,[["render",w],["__file","index.html.vue"]]);export{H as default};
