import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as l,a as e,b as a,d as n,e as i,r as t}from"./app.dfee58c2.js";const o={},r=i(`<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><h2 id="基础篇" tabindex="-1"><a class="header-anchor" href="#基础篇" aria-hidden="true">#</a> 基础篇</h2><p>设置全局账号信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置全局的用户名称</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;tangseng&quot;</span>

<span class="token comment"># 设置全局的邮箱地址</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;tangseng@bjpowernode.com&quot;</span>

<span class="token comment"># 查看全局配置信息</span>
<span class="token function">git</span> config <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建本地仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加到暂存区(.git 文件夹)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> 文件名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看文件状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>红色代表没有被 git 管理的文件，即使是已经管理过，但是修改后，也是红色的状态</p><p>绿色代表添加到暂存区的文件</p><p>已暂存：文件被管理到暂存区，绿色</p><p>未修改：文件还没有被管理到暂存区，红色</p><p>已提交：文件已经交给 git 仓库进行管理了</p></blockquote><p>提交修改</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;日志信息&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建一个分支 <code>bugFix</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token operator">&lt;</span>bugFix<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>切换分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除分支</p><blockquote><p>创建出的分支如果没有被修改，可以通过普通的方式进行删除</p><p>创建出的分支如果被修改过，那么就必须强制删除了</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token comment"># 普通删除</span>
 <span class="token function">git</span> branch <span class="token parameter variable">-d</span> 分支名称

 <span class="token comment"># 强制删除</span>
 <span class="token function">git</span> branch <span class="token parameter variable">-D</span> 分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><em>在 Git 2.23 版本中，引入了一个名为 <code>git switch</code> 的新命令，最终会取代 <code>git checkout</code>，因为 <code>checkout</code> 作为单个命令有点超载（它承载了很多独立的功能）。</em></p></div><p>多个分支是在提交后才会创建出来</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041413130.png" alt="image-20221104141331080"></p><h3 id="分支与合并" tabindex="-1"><a class="header-anchor" href="#分支与合并" aria-hidden="true">#</a> 分支与合并</h3><p>将不同分支的修改合并到一起</p><p>merge 合并</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把 <code>bugFix</code> 的提交合并到 <code>main</code> 里</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 先切换到 bugFix 分支</span>
<span class="token function">git</span> switch bugFix
<span class="token comment"># 将该分支的提交合并到 main</span>
<span class="token function">git</span> merge main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rebase 合并</p><p>优势就是可以创造更线性的提交历史</p><blockquote><p>理解为将当前分支的提交复制一份到目标分支的子节点</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 <code>bugFix</code> 的提交使用 <code>rebase</code> 合并到 <code>main</code> 分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch bugFix
<span class="token function">git</span> rebase main
<span class="token function">git</span> switch main
<span class="token function">git</span> rebase bugFix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>冲突的产生和解决</p><blockquote><p>冲突的产生原因就是两个或多个人或两个分支，修改了同一个文件的相同或相邻的几行，那么导致 git 在合并代码时，不知道以谁为主，这就产生了冲突</p><p>解决冲突也非常简单，删除标记 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> <code>===========</code> <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>，保留代码，提交到本地仓库即可，同时也可以推送到远程仓库</p></blockquote><h2 id="高级篇" tabindex="-1"><a class="header-anchor" href="#高级篇" aria-hidden="true">#</a> 高级篇</h2><p>查看日志信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看本地日志信息</span>
<span class="token function">git</span> log
<span class="token comment"># 查看本地日志信息，简介模式</span>
<span class="token function">git</span> log <span class="token parameter variable">--oneline</span>
<span class="token comment"># 查看历史日志信息</span>
<span class="token function">git</span> reflog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看提交的文件内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看此次提交的文件列表</span>
<span class="token function">git</span> ls-tree commit 唯一标识

<span class="token comment"># 查看文件列表中的文件内容</span>
<span class="token function">git</span> cat-file blob 文件的唯一标识
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件内容比较</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 比较的是本地仓库的工作目录的文件差异</span>
<span class="token function">git</span> <span class="token function">diff</span> 文件名称

<span class="token comment"># 其他版本的文件比较，比较的是其他版本的本地仓库的内容和当前的文件的差异</span>
<span class="token function">git</span> <span class="token function">diff</span> 版本标识 文件名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果文件没有被本地仓库管理，那么可以直接删除</span>
<span class="token comment"># 如果文件已经被本地仓库管理，那么直接删除，本地仓库中还是包含这个文件的</span>
<span class="token comment"># 先删除文件，再添加到暂存区，然后提交到本地仓库中</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> 文件名称

<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;日志信息&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="head-引用" tabindex="-1"><a class="header-anchor" href="#head-引用" aria-hidden="true">#</a> HEAD 引用</h3><p>HEAD 是一个对当前检出记录的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。</p><p>HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。</p><h4 id="分离的-head" tabindex="-1"><a class="header-anchor" href="#分离的-head" aria-hidden="true">#</a> 分离的 HEAD</h4><p>分离的 HEAD 就是让其指向了某个具体的<strong>提交记录</strong>而不是分支名。在命令执行之前的状态如下所示：</p><blockquote><p>HEAD -&gt; main -&gt; C1</p></blockquote><p>执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch C1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在变成了</p><blockquote><p>HEAD -&gt; C1</p></blockquote><div class="custom-container tip"><p class="custom-container-title">提示</p><p>提交记录实际是以哈希值的方式存储, 在实际应用时，不得不用 <code>git log</code> 来查查看提交记录的哈希值。</p><p>Git 对哈希的处理很智能。你只需要提供能够唯一标识提交记录的前几个字符即可。</p><p><code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code></p><p>可以仅输入 <code>fed2</code> 而不是上面的一长串字符。</p></div><h3 id="相对引用" tabindex="-1"><a class="header-anchor" href="#相对引用" aria-hidden="true">#</a> 相对引用</h3><p>使用 <code>^</code> 向上移动 1 个提交记录</p><p><code>main^</code> 相当于 “<code>main</code> 的父节点”</p><p><code>main^^</code> 是 <code>main</code> 的第二个父节点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch main^^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以将 <code>HEAD</code> 作为相对引用的参照</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 分离 HEAD</span>
<span class="token function">git</span> switch C3
<span class="token comment"># 移动到父节点</span>
<span class="token function">git</span> switch HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如 <code>~3</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch HEAD~3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="强制修改分支位置" tabindex="-1"><a class="header-anchor" href="#强制修改分支位置" aria-hidden="true">#</a> 强制修改分支位置</h4><p>使用 <code>-f</code> 选项让分支指向另一个提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-f</span> main HEAD~3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令会将 main 分支强制指向 HEAD 的第 3 级父提交。</p><p>也可以指定具体提交记录的哈希值。</p><h3 id="撤销变更" tabindex="-1"><a class="header-anchor" href="#撤销变更" aria-hidden="true">#</a> 撤销变更</h3><p>reset 撤销</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 版本唯一标识
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过把分支记录回退几个提交记录来实现撤销改动。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD~1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把 main 分支移回到 <code>C1</code>；在 reset 后， <code>C2</code> 所做的变更还在，但是处于未加入暂存区状态。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041623843.png" alt="image-20221104162309805"></p><p>revert 撤销</p><p><code>git reset</code> 只能在本地分支使用, 远程分支无效</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> revert HEAD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在我们要撤销的提交记录后面会多一个新提交, 这是因为新提交记录 <code>C2&#39;</code> 引入了<strong>更改</strong> —— 这些更改刚好是用来撤销 <code>C2</code> 这个提交的。也就是说 <code>C2&#39;</code> 的状态与 <code>C1</code> 是相同的。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041627300.png" alt="image-20221104162709263"></p><p>文件找回</p><blockquote><p>通过撤销的命令，切换到没有删除的提交当中即可，保存好你当前的代码，再去操作</p></blockquote><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="整理提交记录" tabindex="-1"><a class="header-anchor" href="#整理提交记录" aria-hidden="true">#</a> 整理提交记录</h3><p>cherry-pick</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>提交号<span class="token operator">&gt;</span><span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将被目标提交记录抓过来追加到当前分支下。</p><p>将另外一个分支的 <code>C2</code> 和 <code>C4</code> 的提交记录抓到当前分支 <code>main</code> 下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick C2 C4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="交互式的-rebase" tabindex="-1"><a class="header-anchor" href="#交互式的-rebase" aria-hidden="true">#</a> 交互式的 rebase</h3><p>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令，简写为 <code>-i</code></p><p>如果你在命令后增加了这个选项，Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</p><p>当 rebase UI 界面打开时，你能做 3 件事:</p><ul><li>调整提交记录的顺序</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> C1 C5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会把 <code>C2</code> 到 <code>C5</code> 的提交记录显示出来</p><h3 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h3><p>标签不会随着分支的提交而前进, 可以标记一些大版本的版本更新之类的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag v1 C1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将这个标签命名为 <code>v1</code>，并且明确地让它指向提交记录 <code>C1</code>，如果你不指定提交记录，Git 会用 <code>HEAD</code> 所指向的位置。</p><h3 id="锚点" tabindex="-1"><a class="header-anchor" href="#锚点" aria-hidden="true">#</a> 锚点</h3><p>由于标签在代码库中起着 “锚点” 的作用，Git 还为此专门设计了一个命令用来<strong>描述</strong>离你最近的锚点（也就是标签），它就是 <code>git describe</code>！</p><p>Git Describe 能帮你在提交历史中移动了多次以后找到方向；当你用 <code>git bisect</code>（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时，可能会用到这个命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> describe <span class="token operator">&lt;</span>ref<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&lt;ref&gt;</code> 可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（<code>HEAD</code>）。</p><p>它输出的结果是这样的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span>_<span class="token operator">&lt;</span>numCommits<span class="token operator">&gt;</span>_g<span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>tag</code> 表示的是离 <code>ref</code> 最近的标签， <code>numCommits</code> 是表示这个 <code>ref</code> 与 <code>tag</code> 相差有多少个提交记录， <code>hash</code> 表示的是你所给定的 <code>ref</code> 所表示的提交记录哈希值的前几位。</p><p>当 <code>ref</code> 提交记录上有某个标签时，则只输出标签名称</p><h3 id="选择父提交记录" tabindex="-1"><a class="header-anchor" href="#选择父提交记录" aria-hidden="true">#</a> 选择父提交记录</h3><p>操作符 <code>^</code> 与 <code>~</code> 符一样，后面也可以跟一个数字。</p><p>但是该操作符后面的数字与 <code>~</code> 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。</p><p>Git 默认选择合并提交的 “第一个” 父提交，在操作符 <code>^</code> 后跟一个数字可以改变这一默认行为。</p><p>如果不加数字修改符直接检出 <code>main^</code>，会回到第一个父提交记录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch main^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回到另外一个父分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch main^2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041756674.png" alt="image-20221104175600633"></p><p>这些操作符还支持链式操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> switch HEAD~^2~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041758651.png" alt="image-20221104175814614"></p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211041758045.png" alt="image-20221104175828009"></p><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><h3 id="注册远程账号" tabindex="-1"><a class="header-anchor" href="#注册远程账号" aria-hidden="true">#</a> 注册远程账号</h3>`,133),p=e("code",null,"[推荐]",-1),u=e("li",null,"服务器在国内，中文",-1),h={href:"https://gitee.com",target:"_blank",rel:"noopener noreferrer"},m=e("li",null,"服务器在国外，网络不稳定， 英文",-1),g={href:"https://github.com",target:"_blank",rel:"noopener noreferrer"},v=i(`<h3 id="关联远程仓库" tabindex="-1"><a class="header-anchor" href="#关联远程仓库" aria-hidden="true">#</a> 关联远程仓库</h3><p>将本地仓库与远程仓库建立关联关系</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 建立远程仓库的关联关系，可以建立多个</span>
<span class="token function">git</span> remote <span class="token function">add</span> 关联名称 仓库地址

<span class="token comment"># 查询当前本地仓库关联的远程仓库关系</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除关联关系" tabindex="-1"><a class="header-anchor" href="#删除关联关系" aria-hidden="true">#</a> 删除关联关系</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote remove 关联名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="克隆" tabindex="-1"><a class="header-anchor" href="#克隆" aria-hidden="true">#</a> 克隆</h3><p><code>git clone</code> 命令在真实的环境下的作用是在<strong>本地</strong>创建一个远程仓库的拷贝（比如从 github.com）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="远程分支" tabindex="-1"><a class="header-anchor" href="#远程分支" aria-hidden="true">#</a> 远程分支</h3><p>克隆完成后本地仓库会多一个名为 <code>o/main</code> 的分支，这种类型的分支就叫<strong>远程</strong>分支。由于远程分支的特性导致其拥有一些特殊属性。</p><p>远程分支反映了远程仓库 (在你上次和它通信时) 的<strong>状态</strong>。这会有助于你理解本地的工作与公共工作的差别 —— 这是你与别人分享工作成果前至关重要的一步.</p><p>远程分支有一个特别的属性，在你检出时自动进入分离 HEAD 状态。Git 这么做是出于不能直接在这些分支上进行操作的原因，你必须在别的地方完成你的工作，（更新了远程分支之后）再用远程分享你的工作成果。</p><h4 id="为什么有-o" tabindex="-1"><a class="header-anchor" href="#为什么有-o" aria-hidden="true">#</a> 为什么有 <code>o/</code>？</h4><p>远程分支有一个命名规范 —— 它们的格式是:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>remote name<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>branch name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因此，如果你看到一个名为 <code>o/main</code> 的分支，那么这个分支就叫 <code>main</code>，远程仓库的名称就是 <code>o</code>。</p><p>大多数的开发人员会将它们主要的远程仓库命名为 <code>origin</code>，并不是 <code>o</code>。这是因为当你用 <code>git clone</code> 某个仓库时，Git 已经帮你把远程仓库的名称设置为 <code>origin</code> 了</p><h3 id="删除远程分支" tabindex="-1"><a class="header-anchor" href="#删除远程分支" aria-hidden="true">#</a> 删除远程分支</h3><p>除了远程仓库的默认分支外，其余分支都可以被删除掉</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token parameter variable">-d</span> 远程分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="从远程仓库获取数据" tabindex="-1"><a class="header-anchor" href="#从远程仓库获取数据" aria-hidden="true">#</a> 从远程仓库获取数据</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们从远程仓库获取数据时，远程分支也会更新以反映最新的远程仓库。</p><p><code>git fetch</code> 完成了仅有的但是很重要的两步:</p><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新远程分支指针 (如 <code>o/main</code>)</li></ul><p><code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。</p><p>理解这一点很重要，因为许多开发人员误以为执行了 <code>git fetch</code> 以后，他们本地仓库就与远程仓库同步了。它可能已经将进行这一操作所需的所有数据都下载了下来，但是<strong>并没有</strong>修改你本地的文件</p><h3 id="合并数据" tabindex="-1"><a class="header-anchor" href="#合并数据" aria-hidden="true">#</a> 合并数据</h3><p>可以像合并本地分支那样来合并远程分支。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick o/main
<span class="token function">git</span> rebase o/main
<span class="token function">git</span> merge o/main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于先抓取更新再合并到本地分支这个流程很常用，因此 Git 提供了一个专门的命令来完成这两个操作。</p><p>使用 <code>git pull</code></p><p>拉取本地已有的分支代码，更新代码</p><p>拉取本地没有的代码，更新分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将当前远程分支代码更新到本地所处分支</span>
<span class="token function">git</span> pull 关联名称 远程分支名称

<span class="token comment"># 将远程仓库的分支更新下来</span>
<span class="token function">git</span> pull 关联名称 远程分支名称:本地分支名称

<span class="token comment"># 如果强制的要求远程分支和本地分支进行合并需要指定参数--allow-unrelated-histories</span>
<span class="token function">git</span> pull 关联名称 远程分支名称 --allow-unrelated-histories
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="推送本地代码到远程仓库中" tabindex="-1"><a class="header-anchor" href="#推送本地代码到远程仓库中" aria-hidden="true">#</a> 推送本地代码到远程仓库中</h3><p>第一次推送代码时，会输入用户名和密码</p><p>如果密码输入错误，清理 windows 的 git 凭证，重新推送，输入用户名和密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push 关联名称 本地仓库分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="历史偏离" tabindex="-1"><a class="header-anchor" href="#历史偏离" aria-hidden="true">#</a> 历史偏离</h3><p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目<strong>旧版</strong>的代码，与远程仓库最新的代码不匹配了。</p><p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 <code>push</code> 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p><p><strong>解决办法:</strong></p><ol><li><p>用 <code>rebase</code>, 用 <code>git fetch</code> 更新本地仓库中的远程分支，然后用 rebase 将我们的工作移动到最新的提交记录下，最后再用 <code>git push</code> 推送到远程仓库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch<span class="token punctuation">;</span> <span class="token function">git</span> rebase o/main<span class="token punctuation">;</span> <span class="token function">git</span> push<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>用 <code>merge</code>, 尽管 <code>git merge</code> 不会移动你的工作（它会创建新的合并提交），但是它会告诉 Git 你已经合并了远程仓库的所有变更。这是因为远程分支现在是你本地分支的祖先，也就是说你的提交已经包含了远程分支的所有变化。</p><p>用 <code>git fetch</code> 更新了本地仓库中的远程分支，然后<strong>合并</strong>了新变更到我们的本地分支（为了包含远程仓库的变更），最后我们用 <code>git push</code> 把工作推送到远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch<span class="token punctuation">;</span> <span class="token function">git</span> merge o/main<span class="token punctuation">;</span> <span class="token function">git</span> push<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>用 <code>git pull --rebase</code>, <code>git pull --rebase</code> 是 fetch 和 rebase 的简写！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull --rebase<span class="token punctuation">;</span> <span class="token function">git</span> push<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="远程服务器拒绝" tabindex="-1"><a class="header-anchor" href="#远程服务器拒绝" aria-hidden="true">#</a> 远程服务器拒绝</h2><p>如果你是在一个大的合作团队中工作，很可能是 main 被锁定了，需要一些 Pull Request 流程来合并修改。如果你直接提交 (commit) 到本地 main, 然后试图推送 (push) 修改，你将会收到这样类似的信息:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">!</span> <span class="token punctuation">[</span>远程服务器拒绝<span class="token punctuation">]</span> main -<span class="token operator">&gt;</span> main <span class="token punctuation">(</span>TF402455: 不允许推送<span class="token punctuation">(</span>push<span class="token punctuation">)</span>这个分支<span class="token punctuation">;</span> 你必须使用pull request来更新这个分支.<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="为什么会被拒绝" tabindex="-1"><a class="header-anchor" href="#为什么会被拒绝" aria-hidden="true">#</a> 为什么会被拒绝？</h3><p>远程服务器拒绝直接推送 (push) 提交到 main, 因为策略配置要求 pull requests 来提交更新.</p><h3 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h3><p>新建一个分支 feature, 推送到远程服务器。然后 reset 你的 main 分支和远程服务器保持一致，否则下次你 pull 并且他人的提交和你冲突的时候就会有问题.</p>`,51);function b(k,f){const s=t("ExternalLinkIcon");return c(),l("div",null,[r,e("ul",null,[e("li",null,[a("Gitee "),p,e("ul",null,[u,e("li",null,[e("a",h,[a("https://gitee.com"),n(s)])])])]),e("li",null,[a("Github "),e("ul",null,[m,e("li",null,[e("a",g,[a("https://github.com"),n(s)])])])])]),v])}const q=d(o,[["render",b],["__file","index.html.vue"]]);export{q as default};
