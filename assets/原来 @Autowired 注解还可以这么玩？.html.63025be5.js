import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as e,e as s}from"./app.e5fc3623.js";const i={},c=s(`<h1 id="原来-autowired-注解还可以这么玩" tabindex="-1"><a class="header-anchor" href="#原来-autowired-注解还可以这么玩" aria-hidden="true">#</a> 原来 @Autowired 注解还可以这么玩？</h1><h2 id="autowired-字段" tabindex="-1"><a class="header-anchor" href="#autowired-字段" aria-hidden="true">#</a> @Autowired 字段</h2><p>我们可以把 <code>@Autowired</code> 注解标注在类文件中的字段属性上，通过这种方式，Spring 容器启动的时候会查找相应的 <code>Bean</code> ，然后通过反射的方式注入到这个字段中。</p><p>例子如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PayService</span> aliPayService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式使用起来非常方便，而且对于字段的要求也比较低，它可以是 <code>public</code>,也可以是 <code>private</code>范围。</p><p>日常编程中，我一般是直接使用这种方式，简洁又便利。</p><h2 id="autowired-构造方法" tabindex="-1"><a class="header-anchor" href="#autowired-构造方法" aria-hidden="true">#</a> @Autowired 构造方法</h2><p>第二种方式，我们可以使用类中的构造函数注入相应属性，例子如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token class-name">PayService</span> aliPayService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">PayController</span><span class="token punctuation">(</span><span class="token class-name">PayService</span> aliPayService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>aliPayService <span class="token operator">=</span> aliPayService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Autowired</code> 构造方法里的传参，可以是一个，也可以是多个。如果是多个参数，那 Spring 一起都注入进来。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token class-name">PayService</span> aliPayService<span class="token punctuation">;</span>

    <span class="token class-name">OrderService</span> orderService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">PayController</span><span class="token punctuation">(</span><span class="token class-name">PayService</span> aliPayService<span class="token punctuation">,</span> <span class="token class-name">OrderService</span> orderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>aliPayService <span class="token operator">=</span> aliPayService<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService<span class="token operator">=</span>orderService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式在注入多个属性的时候用起来还是比较方便的。</p><p>那其实有一种情况下，如果一个类不存在无参的构造函数，只存在有参的构造函数，那实际上我们即使不用 <code>@Autowired</code>标注，Spring 也会帮我们注入相应的属性。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211051000604.jpeg" alt="图片"></p><p>可以看到，上面的例子，我们没有在构造函数上使用 <code>@Autowired</code>标注，但是 IDEA 依然显示我们成功注入相应的属性。</p><h2 id="autowired-方法" tabindex="-1"><a class="header-anchor" href="#autowired-方法" aria-hidden="true">#</a> @Autowired 方法</h2><p>第三种方式，我们可以通过方法注入相应属性，例子如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayController</span> <span class="token punctuation">{</span>

    <span class="token class-name">PayService</span> aliPayService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAliPayService</span><span class="token punctuation">(</span><span class="token class-name">PayService</span> aliPayService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>aliPayService <span class="token operator">=</span> aliPayService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那之前我一直以为这种方式只能使用 <code>setxxx</code>才可以成功的注入属性 ，那其实是我理解错了，这个方法可以任意的命名。</p><p>那方法注入，其实跟构造方法一样，也可以同时有多个传参，Spring 将会把这些属性一起注入。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211050958823.jpeg" alt="图片"></p><h2 id="autowired-多个-bean" tabindex="-1"><a class="header-anchor" href="#autowired-多个-bean" aria-hidden="true">#</a> @Autowired 多个 Bean</h2><p>最后一种方式，Spring 可以使用 <code>@Autowired</code> 标注 <code>Array</code> (数组)，<code>Collections</code>(集合)，甚至是 <code>Map</code> (散列表)，通过这种命方式注入多个相同类型的 <code>Bean</code>。</p><p>比如这种方式，将 <code>PayService</code> 接口所有实现类注入到 <code>Array</code>数组中。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211050958835.jpeg" alt="图片"></p><p>也可以是这种方式，注入到 <code>List</code> 集合中。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211050958838.jpeg" alt="图片"></p><p>上面的两个例子，数组与集合中的 <code>Bean</code> 的顺序是根据 Spring 创建的顺序。</p><p>如果你想指定里面排序的优先级，那你就需要使用 <code>@Order</code>或者 <code>@Priority</code> 指定一下优先级，比如这样:</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211050958852.jpeg" alt="图片"></p><p>或者这样：</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211050958957.jpeg" alt="图片"></p><p><code>@Order/Priority</code> 注解中值越小，那它的优先级就越高。</p><p>最后我们还可以将 <code>PayService</code> 接口所有实现类注入到 <code>Map</code> 中，其中里面的 <code>key</code> 就是 Spring 的 <code>Bean</code> 的名字。</p><p><img src="https://gcore.jsdelivr.net/gh/SurplusFate/guide_img@main/img/202211050958275.jpeg" alt="图片"></p><blockquote><p>ps: 使用 <code>@Autowired</code> 注入属性到 Map 中，<code>key</code> 必须是 <code>String</code> 类型。</p><p>这也可以理解，你要是其他类型，Spring 都不知道去哪里给你找。。。</p></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>@Autowired</code>注解可以把相应 <code>Bean</code> 注入到相关属性中，它的注入方式有很多种。</p><p>我们可以使用 <code>@Autowired</code>直接标注类中的字段，快速使用。</p><p>我们也可以使用 <code>@Autowired</code> 标注构造方法/普通的方法，这样可以方便注入多个 <code>Bean</code>。</p><p>最后，我们还可以 <code>@Autowired</code>标注 <code>Array</code> (数组)，<code>Collections</code>(集合)，甚至是 <code>Map</code> (散列表)，将所有匹配到的 <code>Bean</code> 注入进来。</p><p>那最后一种方式，其实在某些场景非常有用。比如说，我们通过 <code>@Autowired</code>将所有匹配到 <code>Bean</code> 注入到 <code>Map</code> 中，利用这个特性，我们可以快速实现策略模式。</p>`,43),o=[c];function p(t,d){return n(),e("div",null,o)}const u=a(i,[["render",p],["__file","原来 @Autowired 注解还可以这么玩？.html.vue"]]);export{u as default};
