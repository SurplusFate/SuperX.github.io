export const pagesRoutes = [
  ["v-8daa1a0e","/",{"t":"主页","i":"home","y":"h","e":"我的学习记录","r":{"minutes":0.22,"words":65}},["/index.html","/README.md"]],
  ["v-aa341a00","/docs/Dubbo/1.%20Dubbo%20%E6%A1%86%E6%9E%B6.html",{"t":"Dubbo 框架","i":"note","y":"a","e":"Dubbo 框架 Apache Dubbo (incubating) ˈdʌbəʊ 是一款高性能、轻量级的开源Java RPC 框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。 Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的 RPC 远程服务调用方案、服务治理方案。 Apache Dubbo Du","d":"2022-10-08T00:00:00.000Z","l":"2022年10月8日","c":["Dubbo"],"r":{"minutes":5.14,"words":1542}},["/docs/Dubbo/1. Dubbo 框架.html","/docs/Dubbo/1.%20Dubbo%20%E6%A1%86%E6%9E%B6","/docs/Dubbo/1. Dubbo 框架.md","/docs/Dubbo/1.%20Dubbo%20%E6%A1%86%E6%9E%B6.md"]],
  ["v-149e202c","/docs/Dubbo/2.%20%E7%9B%B4%E8%BF%9E%E6%96%B9%E5%BC%8F.html",{"t":"直连方式 dubbo","i":"note","y":"a","e":"直连方式 dubbo 点对点的直连项目:消费者直接访问服务提供者，没有注册中心。 消费者必须指定服务提供者的访问地址（url）。 消费者直接通过 url 地址访问固定的服务提供者。这个 url 地址是不变的。\r\" 1. 创建一个空项目\"\r\" 2. 创建 Module 服务提供者 link-orderservice-provider\"\r\" 3. 创建 Modu","d":"2022-10-09T00:00:00.000Z","l":"2022年10月9日","c":["Dubbo"],"r":{"minutes":3.78,"words":1133}},["/docs/Dubbo/2. 直连方式.html","/docs/Dubbo/2.%20%E7%9B%B4%E8%BF%9E%E6%96%B9%E5%BC%8F","/docs/Dubbo/2. 直连方式.md","/docs/Dubbo/2.%20%E7%9B%B4%E8%BF%9E%E6%96%B9%E5%BC%8F.md"]],
  ["v-a8070a8e","/docs/Dubbo/3.%20%E6%94%B9%E9%80%A0%20Dubbo%20%E9%A1%B9%E7%9B%AE.html",{"t":"改造 dubbo 项目","i":"note","y":"a","e":"改造 dubbo 项目 抽象分散在多个项目中的公共接口，实体类，异常，工具类到一个项目中，在其他项目如服务提供者，消费者共用公共的资源。\r\" 抽取公共部分\" 公共部分 建立一个普通的 maven 项目, 放置实体类, 接口等. link-orderservice-provider maven 依赖 实体类 mapper 接口 接口实现 link-orders","d":"2022-10-09T00:00:00.000Z","l":"2022年10月9日","c":["Dubbo"],"r":{"minutes":3.38,"words":1013}},["/docs/Dubbo/3. 改造 Dubbo 项目.html","/docs/Dubbo/3.%20%E6%94%B9%E9%80%A0%20Dubbo%20%E9%A1%B9%E7%9B%AE","/docs/Dubbo/3. 改造 Dubbo 项目.md","/docs/Dubbo/3.%20%E6%94%B9%E9%80%A0%20Dubbo%20%E9%A1%B9%E7%9B%AE.md"]],
  ["v-1398f2e6","/docs/Dubbo/4.%20%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE.html",{"t":"常用标签","i":"note","y":"a","e":"常用标签 Dubbo 中常用标签。分为三个类别：公用标签，服务提供者标签，服务消费者标签. 公用标签 和 配置应用信息 配置注册中心 服务提供者标签 配置暴露的服务 服务消费者 配置服务消费者引用远程服务","d":"2022-10-09T00:00:00.000Z","l":"2022年10月9日","c":["Dubbo"],"r":{"minutes":0.5,"words":150}},["/docs/Dubbo/4. 常用标签.html","/docs/Dubbo/4.%20%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE","/docs/Dubbo/4. 常用标签.md","/docs/Dubbo/4.%20%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE.md"]],
  ["v-57a481eb","/docs/Dubbo/5.%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-Zookeeper.html",{"t":"注册中心-Zookeeper","i":"note","y":"a","e":"注册中心-Zookeeper 对于服务提供方，它需要发布服务，而且由于应用系统的复杂性，服务的数量、类型也不断膨胀；对于服务消费方，它最关心如何获取 到它所需要的服务，而面对复杂的应用系统，需要管理大量的服务调用。 而且，对于服务提供方和服务消费方来说，他们还有可能兼具这两种角色，即需要提供服务，有需要消费服务。 通过将服务统一管理起来，可以有效地优化内部应","d":"2022-10-09T00:00:00.000Z","l":"2022年10月9日","c":["Dubbo"],"r":{"minutes":2.45,"words":736}},["/docs/Dubbo/5. 注册中心-Zookeeper.html","/docs/Dubbo/5.%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-Zookeeper","/docs/Dubbo/5. 注册中心-Zookeeper.md","/docs/Dubbo/5.%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-Zookeeper.md"]],
  ["v-278e7654","/docs/Dubbo/6.%20%E4%BD%BF%E7%94%A8%20Zookeeper.html",{"t":"使用 Zookeeper","i":"note","y":"a","e":"使用 Zookeeper zookeepeer 客户端依赖： 修改配置文件, 消费者和提供者都要注册. 运行应用\r\" 1. 先启动注册中心\"\r\" 2. 再启动 tomcat 服务器\"\r\" 3. 访问 index.jsp\"","d":"2022-10-09T00:00:00.000Z","l":"2022年10月9日","c":["Dubbo"],"r":{"minutes":0.35,"words":105}},["/docs/Dubbo/6. 使用 Zookeeper.html","/docs/Dubbo/6.%20%E4%BD%BF%E7%94%A8%20Zookeeper","/docs/Dubbo/6. 使用 Zookeeper.md","/docs/Dubbo/6.%20%E4%BD%BF%E7%94%A8%20Zookeeper.md"]],
  ["v-539e4d22","/docs/Dubbo/7.%20Dubbo%20%E7%9A%84%E9%85%8D%E7%BD%AE.html",{"t":"Dubbo 的配置","i":"note","y":"a","e":"Dubbo 的配置 关闭检查 dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题，默认 check=true。通过 check=\"false\"关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。 关闭某个服务的启动时检查: 关闭注册中心启动时检查: 默认启","d":"2022-10-09T00:00:00.000Z","l":"2022年10月9日","c":["Dubbo"],"r":{"minutes":1.82,"words":546}},["/docs/Dubbo/7. Dubbo 的配置.html","/docs/Dubbo/7.%20Dubbo%20%E7%9A%84%E9%85%8D%E7%BD%AE","/docs/Dubbo/7. Dubbo 的配置.md","/docs/Dubbo/7.%20Dubbo%20%E7%9A%84%E9%85%8D%E7%BD%AE.md"]],
  ["v-72eb17d8","/docs/Dubbo/8.%20%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%83.html",{"t":"监控中心","i":"note","y":"a","e":"监控中心 Dubbo 的使用，其实只需要有注册中心，消费者，提供者这三个就可以使用了，但是并不能看到有哪些消费者和提供者，为了更好的调试，发现问题，解决问题，因此引入 dubbo-admin。通过 dubbo-admin 可以对消费者和提供者进行管理。可以在 dubbo 应用部署做动态的调整，服务的管理。 dubbo-admin 图形化的服务管理页面；安装时","d":"2022-10-09T00:00:00.000Z","l":"2022年10月9日","c":["Dubbo"],"r":{"minutes":1.07,"words":321}},["/docs/Dubbo/8. 监控中心.html","/docs/Dubbo/8.%20%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%83","/docs/Dubbo/8. 监控中心.md","/docs/Dubbo/8.%20%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%83.md"]],
  ["v-796ccfcc","/docs/Dubbo/",{"t":"前言","y":"a","e":"前言 什么是分布式框架 分布式系统是若干独立系统的集合, 但是用户使用起来像是在使用一套系统. 为什么需要分布式系统 规模的逐步扩大和业务的复杂，单台计算机扛不住双十一那样的流量，俗话说：三个臭皮匠抵一个诸葛亮。 应用架构的发展演变 单一架构 当网站流量很小的时候,我们将所有的应用(业务)放到一台服务器上, 打包运行公司管理系统/超市收银系统.\r\" 优点: ","r":{"minutes":3.69,"words":1108}},["/docs/Dubbo/index.html","/docs/Dubbo/readme.md"]],
  ["v-2fd08f38","/docs/Git/",{"t":"Git","y":"a","e":"Git 在线练习: Learn Git Branching 基础篇 设置全局账号信息 创建本地仓库 添加到暂存区(.git 文件夹) 查看文件状态\r\" 红色代表没有被 git 管理的文件，即使是已经管理过，但是修改后，也是红色的状态\"\r\"\"\r\" 绿色代表添加到暂存区的文件\"\r\"\"\r\" 已暂存：文件被管理到暂存区，绿色\"\r\"\"\r\" 未修改：文件还没有被管理到暂","r":{"minutes":22.65,"words":6796}},["/docs/Git/index.html","/docs/Git/readme.md"]],
  ["v-95acbb24","/docs/guide/",{"t":"学习指南","y":"a","e":"学习指南 相关资料 疯狂 Java 讲义 On Java 8 首页 - 廖雪峰的官方网站 (liaoxuefeng.com) 学习路线 完整路线： 【金山文档】 鱼皮 - Java 学习路线导图.pof 资源来源 书籍：部分相关电子书都能在微信读书内找到","r":{"minutes":0.36,"words":109}},["/docs/guide/index.html","/docs/guide/README.md"]],
  ["v-5d2a50ea","/docs/Java/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html",{"t":"1. Java 语言概述与开发环境","i":"note","y":"a","e":"1. Java 语言概述与开发环境 Java 语言发展简史 1990 年 Sun 公司成立了一个由 James Gosling 领导的“Green 计划”，准备为智能家电设计一套通用控制系统。Green 团队最初打算采用 C++语言进行编写，但发现 C++存在许多问题，于是便创造了一个种全新的语言: Oak（橡树）。 1992 年，Green 计划被转化成了","d":"2022-06-06T00:00:00.000Z","l":"2022年6月6日","c":["java"],"r":{"minutes":14.41,"words":4322}},["/docs/Java/1. Java语言概述与开发环境.html","/docs/Java/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83","/docs/Java/1. Java语言概述与开发环境.md","/docs/Java/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.md"]],
  ["v-11a46ab6","/docs/Java/10.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8B%EF%BC%89.html",{"t":"10. 面向对象（下）","i":"note","y":"a","e":"10. 面向对象（下） 包装类 Java 的 8 种基本数据类型不支持面向对象的编程机制，基本数据类型的数据也不具备“对象”的特性：没有 Field、方法可以被调用。 在某些时候，基本数据类型会有一些制约，例如所有引用类型的变量都继承了 Object 类，都可当成 Object 类型变量使用。但基本数据类型的变量就不可以，如果有个方法需要 Object 类型","d":"2022-07-12T00:00:00.000Z","l":"2022年7月12日","c":["java"],"r":{"minutes":115.98,"words":34793}},["/docs/Java/10. 面向对象（下）.html","/docs/Java/10.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8B%EF%BC%89","/docs/Java/10. 面向对象（下）.md","/docs/Java/10.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8B%EF%BC%89.md"]],
  ["v-4fcc00f7","/docs/Java/11.%20%E4%B8%8E%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E4%BA%A4%E4%BA%92.html",{"t":"11. 与运行环境交互","i":"note","y":"a","e":"11. 与运行环境交互 Java 提供了 String、StringBuffer 和 StringBuilder 来处理字符串。Java 还提供了 Date 和 Calendar 来处理日期、时间，其中 Date 是一个已经过时的 API，通常推荐使用 Calendar 来处理日期、时间。 正则表达式是一个强大的文本处理工具，通过正则表达式可以对文本内容进行","d":"2022-07-12T00:00:00.000Z","l":"2022年7月12日","c":["java"],"r":{"minutes":59.08,"words":17724}},["/docs/Java/11. 与运行环境交互.html","/docs/Java/11.%20%E4%B8%8E%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E4%BA%A4%E4%BA%92","/docs/Java/11. 与运行环境交互.md","/docs/Java/11.%20%E4%B8%8E%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E4%BA%A4%E4%BA%92.md"]],
  ["v-35a34c42","/docs/Java/12.%20Java%E9%9B%86%E5%90%88.html",{"t":"12. Java 集合","i":"note","y":"a","e":"12. Java 集合 Java 集合类是一种特别有用的工具类，可以用于存储数量不等的多个对象，并可以实现常用的数据结构，如栈、队列等。除此之外，Java 集合还可用于保存具有映射关系的关联数组。Java 集合大致可分为 Set、List 和 Map 三种体系，其中 Set 代表无序、不可重复的集合；List 代表有序、重复的集合；而 Map 则代表具有映射","d":"2022-07-12T00:00:00.000Z","l":"2022年7月12日","c":["java"],"r":{"minutes":81.92,"words":24575}},["/docs/Java/12. Java集合.html","/docs/Java/12.%20Java%E9%9B%86%E5%90%88","/docs/Java/12. Java集合.md","/docs/Java/12.%20Java%E9%9B%86%E5%90%88.md"]],
  ["v-cbc4a12a","/docs/Java/13.%20%E6%B3%9B%E5%9E%8B.html",{"t":"13. 泛型","i":"note","y":"a","e":"13. 泛型 在没有泛型之前，一旦把一个对象“丢进”Java 集合中，集合就会忘记对象的类型，把所有的对象当成 Object 类型处理。当程序从集合中取出对象后，就需要进行强制类型转换，这种强制类型转换不仅使代码臃肿，而且容易引起 ClassCastExeception 异常。 泛型入门 Java 集合有个缺点——当我们把一个对象“丢进”集合里后，集合就会“","d":"2022-08-11T00:00:00.000Z","l":"2022年8月11日","c":["java"],"r":{"minutes":33.06,"words":9918}},["/docs/Java/13. 泛型.html","/docs/Java/13.%20%E6%B3%9B%E5%9E%8B","/docs/Java/13. 泛型.md","/docs/Java/13.%20%E6%B3%9B%E5%9E%8B.md"]],
  ["v-08f3ab5a","/docs/Java/14.%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",{"t":"14. 函数式编程","i":"note","y":"a","e":"14. 函数式编程 Lambda 表达式\r\" lambda表达式用于简化匿名内部类的实现，只作用于接口，抽象方法无法使用。\" Lambda 表达式是使用最小可能语法编写的函数定义： 1. Lambda 作用于函数式接口（有且仅有一个抽象方法，但是可以有多个非抽象方法的接口）。 2. Lambda 表达式产生函数，而不是类。 虽然在 JVM（Java Virt","d":"2022-08-12T00:00:00.000Z","l":"2022年8月12日","c":["java"],"r":{"minutes":45.46,"words":13639}},["/docs/Java/14. 函数式编程.html","/docs/Java/14.%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B","/docs/Java/14. 函数式编程.md","/docs/Java/14.%20%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.md"]],
  ["v-18b6f072","/docs/Java/15.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",{"t":"15. 异常处理","i":"note","y":"a","e":"15. 异常处理 改进的错误恢复机制是提高代码健壮性的最强有力的方式。错误恢复在我们所编写的每一个程序中都是基本的要素，但是在 Java 中它显得格外重要，因为 Java 的主要目标之一就是创建供他人使用的程序构件。 发现错误的理想时机是在编译阶段，也就是在你试图运行程序之前。然而，编译期间并不能找出所有的错误，余下的问题必须在运行期间解决。这就需要错误源能","d":"2022-08-12T00:00:00.000Z","l":"2022年8月12日","c":["java"],"r":{"minutes":35.01,"words":10503}},["/docs/Java/15. 异常处理.html","/docs/Java/15.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86","/docs/Java/15. 异常处理.md","/docs/Java/15.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md"]],
  ["v-56af58f5","/docs/Java/16.%20%E6%B3%A8%E8%A7%A3.html",{"t":"16. 注解","i":"note","y":"a","e":"16. 注解 注解（也被称为元数据）为我们在代码中添加信息提供了一种形式化的方式，使我们可以在稍后的某个时刻更容易的使用这些数据。 注解是 Java 5 所引入的众多语言变化之一。它们提供了 Java 无法表达的但是你需要完整表述程序所需的信息。 因此，注解使得我们可以以编译器验证的格式存储程序的额外信息。注解可以生成描述符文件，甚至是新的类定义，并且有助于","d":"2022-08-13T00:00:00.000Z","l":"2022年8月13日","c":["java"],"r":{"minutes":15.36,"words":4608}},["/docs/Java/16. 注解.html","/docs/Java/16.%20%E6%B3%A8%E8%A7%A3","/docs/Java/16. 注解.md","/docs/Java/16.%20%E6%B3%A8%E8%A7%A3.md"]],
  ["v-e5521da0","/docs/Java/17.%20IO%E6%B5%81.html",{"t":"17. IO 流","i":"note","y":"a","e":"17. IO 流\r\" 在丑陋的 Java I/O 编程方式诞生多年以后，Java 终于简化了文件读写的基本操作。\" IO（输入/输出）是比较乏味的事情，因为看不到明显的运行效果，但输入/输出是所有程序都必需的部分——使用输入机制，允许程序读取外部数据（包括来自磁盘、光盘等存储设备的数据）、用户输入数据；使用输出机制，允许程序记录运行状态，将程序数据输出到磁盘","d":"2022-08-13T00:00:00.000Z","l":"2022年8月13日","c":["java"],"r":{"minutes":71.2,"words":21360}},["/docs/Java/17. IO流.html","/docs/Java/17.%20IO%E6%B5%81","/docs/Java/17. IO流.md","/docs/Java/17.%20IO%E6%B5%81.md"]],
  ["v-1a31bb8f","/docs/Java/18.%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.html",{"t":"18. 多线程","i":"note","y":"a","e":"18. 多线程 线程概述 几乎所有的操作系统都支持同时运行多个任务，一个任务通常就是一个程序，每个运行中的程序就是一个进程。当一个进程运行时，内部可能包含了多个顺序执行流，每个顺序执行流就是一个线程。 线程和进程 线程 现代操作系统（Windows，macOS，Linux）都可以执行多任务。多任务就是同时运行多个任务，例如：浏览器、QQ、音乐。 CPU 执行","d":"2022-08-18T00:00:00.000Z","l":"2022年8月18日","c":["java"],"r":{"minutes":66.3,"words":19889}},["/docs/Java/18. 多线程.html","/docs/Java/18.%20%E5%A4%9A%E7%BA%BF%E7%A8%8B","/docs/Java/18. 多线程.md","/docs/Java/18.%20%E5%A4%9A%E7%BA%BF%E7%A8%8B.md"]],
  ["v-0310d85c","/docs/Java/19.%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8F%8D%E5%B0%84.html",{"t":"19. 类加载机制与反射","i":"note","y":"a","e":"19. 类加载机制与反射 类的加载、连接和初始化 系统可能在第一次使用某个类时加载该类，也可能采用预加载机制来加载某个类。 JVM 和类 当我们调用 Java 命令运行某个 Java 程序时，该命令将会启动一个 Java 虚拟机进程，不管该 Java 程序有多么复杂，该程序启动了多少个线程，它们都处于该 Java 虚拟机进程里。 同一个 JVM 的所有线程、","d":"2022-08-18T00:00:00.000Z","l":"2022年8月18日","c":["java"],"r":{"minutes":39.24,"words":11773}},["/docs/Java/19. 类加载机制与反射.html","/docs/Java/19.%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8F%8D%E5%B0%84","/docs/Java/19. 类加载机制与反射.md","/docs/Java/19.%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8F%8D%E5%B0%84.md"]],
  ["v-17573c93","/docs/Java/2.%20%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F.html",{"t":"2. 第一个 java 程序","i":"note","y":"a","e":"2. 第一个 java 程序 编写 编辑 Java 源代码可以使用任何无格式的文本编辑器，在 Windows 操作系统上可使用记事本（NotePad）、EditPlus 等程序。\r编写 Java 程序不要使用写字板，更不可使用 Word 等文档编辑器。因为写字板、Word 等工具是有格式的编辑器，当使用它们编辑一份文档时，这个文档中会包含一些隐藏的格式化字符","d":"2022-06-06T00:00:00.000Z","l":"2022年6月6日","c":["java"],"r":{"minutes":4.32,"words":1297}},["/docs/Java/2. 第一个java程序.html","/docs/Java/2.%20%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F","/docs/Java/2. 第一个java程序.md","/docs/Java/2.%20%E7%AC%AC%E4%B8%80%E4%B8%AAjava%E7%A8%8B%E5%BA%8F.md"]],
  ["v-09a41962","/docs/Java/3.%20Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99.html",{"t":"3. Java 程序的基本规则","i":"note","y":"a","e":"3. Java 程序的基本规则 Java 类名、方法名、变量名统称为“标识符”，凡是程序员自己有权利命名的单词都是标识符。 主方法的 main 也属于标识符，但这个标识符不能被修改，这个 main 是 SUN 公司固定死的。 main 方法的问题 如果需要用 Java 解释器直接运行一个 Java 类，则这个 Java 类必须包含 main 方法，这个 ma","d":"2022-06-06T00:00:00.000Z","l":"2022年6月6日","c":["java"],"r":{"minutes":10.81,"words":3242}},["/docs/Java/3. Java程序的基本规则.html","/docs/Java/3.%20Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99","/docs/Java/3. Java程序的基本规则.md","/docs/Java/3.%20Java%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99.md"]],
  ["v-6d8e4411","/docs/Java/4.%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{"t":"4. 数据类型","i":"note","y":"a","e":"4. 数据类型 Java 是一种强类型语言。这就意味着必须为每一个变量声明一种类型。在 Java 中，一共有 8 种基本类型（primitive type），其中有 4 种整型、2 种浮点类型、1 种用于表示 Unicode 编码的字符单元的字符类型 char（请参见论述 char 类型的章节）和 1 种用于表示真值的 boolean 类型。 分类 Java","d":"2022-06-06T00:00:00.000Z","l":"2022年6月6日","c":["java"],"r":{"minutes":13.01,"words":3903}},["/docs/Java/4. 数据类型.html","/docs/Java/4.%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","/docs/Java/4. 数据类型.md","/docs/Java/4.%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md"]],
  ["v-b67079a6","/docs/Java/5.%20%E8%BF%90%E7%AE%97%E7%AC%A6.html",{"t":"5. 运算符","i":"note","y":"a","e":"5. 运算符 运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。Java 语言使用运算符将一个或多个操作数连缀成执行性语句，用以实现特定功能。 算术运算符 算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。 下表列出了所有的算术运算符。假设整数变量 A 的值为 10，变量 B 的值为 20： 符号 描述 示例 :--: :---------","d":"2022-06-06T00:00:00.000Z","l":"2022年6月6日","c":["java"],"r":{"minutes":15.73,"words":4720}},["/docs/Java/5. 运算符.html","/docs/Java/5.%20%E8%BF%90%E7%AE%97%E7%AC%A6","/docs/Java/5. 运算符.md","/docs/Java/5.%20%E8%BF%90%E7%AE%97%E7%AC%A6.md"]],
  ["v-3933a2f0","/docs/Java/6.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html",{"t":"6. 流程控制","i":"note","y":"a","e":"6. 流程控制 不论哪一种编程语言，都会提供两种基本的流程控制结构：分支结构和循环结构。其中分支结构用于实现根据条件来选择性地执行某段代码，循环结构则用于实现根据循环条件重复执行某段代码。 顺序结构 任何编程语言中最常见的程序结构就是顺序结构。顺序结构就是程序从上到下逐行地执行，中间没有任何判断和跳转。 如果 main 方法的多行代码之间没有任何流程控制，则","d":"2022-07-06T00:00:00.000Z","l":"2022年7月6日","c":["java"],"r":{"minutes":21.49,"words":6447}},["/docs/Java/6. 流程控制.html","/docs/Java/6.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6","/docs/Java/6. 流程控制.md","/docs/Java/6.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.md"]],
  ["v-1429d318","/docs/Java/7.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89.html",{"t":"7. 面向对象（上）","i":"note","y":"a","e":"7. 面向对象（上） 面向过程和面向对象的区别：\r\" 1. 面向过程:\"\r\"\"\r\" 主要关注点是：实现的具体过程，因果关系。\"\r\"\"\r\" 优点：对于业务逻辑比较简单的程序，可以达到快速开发，前期投入成本较低。\"\r\"\"\r\" 缺点：采用面向过程的方式开发很难解决非常复杂的业务逻辑，另外面向过程的方式最终导致的软件拓展力差。另外，由于没有独立体的概念，所以无法达到","d":"2022-07-07T00:00:00.000Z","l":"2022年7月7日","c":["java"],"r":{"minutes":109.62,"words":32887}},["/docs/Java/7. 面向对象（上）.html","/docs/Java/7.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89","/docs/Java/7. 面向对象（上）.md","/docs/Java/7.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89.md"]],
  ["v-2a52d153","/docs/Java/8.%20%E6%95%B0%E7%BB%84.html",{"t":"8. 数组","i":"note","y":"a","e":"8. 数组 数组是编程语言中最常见的一种数据结构，可用于存储多个数据，每个数组元素存放一个数据，通常可通过数组元素的索引来访问数组元素，包括为数组元素赋值和取出数组元素的值。Java 语言的数组则具有其特有的特征，下面将详细介绍 Java 语言的数组。 理解数组 Java 的数组要求所有的数组元素具有相同的数据类型。因此，在一个数组中，数组元素的类型是唯一的","d":"2022-07-06T00:00:00.000Z","l":"2022年7月6日","c":["java"],"r":{"minutes":27.69,"words":8306}},["/docs/Java/8. 数组.html","/docs/Java/8.%20%E6%95%B0%E7%BB%84","/docs/Java/8. 数组.md","/docs/Java/8.%20%E6%95%B0%E7%BB%84.md"]],
  ["v-c8cd2542","/docs/Java/9.%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95.html",{"t":"9. 数组的常见算法","i":"note","y":"a","e":"9. 数组的常见算法 数组中涉及的常见算法 1. 数组元素的赋值 2. 求数值型数组中元素的最大值、最小值、平均数、总和等 3. 数组的复制、反转、查找(线性查找、二分法查找) 4. 数组元素的排序算法 数组元素的赋值 使用二维数组打印一个 10 行杨辉三角。 提示: 1. 第一行有 1 个元素, 第 n 行有 n 个元素 2. 每一行的第一个元素和最后一个","d":"2022-06-06T00:00:00.000Z","l":"2022年6月6日","c":["java"],"r":{"minutes":6.66,"words":1998}},["/docs/Java/9. 数组的常见算法.html","/docs/Java/9.%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95","/docs/Java/9. 数组的常见算法.md","/docs/Java/9.%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95.md"]],
  ["v-6b9d0d95","/docs/Linux/1.%20VMware.html",{"t":"VMware","i":"note","y":"a","e":"VMware 虚拟化检查 虚拟机和 window 的关系 检查是否支持虚拟化 可以直接使用 LeoMoon CPU-V 检查本机是否支持虚拟化技术或者虚拟化技术是否开启. 开启虚拟化 启动 BIOS 的虚拟化设置 | 开启 CPU 虚拟化支持 - 百度经验 (baidu.com) 下载 Linux 镜像 选择第一个即可: Index of /centos/7","d":"2022-10-12T00:00:00.000Z","l":"2022年10月12日","c":["linux"],"r":{"minutes":6.31,"words":1892}},["/docs/Linux/1. VMware.html","/docs/Linux/1.%20VMware","/docs/Linux/1. VMware.md","/docs/Linux/1.%20VMware.md"]],
  ["v-2a95671d","/docs/Linux/2.%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86.html",{"t":"文件管理","i":"note","y":"a","e":"文件管理 Linux 目录结构 目录结构 Linux 下一切皆文件. Linux 将硬件也映射为文件来管理了, 给电脑分配 8 个 CPU 就能在 主文件夹/其他位置/计算机/dev/cpu/ 目录下看到 8 个文件夹. 详情 目录 含义 | ----------- ----------------------------------------------","d":"2022-10-12T00:00:00.000Z","l":"2022年10月12日","c":["linux"],"r":{"minutes":16.97,"words":5092}},["/docs/Linux/2. 文件管理.html","/docs/Linux/2.%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86","/docs/Linux/2. 文件管理.md","/docs/Linux/2.%20%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86.md"]],
  ["v-2db4a924","/docs/Linux/3.%20%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86.html",{"t":"系统管理","i":"note","y":"a","e":"系统管理 设置远程连接 获取 ip 地址 Linux 指令: window 指令: 登录后使用 ifconfig 指令查看当前 ip 使用 Xhell 使用第三方工具连接 Linux 服务器，第三方工具有很多种，比较常见的有: 1. SecureCRT: 功能强大，收费产品 2. SSHSecureShellClient 3. XShell: 可免费使用 4","d":"2022-10-12T00:00:00.000Z","l":"2022年10月12日","c":["linux"],"r":{"minutes":17.47,"words":5240}},["/docs/Linux/3. 系统管理.html","/docs/Linux/3.%20%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86","/docs/Linux/3. 系统管理.md","/docs/Linux/3.%20%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86.md"]],
  ["v-801cbfbc","/docs/Linux/4.%20%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84.html",{"t":"用户和组","i":"note","y":"a","e":"用户和组 用户管理 管理用户 切换管理员身份 注销当前用户(需要运行级别) 添加用户 默认该用户的主目录为 /home/用户名/, 也可以添加参数给用户指定主目录.\r\" -d: directory\" 创建一个用户 king 并指定主目录为 /home/king 设置密码 给 king 设置密码 查看当前用户所在的目录 删除用户 删除用户 king 并保留主目","d":"2022-10-12T00:00:00.000Z","l":"2022年10月12日","c":["linux"],"r":{"minutes":5.6,"words":1681}},["/docs/Linux/4. 用户和组.html","/docs/Linux/4.%20%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84","/docs/Linux/4. 用户和组.md","/docs/Linux/4.%20%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84.md"]],
  ["v-7b6b4f78","/docs/Linux/5.%20%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86.html",{"t":"软件包管理","i":"note","y":"a","e":"软件包管理 RPM 概述 RPM(RedHat Package Manager),RedHat 软件包管理工具，类似于 windows 里面的 setup.exe，是 Linux 这系列操作系统的打包安装工具，它虽然是 RedHat 的标志，但理念是通用的。 RPM 包的名称格式 Apache-1.3.23-11.i386.rpm “apache” 软件名称","d":"2022-10-12T00:00:00.000Z","l":"2022年10月12日","c":["linux"],"r":{"minutes":2.68,"words":805}},["/docs/Linux/5. 软件包管理.html","/docs/Linux/5.%20%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86","/docs/Linux/5. 软件包管理.md","/docs/Linux/5.%20%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86.md"]],
  ["v-8d685680","/docs/Linux/6.%20JavaEE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html",{"t":"JavaEE 环境搭建","i":"note","y":"a","e":"JavaEE 环境搭建 检查当前环境是否已经安装对应的软件包 如 java mysql 安装 JDK 原文: Linux CentOS 7 安装 JDK 详细步骤 - 腾讯云开发者社区 - 腾讯云 (tencent.com) 第一种方式：yum 命令安装 检索包含 java 的列表 如果有结果类似如下： 选择需要的 JDK 版本 yum 命令安装： 检查版本","d":"2022-10-12T00:00:00.000Z","l":"2022年10月12日","c":["linux"],"r":{"minutes":5.31,"words":1594}},["/docs/Linux/6. JavaEE环境搭建.html","/docs/Linux/6.%20JavaEE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA","/docs/Linux/6. JavaEE环境搭建.md","/docs/Linux/6.%20JavaEE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md"]],
  ["v-f31f90d4","/docs/Linux/",{"t":"Linux","y":"a","e":"Linux Linux 内核最初只是芬兰人 Linux Torvalds 在赫尔辛基大学上学时处于个人爱好而编写的。 Linux 是一套免费使用和自 由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 ","r":{"minutes":0.61,"words":183}},["/docs/Linux/index.html","/docs/Linux/readme.md"]],
  ["v-2f9767db","/docs/javaWeb/0.%20Maven.html",{"t":"0 .Maven","i":"note","y":"a","e":"0 .Maven 原文: maven 的下载安装配置教程（详细图文） - 砰砰的猿 - 博客园 (cnblogs.com) maven 是什么 Maven 是基于项目对象模型 (POM project object model)，可以通过一小段描述信息（配置）来管理项目的构建，报告和文档的软件项目管理工具。 通俗的讲 maven 就是专门用于构建和管理项目的","d":"2022-08-26T00:00:00.000Z","l":"2022年8月26日","c":["JavaWeb"],"r":{"minutes":4.22,"words":1267}},["/docs/javaWeb/0. Maven.html","/docs/javaWeb/0.%20Maven","/docs/javaWeb/0. Maven.md","/docs/javaWeb/0.%20Maven.md"]],
  ["v-734a6b00","/docs/javaWeb/1.%20HTML.html",{"t":"1. HTML","i":"note","y":"a","e":"1. HTML 前端的开发流程 网页的组成部分 页面由三部分内容组成！ 分别是内容（结构）、表现、行为。 内容（结构），是我们在页面中可以看到的数据。我们称之为内容。一般内容 我们使用 html 技术来展示。 表现，指的是这些内容在页面上的展示形式。比如说。布局，颜色，大小等等。一般使用 CSS 技术技术实现。 行为，指的是页面中元素与输入设备交互的响应。一","d":"2022-08-26T00:00:00.000Z","l":"2022年8月26日","c":["JavaWeb"],"r":{"minutes":11.59,"words":3477}},["/docs/javaWeb/1. HTML.html","/docs/javaWeb/1.%20HTML","/docs/javaWeb/1. HTML.md","/docs/javaWeb/1.%20HTML.md"]],
  ["v-1670cfca","/docs/javaWeb/10.%20JavaBean.html",{"t":"10. JavaBean","i":"note","y":"a","e":"10. JavaBean 实体类 JavaBean 有特定的写法：\r必须要有一个无参构造; \r属性必须私有化; \r必须有对应的 get/set 方法；; 一般用来和数据库的字段做映射 ORM； ORM ：对象关系映射\r表 ---> 类; \r字段 --> 属性; \r行记录 ----> 对象; people 表： id name age address | --","d":"2022-08-29T00:00:00.000Z","l":"2022年8月29日","c":["JavaWeb"],"r":{"minutes":0.53,"words":159}},["/docs/javaWeb/10. JavaBean.html","/docs/javaWeb/10.%20JavaBean","/docs/javaWeb/10. JavaBean.md","/docs/javaWeb/10.%20JavaBean.md"]],
  ["v-44b5ce0c","/docs/javaWeb/11.%20MVC%20%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB.html",{"t":"11. MVC 模式与三层架构的区别","i":"note","y":"a","e":"11. MVC 模式与三层架构的区别 MVC与三层架构 - 简书 (jianshu.com) 三层架构 三层架构是指：视图层 View、服务层 Service，与持久层 Dao。它们分别完成不同的功能。\r\" View 层：用于接收用户提交请求的代码在这里编写。\"\r\"\"\r\" Service 层：系统的业务逻辑主要在这里完成。\"\r\"\"\r\" Dao 层：直接操作数","d":"2022-08-29T00:00:00.000Z","l":"2022年8月29日","c":["JavaWeb"],"r":{"minutes":3.1,"words":929}},["/docs/javaWeb/11. MVC 模式与三层架构的区别.html","/docs/javaWeb/11.%20MVC%20%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB","/docs/javaWeb/11. MVC 模式与三层架构的区别.md","/docs/javaWeb/11.%20MVC%20%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8C%BA%E5%88%AB.md"]],
  ["v-0ec1abda","/docs/javaWeb/12.%20Filter.html",{"t":"12. Filter","i":"note","y":"a","e":"12. Filter Filter：过滤器 ，用来过滤网站的数据；\r处理中文乱码; \r登录验证….; Filter 开发步骤： 1. 导包 2. 编写过滤器 导包不要错 实现 Filter 接口，重写对应的方法即可 3. 在 web.xml 中配置 Filter","d":"2022-08-29T00:00:00.000Z","l":"2022年8月29日","c":["JavaWeb"],"r":{"minutes":1.03,"words":310}},["/docs/javaWeb/12. Filter.html","/docs/javaWeb/12.%20Filter","/docs/javaWeb/12. Filter.md","/docs/javaWeb/12.%20Filter.md"]],
  ["v-3bab2bd6","/docs/javaWeb/13.%20%E7%9B%91%E5%90%AC%E5%99%A8.html",{"t":"13. 监听器","i":"note","y":"a","e":"13. 监听器 监听器 Listener 就是在 application，session，request 三个对象创建，销毁，或者往其中添加修改删除属性时自动执行代码的功能组件。Listener 是 Servlet 的监听器，可以监听客户端的请求，服务端的操作等。\r编写一个监听器; 实现监听器的接口 Session销毁：\r\" 1. 手动销毁 getSessi","d":"2022-08-29T00:00:00.000Z","l":"2022年8月29日","c":["JavaWeb"],"r":{"minutes":0.88,"words":264}},["/docs/javaWeb/13. 监听器.html","/docs/javaWeb/13.%20%E7%9B%91%E5%90%AC%E5%99%A8","/docs/javaWeb/13. 监听器.md","/docs/javaWeb/13.%20%E7%9B%91%E5%90%AC%E5%99%A8.md"]],
  ["v-2fb7bc4e","/docs/javaWeb/14.%20JDBC.html",{"t":"14. JDBC","i":"note","y":"a","e":"14. JDBC 什么是 JDBC ： Java 连接数据库！ 需要 jar 包的支持：\rjava.sql; \rjavax.sql; \rmysql-conneter-java… 连接驱动（必须要导入）; 实验环境搭建： 导入数据库依赖 IDEA 中连接数据库： JDBC 固定步骤 1. 加载驱动 2. 连接数据库，代表数据库 3. 向数据库发送 SQL 的对","d":"2022-08-29T00:00:00.000Z","l":"2022年8月29日","c":["JavaWeb"],"r":{"minutes":4.56,"words":1367}},["/docs/javaWeb/14. JDBC.html","/docs/javaWeb/14.%20JDBC","/docs/javaWeb/14. JDBC.md","/docs/javaWeb/14.%20JDBC.md"]],
  ["v-08ec4dc8","/docs/javaWeb/15.%20Ajax.html",{"t":"15. Ajax","i":"note","y":"a","e":"15. Ajax JavaScript 写 ajax AJAX 不是 JavaScript 的规范，它只是一个哥们 “发明” 的缩写：Asynchronous JavaScript and XML，意思就是用 JavaScript 执行异步网络请求。 如果仔细观察一个 Form 的提交，你就会发现，一旦用户点击 “Submit” 按钮，表单开始提交，浏览器就","d":"2022-08-29T00:00:00.000Z","l":"2022年8月29日","c":["JavaWeb"],"r":{"minutes":10.4,"words":3121}},["/docs/javaWeb/15. Ajax.html","/docs/javaWeb/15.%20Ajax","/docs/javaWeb/15. Ajax.md","/docs/javaWeb/15.%20Ajax.md"]],
  ["v-e07d2ab6","/docs/javaWeb/2.%20CSS.html",{"t":"2. CSS","i":"note","y":"a","e":"2. CSS CSS 是「层叠样式表单」。是用于(增强)控制网页样式并允许将样式信息与网页内容分离的一种标记性语言。 CSS 语法规则 选择器：浏览器根据“选择器”决定受 CSS 样式影响的 HTML 元素（标签）。 属性 (property) 是你要改变的样式名，并且每个属性都有一个值。 属性和值被冒号分开，并 由花括号包围，这样就组成了一个完整的样式声明","d":"2022-08-26T00:00:00.000Z","l":"2022年8月26日","c":["JavaWeb"],"r":{"minutes":6.16,"words":1847}},["/docs/javaWeb/2. CSS.html","/docs/javaWeb/2.%20CSS","/docs/javaWeb/2. CSS.md","/docs/javaWeb/2.%20CSS.md"]],
  ["v-c74aae08","/docs/javaWeb/3.%20JavaScript.html",{"t":"3. JavaScript","i":"note","y":"a","e":"3. JavaScript JavaScript 介绍 Javascript 语言诞生主要是完成页面的数据验证。因此它运行在客户端，需要运行浏览器来解析执行 JavaScript 代码。 JS 是 Netscape 网景公司的产品，最早取名为 LiveScript;为了吸引更多 java 程序员。更名为 JavaScript。\rJS 是弱类型，Java 是强","d":"2022-08-27T00:00:00.000Z","l":"2022年8月27日","c":["JavaWeb"],"r":{"minutes":19.1,"words":5731}},["/docs/javaWeb/3. JavaScript.html","/docs/javaWeb/3.%20JavaScript","/docs/javaWeb/3. JavaScript.md","/docs/javaWeb/3.%20JavaScript.md"]],
  ["v-c1f0feac","/docs/javaWeb/4.%20jQuery.html",{"t":"4. jQuery","i":"note","y":"a","e":"4. jQuery jQuery 介绍 什么是 jQuery ? jQuery，顾名思义，也就是 JavaScript 和查询（Query），它就是辅助 JavaScript 开发的 js 类库。 jQuery 核心思想！！！ 它的核心思想是 write less,do more(写得更少,做得更多)，所以它实现了很多浏览器的兼容问题。 jQuery 流行程","d":"2022-08-27T00:00:00.000Z","l":"2022年8月27日","c":["JavaWeb"],"r":{"minutes":18.42,"words":5526}},["/docs/javaWeb/4. jQuery.html","/docs/javaWeb/4.%20jQuery","/docs/javaWeb/4. jQuery.md","/docs/javaWeb/4.%20jQuery.md"]],
  ["v-082b12d7","/docs/javaWeb/5.%20xml%20%E5%92%8C%20json.html",{"t":"5. xml 和 json","i":"note","y":"a","e":"5. xml 和 json 1.XML 简介 什么是 xml？ xml 是可扩展的标记性语言。 xml 的作用？ xml 的主要作用有： 1. 用来保存数据，而且这些数据具有自我描述性 2. 它还可以做为项目或者模块的配置文件 3. 还可以做为网络传输数据的格式（现在 JSON 为主） xml 语法 1. 文档声明。 2. 元素（标签） 3. xml 属性 ","d":"2022-08-27T00:00:00.000Z","l":"2022年8月27日","c":["JavaWeb"],"r":{"minutes":7.13,"words":2138}},["/docs/javaWeb/5. xml 和 json.html","/docs/javaWeb/5.%20xml%20%E5%92%8C%20json","/docs/javaWeb/5. xml 和 json.md","/docs/javaWeb/5.%20xml%20%E5%92%8C%20json.md"]],
  ["v-5405053c","/docs/javaWeb/6.%20tomcat.html",{"t":"6. tomcat","i":"note","y":"a","e":"6. tomcat JavaWeb 的概念 1. 什么是 JavaWeb JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。 JavaWeb 是基于请求和响应来开发的。 2. 什么是请求 请求是指客户端给服务器发送数据，叫请求 Request。 3. 什么是响应 响应是指服务器给客户端回传数据，叫响应 Re","d":"2022-08-27T00:00:00.000Z","l":"2022年8月27日","c":["JavaWeb"],"r":{"minutes":7.07,"words":2121}},["/docs/javaWeb/6. tomcat.html","/docs/javaWeb/6.%20tomcat","/docs/javaWeb/6. tomcat.md","/docs/javaWeb/6.%20tomcat.md"]],
  ["v-03763628","/docs/javaWeb/7.%20Servlet.html",{"t":"7. Servlet","i":"note","y":"a","e":"7. Servlet 什么是 Servlet 1. Servlet 是 JavaEE 规范之一。规范就是接口 2. Servlet 就 JavaWeb 三大组件之一。三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。 3. Servlet 是运行在服务器上的一个 java 小程序，它可以接收客户端发送过来的请求，并响应数据","d":"2022-08-27T00:00:00.000Z","l":"2022年8月27日","c":["JavaWeb"],"r":{"minutes":17.32,"words":5196}},["/docs/javaWeb/7. Servlet.html","/docs/javaWeb/7.%20Servlet","/docs/javaWeb/7. Servlet.md","/docs/javaWeb/7.%20Servlet.md"]],
  ["v-9ab2ba2e","/docs/javaWeb/8.%20Cookie%20%E5%92%8C%20Session.html",{"t":"8. Cookie、Session","i":"note","y":"a","e":"8. Cookie、Session 会话 会话：用户打开一个浏览器，点击了很多超链接，访问多个 web 资源，关闭浏览器，这个过程可以称之为会话； 有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话； 你能怎么证明你是西开的学生？ 你 西开 1. 发票 西开给你发票 2. 学校登记 西开标记你来过了 一个网站，怎么证明","d":"2022-08-29T00:00:00.000Z","l":"2022年8月29日","c":["JavaWeb"],"r":{"minutes":3.13,"words":938}},["/docs/javaWeb/8. Cookie 和 Session.html","/docs/javaWeb/8.%20Cookie%20%E5%92%8C%20Session","/docs/javaWeb/8. Cookie 和 Session.md","/docs/javaWeb/8.%20Cookie%20%E5%92%8C%20Session.md"]],
  ["v-313f6f30","/docs/javaWeb/9.%20JSP.html",{"t":"9. JSP","i":"note","y":"a","e":"9. JSP 什么是 JSP Java Server Pages ： Java 服务器端页面，也和 Servlet 一样，用于动态 Web 技术！ 最大的特点：\r写 JSP 就像在写 HTML; \r区别：; \rHTML 只给用户提供静态的数据; \rJSP 页面中可以嵌入 JAVA 代码，为用户提供动态数据；; JSP 原理 思路：JSP 到底怎么执行的！\r代","d":"2022-08-29T00:00:00.000Z","l":"2022年8月29日","c":["JavaWeb"],"r":{"minutes":5.02,"words":1505}},["/docs/javaWeb/9. JSP.html","/docs/javaWeb/9.%20JSP","/docs/javaWeb/9. JSP.md","/docs/javaWeb/9.%20JSP.md"]],
  ["v-97cbea86","/docs/Mybatis/1.%20%E5%87%86%E5%A4%87.html",{"t":"1. 准备","i":"note","y":"a","e":"1. 准备 1. 导入依赖 1. 要使用 MyBatis， 只需将 mybatis-x.x.x.jar 文件置于类路径（classpath）中即可。 2. 如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中： 2. mysql 驱动 maven 导入 sql 驱动","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":0.36,"words":108}},["/docs/Mybatis/1. 准备.html","/docs/Mybatis/1.%20%E5%87%86%E5%A4%87","/docs/Mybatis/1. 准备.md","/docs/Mybatis/1.%20%E5%87%86%E5%A4%87.md"]],
  ["v-615ee416","/docs/Mybatis/10.%20%E6%B3%A8%E8%A7%A3.html",{"t":"10. 注解","i":"note","y":"a","e":"10. 注解 本质:反射机制实现 底层:动态代理 Mybatis 详细执行流程 注解 CRUD 在工具类创建的时候实现自动提交事务 1. 自动提交事务 2. 编写接口 3. 测试 关于@param()注解:\r基本数据类型和 String 类型需要加上; \r引用数据类型不用加; \r如果只有一个基本类型, 可以忽略,建议加上; \r我们在 SQL 中引用的就是@p","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":0.84,"words":253}},["/docs/Mybatis/10. 注解.html","/docs/Mybatis/10.%20%E6%B3%A8%E8%A7%A3","/docs/Mybatis/10. 注解.md","/docs/Mybatis/10.%20%E6%B3%A8%E8%A7%A3.md"]],
  ["v-728a1d2d","/docs/Mybatis/11.%20%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html",{"t":"11. 复杂查询环境搭建","i":"note","y":"a","e":"11. 复杂查询环境搭建 多对一处理\r多个学生对应一个老师; \r对于学生而言,多个学生管理一个老师\\(多对一\\)[关联]; \r对于老师而言, 一个老师有很多学生\\(一对多\\)[集合]; 测试环境搭建: 1. 新建实体类 2. 新建 Mapper 接口 3. 新建 Mapper.xml 文件 1. 按照查询嵌套处理 2. 按照结果嵌套处理 Mpper.xml ","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":3.5,"words":1050}},["/docs/Mybatis/11. 复杂查询环境搭建.html","/docs/Mybatis/11.%20%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA","/docs/Mybatis/11. 复杂查询环境搭建.md","/docs/Mybatis/11.%20%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md"]],
  ["v-8c4f39e6","/docs/Mybatis/12.%20%E5%8A%A8%E6%80%81%20SQL.html",{"t":"12. 动态 SQL","i":"note","y":"a","e":"12. 动态 SQL 根据环境自动拼接 SQL 环境搭建: 1. 实体类 2. id 工具类 java public interface BlogMapper { /**\r添加博客; *\r@param blog 博客; \r@return 受影响的行; */ int addBlog(Blog blog); /**\r动态sql; *\r@param map map","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":2.62,"words":787}},["/docs/Mybatis/12. 动态 SQL.html","/docs/Mybatis/12.%20%E5%8A%A8%E6%80%81%20SQL","/docs/Mybatis/12. 动态 SQL.md","/docs/Mybatis/12.%20%E5%8A%A8%E6%80%81%20SQL.md"]],
  ["v-ea884264","/docs/Mybatis/13.%20MybatisPlus-%E5%9F%BA%E7%A1%80%E7%AF%87.html",{"t":"MybatisPlus 从入门到精通-基础篇","i":"note","y":"a","e":"MybatisPlus 从入门到精通-基础篇 1.概述 ​ MybatisPlus 是一款 Mybatis 增强工具，用于简化开发，提高效率。 它在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 ​ 官网： 2.快速入门 2.0 准备工作 ① 准备数据 ② 创建 SpringBoot 工程 添加依赖 创建启动类 ③ 准备实体类 2.1","d":"2022-11-30T00:00:00.000Z","l":"2022年11月30日","c":["mybatis"],"r":{"minutes":14.89,"words":4468}},["/docs/Mybatis/13. MybatisPlus-基础篇.html","/docs/Mybatis/13.%20MybatisPlus-%E5%9F%BA%E7%A1%80%E7%AF%87","/docs/Mybatis/13. MybatisPlus-基础篇.md","/docs/Mybatis/13.%20MybatisPlus-%E5%9F%BA%E7%A1%80%E7%AF%87.md"]],
  ["v-26649cae","/docs/Mybatis/14.%20MybatisPlus-%E9%AB%98%E7%BA%A7%E7%AF%87.html",{"t":"MybatisPlus 从入门到精通-高级篇","i":"note","y":"a","e":"MybatisPlus 从入门到精通-高级篇 1.自动填充 ​ 在实际项目中的表会和我们的 orders 表一样，有更新时间，创建时间，创建人，更新人等字段。 ​ 我们可以使用 @TableField 的 fill 属性来设置字段的自动填充。让我们能更方便的更新相关字段。 示例 ① 在对应字段上增加注解 ​ 使用 TableField 注解的 fill 属性","d":"2022-11-30T00:00:00.000Z","l":"2022年11月30日","c":["mybatis"],"r":{"minutes":3.13,"words":938}},["/docs/Mybatis/14. MybatisPlus-高级篇.html","/docs/Mybatis/14.%20MybatisPlus-%E9%AB%98%E7%BA%A7%E7%AF%87","/docs/Mybatis/14. MybatisPlus-高级篇.md","/docs/Mybatis/14.%20MybatisPlus-%E9%AB%98%E7%BA%A7%E7%AF%87.md"]],
  ["v-54b0682c","/docs/Mybatis/2.%20%E4%BD%BF%E7%94%A8.html",{"t":"2. 使用","i":"note","y":"a","e":"2. 使用 编写实体类(pojo/bean 层) 编写持久层(dao 层) UserMapper.xml(替代原来的 impl 类) Mybatis 主配置文件 配置文件的详细内容示例: 封装 mybatisUtils 工具类 测试 资源导出失败问题解决 在 pom.xml 下手动指定资源路径","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":3.79,"words":1136}},["/docs/Mybatis/2. 使用.html","/docs/Mybatis/2.%20%E4%BD%BF%E7%94%A8","/docs/Mybatis/2. 使用.md","/docs/Mybatis/2.%20%E4%BD%BF%E7%94%A8.md"]],
  ["v-accd87ca","/docs/Mybatis/3.%20%E4%B8%BB%E8%A6%81%E7%B1%BB%E4%BB%8B%E7%BB%8D.html",{"t":"3. 主要类的介绍","i":"note","y":"a","e":"3. 主要类的介绍 1. Resources： 1. mybatis 中的一个类， 负责读取主配置文件 2. InputStream in = Resources.getResourceAsStream(\"mybatis.xml\"); 2. SqlSessionFactoryBuilder: 1. 创建 SqlSessionFactory 对象 2. Sql","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":0.94,"words":283}},["/docs/Mybatis/3. 主要类介绍.html","/docs/Mybatis/3.%20%E4%B8%BB%E8%A6%81%E7%B1%BB%E4%BB%8B%E7%BB%8D","/docs/Mybatis/3. 主要类介绍.md","/docs/Mybatis/3.%20%E4%B8%BB%E8%A6%81%E7%B1%BB%E4%BB%8B%E7%BB%8D.md"]],
  ["v-7baaf40c","/docs/Mybatis/4.%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3.html",{"t":"4. 配置文件详解","i":"note","y":"a","e":"4. 配置文件详解 原文：Mybatis 配置文件 XML 全貌详解，再不懂我也没招了 - 知乎 (zhihu.com) 为什么要使用配置文件 试想，如果没有配置文件，我们的应用程序将只能沿着固定的姿态运行，几乎不能做任何动态的调整，那么这不是一套完美的设计，因为我们希望拥有更宽更灵活的操作空间和更多的兼容度，同时也能解决硬编码等问题，所以我们需要有配置文件","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":37.53,"words":11258}},["/docs/Mybatis/4. 配置文件详解.html","/docs/Mybatis/4.%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3","/docs/Mybatis/4. 配置文件详解.md","/docs/Mybatis/4.%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3.md"]],
  ["v-e6a31970","/docs/Mybatis/5.%20CRUD.html",{"t":"5. CRUD","i":"note","y":"a","e":"5. CRUD xml 文件中相关参数说明: id: 对应的namespace接口中的方法名 resultType: 方法返回值类型 parameterType：方法参数的数据类型\r\" parameterType 它的值是 java 的数据类型全限定名称或者是 mybatis 定义的别名\"\r\" 例如：\"\r\" parameterType=\"java.lang.","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":2.82,"words":846}},["/docs/Mybatis/5. CRUD.html","/docs/Mybatis/5.%20CRUD","/docs/Mybatis/5. CRUD.md","/docs/Mybatis/5.%20CRUD.md"]],
  ["v-058621fb","/docs/Mybatis/6.%20%E9%85%8D%E7%BD%AE%20environments.html",{"t":"6. 配置 environments","i":"note","y":"a","e":"6. 配置 environments Mybatis 可以配置成适应多种环境 但是每个 SqlSessionFactory 实例只能选择一种环境: Mybatis 默认的事务管理器就是 jdbc, 连接池:POOLED 1. 属性（properties） 这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性. 该","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":3.66,"words":1099}},["/docs/Mybatis/6. 配置 environments.html","/docs/Mybatis/6.%20%E9%85%8D%E7%BD%AE%20environments","/docs/Mybatis/6. 配置 environments.md","/docs/Mybatis/6.%20%E9%85%8D%E7%BD%AE%20environments.md"]],
  ["v-afd252ec","/docs/Mybatis/7.%20ResultMap%20%E7%BB%93%E6%9E%9C%E9%9B%86%E6%98%A0%E5%B0%84.html",{"t":"7. ResultMap 结果集映射","i":"note","y":"a","e":"7. ResultMap 结果集映射 当 bean 属性名与数据库字段名不一致时 会导致结果集映射不到 解决方法:\r起别名; \rResultMap; resultMap 元素是 MyBatis 中最重要最强大的元素。 ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":0.56,"words":169}},["/docs/Mybatis/7. ResultMap 结果集映射.html","/docs/Mybatis/7.%20ResultMap%20%E7%BB%93%E6%9E%9C%E9%9B%86%E6%98%A0%E5%B0%84","/docs/Mybatis/7. ResultMap 结果集映射.md","/docs/Mybatis/7.%20ResultMap%20%E7%BB%93%E6%9E%9C%E9%9B%86%E6%98%A0%E5%B0%84.md"]],
  ["v-4e5972a0","/docs/Mybatis/8.%20%E6%97%A5%E5%BF%97.html",{"t":"8. 日志","i":"note","y":"a","e":"8. 日志 1. 日志工厂 SLF4J LOG4J(掌握) LOG4J2 JDK_LOGGING COMMONS_LOGGING STDOUT_LOGGING(掌握) NO_LOGGING STDOUT_LOGGING LOG4J\rLog4j 是Apache的一个开源项目，通过使用 Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件; \r","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":1.06,"words":317}},["/docs/Mybatis/8. 日志.html","/docs/Mybatis/8.%20%E6%97%A5%E5%BF%97","/docs/Mybatis/8. 日志.md","/docs/Mybatis/8.%20%E6%97%A5%E5%BF%97.md"]],
  ["v-6ec20f99","/docs/Mybatis/9.%20%E5%88%86%E9%A1%B5.html",{"t":"9. 分页","i":"note","y":"a","e":"9. 分页 limit 分页 sql 接口 mapper.xml 测试 RowBounds 分页 接口 mapper.xml 测试 分页插件 Mybatis PageHelper 1. 添加 maven 依赖 2. 配置拦截器插件 3. 简单使用","d":"2022-08-30T00:00:00.000Z","l":"2022年8月30日","c":["mybatis"],"r":{"minutes":1.21,"words":362}},["/docs/Mybatis/9. 分页.html","/docs/Mybatis/9.%20%E5%88%86%E9%A1%B5","/docs/Mybatis/9. 分页.md","/docs/Mybatis/9.%20%E5%88%86%E9%A1%B5.md"]],
  ["v-4bf0a3d7","/docs/Mybatis/",{"t":"Mybatis","y":"a","e":"Mybatis mybatis, 一个框架, 早期叫做 ibatis, 代码在 github。 mybatis 是 MyBatis SQL Mapper Framework for Java （sql 映射框架） 对应三层架构中的数据访问层---dao 类--mybatis（框架）","r":{"minutes":0.16,"words":47}},["/docs/Mybatis/index.html","/docs/Mybatis/readme.md"]],
  ["v-b766a27e","/docs/MySQL/1.%20%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93.html",{"t":"1. 创建与管理数据库","i":"note","y":"a","e":"1. 创建与管理数据库 数据库可以看成是一个存储数据对象的容器。这些数据对象包括表、视图、触发器、存储过程等。其中数据表是最基本的数据对象，用于存放数据。 命令行登录数据库： 使用： 语句来查看当前所有存在的数据库。 创建数据库 在 MySQL 中，可以使用 CREATE DATABASE 语句创建数据库，语法格式如下：\r\" CREATE DATABASE ","d":"2022-08-22T00:00:00.000Z","l":"2022年8月22日","c":["MySQL"],"r":{"minutes":5.39,"words":1618}},["/docs/MySQL/1. 创建与管理数据库.html","/docs/MySQL/1.%20%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93","/docs/MySQL/1. 创建与管理数据库.md","/docs/MySQL/1.%20%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93.md"]],
  ["v-613cbcf1","/docs/MySQL/2.%20%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E8%A1%A8.html",{"t":"2. 创建与管理数据表","i":"note","y":"a","e":"2. 创建与管理数据表 在数据库中，数据表是数据库中最重要、最基本的操作对象，是数据存储的基本单位。 每一行代表唯一的记录，每一列称为一个字段，每一列都有一个与其它列不重复的名称，称为字段名。数据表中的一列由一组字段值组成，若某个字段的值出现重复，该字段称为普通字段，若某个字段的值不允许重复，该字段称为索引字段。 MYSQL 常用数据类型 MySQL 中常用","d":"2022-08-22T00:00:00.000Z","l":"2022年8月22日","c":["MySQL"],"r":{"minutes":7.35,"words":2205}},["/docs/MySQL/2. 创建与管理数据表.html","/docs/MySQL/2.%20%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E8%A1%A8","/docs/MySQL/2. 创建与管理数据表.md","/docs/MySQL/2.%20%E5%88%9B%E5%BB%BA%E4%B8%8E%E7%AE%A1%E7%90%86%E6%95%B0%E6%8D%AE%E8%A1%A8.md"]],
  ["v-2772d6b3","/docs/MySQL/3.%20%E7%BA%A6%E6%9D%9F%E7%AE%A1%E7%90%86.html",{"t":"3. 约束管理","i":"note","y":"a","e":"3. 约束管理 约束的作用： 确保数据的完整性：数据的一致性和正确性。 约束分类：\r单列约束：每个约束只约束一列。; \r多列约束：每个约束约束多列数据。; MySQL 中常用的六类约束： 1. 主键约束 主键约束是使用最频繁的约束。在设计数据表时，一般情况下，都会要求表中设置一个主键。 主键是表的一个特殊字段，该字段能唯一标识该表中的每条信息。例如，学生信息","d":"2022-08-22T00:00:00.000Z","l":"2022年8月22日","c":["MySQL"],"r":{"minutes":22.08,"words":6623}},["/docs/MySQL/3. 约束管理.html","/docs/MySQL/3.%20%E7%BA%A6%E6%9D%9F%E7%AE%A1%E7%90%86","/docs/MySQL/3. 约束管理.md","/docs/MySQL/3.%20%E7%BA%A6%E6%9D%9F%E7%AE%A1%E7%90%86.md"]],
  ["v-1ac2392a","/docs/MySQL/4.%20%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html",{"t":"4. 数据表的基本操作","i":"note","y":"a","e":"4. 数据表的基本操作 数据操纵语言 数据操纵语言（Data Manipulation Language，DML）包含了数据库数据的增、删、改、查操作，其中主要包括 INSERT、DELETE、UPDATE、SELECT 四条命令。 MySQL 运算符 四大类运算符：算数运算符、比较运算符、逻辑运算符、位操作运算符 算数运算符 加+、减-、乘*、除/、求余（","d":"2022-08-26T00:00:00.000Z","l":"2022年8月26日","c":["MySQL"],"r":{"minutes":47.02,"words":14105}},["/docs/MySQL/4. 数据表的基本操作.html","/docs/MySQL/4.%20%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C","/docs/MySQL/4. 数据表的基本操作.md","/docs/MySQL/4.%20%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.md"]],
  ["v-7266d948","/docs/MySQL/5.%20%E8%A7%86%E5%9B%BE.html",{"t":"5. 视图","i":"note","y":"a","e":"5. 视图 视图概述 MySQL 视图（View）是一种虚拟存在的表，同真实表一样，视图也由列和行构成，但视图并不实际存在于数据库中。行和列的数据来自于定义视图的查询中所使用的表，并且还是在使用视图时动态生成的。 数据库中只存放了视图的定义，并没有存放视图中的数据，这些数据都存放在定义视图查询所引用的真实表中。使用视图查询数据时，数据库会从真实表中取出对应的","d":"2022-08-26T00:00:00.000Z","l":"2022年8月26日","c":["MySQL"],"r":{"minutes":9.75,"words":2926}},["/docs/MySQL/5. 视图.html","/docs/MySQL/5.%20%E8%A7%86%E5%9B%BE","/docs/MySQL/5. 视图.md","/docs/MySQL/5.%20%E8%A7%86%E5%9B%BE.md"]],
  ["v-de8ad788","/docs/MySQL/6.%20%E7%B4%A2%E5%BC%95.html",{"t":"6. 索引","i":"note","y":"a","e":"6. 索引 索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录。本节将详细讲解索引的含义、作用和优缺点。 通过索引，查询数据时不用读完记录的所有信息，而只是查询索引列。否则，数据库系统将读取每条记录的所有信息进行匹配。 可以把索引比作新华字典的音序表。例如，要查“库”字，如果不使用音序，就需要从字典的 40","d":"2022-08-26T00:00:00.000Z","l":"2022年8月26日","c":["MySQL"],"r":{"minutes":15.37,"words":4611}},["/docs/MySQL/6. 索引.html","/docs/MySQL/6.%20%E7%B4%A2%E5%BC%95","/docs/MySQL/6. 索引.md","/docs/MySQL/6.%20%E7%B4%A2%E5%BC%95.md"]],
  ["v-18938790","/docs/MySQL/7.%20%E4%BA%8B%E5%8A%A1.html",{"t":"7. 事务","i":"note","y":"a","e":"7. 事务 在银行业务中，有一条记账原则，即有借有贷，借贷相等。为了保证这种原则，每发生一笔银行业务，就必须确保会计账目上借方科目和贷方科目至少各记一笔，并且这两笔账要么同时成功，要么同时失败。如果出现只记录了借方科目，或者只记录了贷方科目的情况，就违反了记账原则。会出现记错账的情况。 在银行的日常业务中，只要是同一银行（如都是中国农业银行，简称农行），一般","d":"2022-08-26T00:00:00.000Z","l":"2022年8月26日","c":["MySQL"],"r":{"minutes":6.75,"words":2024}},["/docs/MySQL/7. 事务.html","/docs/MySQL/7.%20%E4%BA%8B%E5%8A%A1","/docs/MySQL/7. 事务.md","/docs/MySQL/7.%20%E4%BA%8B%E5%8A%A1.md"]],
  ["v-3eb972aa","/docs/Vue/1.%20Vue%20%E6%A0%B8%E5%BF%83.html",{"t":"Vue 核心","i":"note","y":"a","e":"Vue 核心 安装 Vue Devtools 在浏览器上安装 Vue Devtools 插件，方便调试。 直接用``引入 直接下载并用 标签引入，Vue` 会被注册为一个全局变量。 在开发环境下不要使用压缩版本，不然你就失去了所有常见错误相关的警告! 开发版本：包含完整的警告和调试模式 生产版本：删除了警告，33.46KB min+gzip CDN 开发版本","d":"2022-10-14T00:00:00.000Z","l":"2022年10月14日","c":["Vue"],"r":{"minutes":48.04,"words":14412}},["/docs/Vue/1. Vue 核心.html","/docs/Vue/1.%20Vue%20%E6%A0%B8%E5%BF%83","/docs/Vue/1. Vue 核心.md","/docs/Vue/1.%20Vue%20%E6%A0%B8%E5%BF%83.md"]],
  ["v-94d5d45a","/docs/Vue/2.%20%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B.html",{"t":"组件化编程","i":"note","y":"a","e":"组件化编程 1. 理解: 用来实现局部(特定)功能效果的代码集合(html/css/js/image…..)； 2. 为什么: 一个界面的功能很复杂； 3. 作用: 复用编码, 简化项目编码, 提高运行效率； 非单文件组件\r\" 一个文件中包含有 n 个组件\" Vue 中使用组件的三大步骤：\r\" 1. 定义组件(创建组件)\"\r\" 2. 注册组件\"\r\" 3. 使","d":"2022-10-14T00:00:00.000Z","l":"2022年10月14日","c":["Vue"],"r":{"minutes":6.87,"words":2062}},["/docs/Vue/2. 组件化编程.html","/docs/Vue/2.%20%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B","/docs/Vue/2. 组件化编程.md","/docs/Vue/2.%20%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B.md"]],
  ["v-ddb0e5cc","/docs/Vue/3.%20%E8%84%9A%E6%89%8B%E6%9E%B6.html",{"t":"脚手架","i":"note","y":"a","e":"脚手架 脚手架安装\r\" Node 版本要求\"\r\"\"\r\" Vue CLI 4.x 需要 Node.js v8.9 或更高版本 (推荐 v10 以上)。你可以使用 n，nvm 或 nvm-windows 在同一台电脑中管理多个 Node 版本。\" 查询 npm 可用版本 查询当前版本 安装 npm 获取当前 npm 镜像 查询可用镜像 官方镜像 淘宝镜像 安装脚","d":"2022-10-14T00:00:00.000Z","l":"2022年10月14日","c":["Vue"],"r":{"minutes":26.67,"words":8000}},["/docs/Vue/3. 脚手架.html","/docs/Vue/3.%20%E8%84%9A%E6%89%8B%E6%9E%B6","/docs/Vue/3. 脚手架.md","/docs/Vue/3.%20%E8%84%9A%E6%89%8B%E6%9E%B6.md"]],
  ["v-2fd78c04","/docs/Vue/",{"t":"关于 ES6","y":"a","e":"关于 ES6 vue 学习必须要先了解ES6新特性. ES6 入门教程 - ECMAScript 6 入门 (ruanyifeng.com)","r":{"minutes":0.1,"words":29}},["/docs/Vue/index.html","/docs/Vue/readme.md"]],
  ["v-42a46c23","/docs/%E5%B0%8F%E8%AE%B0/@RestController%20%E6%8C%87%E5%AE%9A%E4%B8%BB%E8%B7%AF%E5%BE%84%E6%97%A0%E6%95%88%E8%B8%A9%E5%9D%91.html",{"t":"@RestController 指定主路径无效踩坑","i":"note","y":"a","e":"@RestController 指定主路径无效踩坑 指定路径时写成了 @RestController(\"user\"), 测试接口的时候发现无效. 查看源码关于 value 的说明: 这仅仅是建议值, 实际应该使用 @RequestMapping(\"/user\") 指定.","c":["note"],"r":{"minutes":0.25,"words":75}},["/docs/小记/@RestController 指定主路径无效踩坑.html","/docs/%E5%B0%8F%E8%AE%B0/@RestController%20%E6%8C%87%E5%AE%9A%E4%B8%BB%E8%B7%AF%E5%BE%84%E6%97%A0%E6%95%88%E8%B8%A9%E5%9D%91","/docs/小记/@RestController 指定主路径无效踩坑.md","/docs/%E5%B0%8F%E8%AE%B0/@RestController%20%E6%8C%87%E5%AE%9A%E4%B8%BB%E8%B7%AF%E5%BE%84%E6%97%A0%E6%95%88%E8%B8%A9%E5%9D%91.md"]],
  ["v-70f3364c","/docs/%E5%B0%8F%E8%AE%B0/@XXmapping%E6%B3%A8%E8%A7%A3.html",{"t":"@**Mapping","i":"note","y":"a","e":"@\\*\\*Mapping 使用 @\\*\\*Mapping 注解都是直接在他的括号中加 servlet 的名称. 默认只写一个参数的话，就是给 value 赋值. 第一个 / 可省略(访问根目录不能省). value 属性是一个字符串类型的数组，表示请求映射能够匹配多个请求地址所对应的请求. method 属性 @RequestMapping 的 method","c":["note"],"r":{"minutes":2.23,"words":670}},["/docs/小记/@XXmapping注解.html","/docs/%E5%B0%8F%E8%AE%B0/@XXmapping%E6%B3%A8%E8%A7%A3","/docs/小记/@XXmapping注解.md","/docs/%E5%B0%8F%E8%AE%B0/@XXmapping%E6%B3%A8%E8%A7%A3.md"]],
  ["v-6cf748f2","/docs/%E5%B0%8F%E8%AE%B0/Cookie%20%E5%AD%98%20JSON.html",{"t":"Cookie 存 JSON","i":"note","y":"a","e":"Cookie 存 JSON JackJSON 的使用 相关依赖: 使用需要先创建一个 ObjectMapper 对象: 使用 writeValueAsString 方法将对象转换成一个 JSON 字符串并返回. 使用 readValue 方法将一个 JSON 字符串转换成一个对象, 需要指定对象类型. Cookie 回顾, 什么是 Cookie?\r\" 1. ","c":["node"],"r":{"minutes":3.75,"words":1126}},["/docs/小记/Cookie 存 JSON.html","/docs/%E5%B0%8F%E8%AE%B0/Cookie%20%E5%AD%98%20JSON","/docs/小记/Cookie 存 JSON.md","/docs/%E5%B0%8F%E8%AE%B0/Cookie%20%E5%AD%98%20JSON.md"]],
  ["v-17ae6f07","/docs/%E5%B0%8F%E8%AE%B0/Filter%20%E8%BF%87%E6%BB%A4%E5%99%A8.html",{"t":"Filter 过滤器","i":"note","y":"a","e":"Filter 过滤器 \" 1. Filter 过滤器它是 JavaWeb 的三大组件之一。三大组件分别是：Servlet 程序、Listener 监听器、Filter 过滤器。\" \" 2. Filter 过滤器它是 JavaEE 的规范。也就是接口\" \" 3. Filter 过滤器它的作用是：拦截请求，过滤响应。\" 拦截请求常见的应用场景有： 1. 权限检查","c":["node"],"r":{"minutes":2.21,"words":664}},["/docs/小记/Filter 过滤器.html","/docs/%E5%B0%8F%E8%AE%B0/Filter%20%E8%BF%87%E6%BB%A4%E5%99%A8","/docs/小记/Filter 过滤器.md","/docs/%E5%B0%8F%E8%AE%B0/Filter%20%E8%BF%87%E6%BB%A4%E5%99%A8.md"]],
  ["v-397ffdb2","/docs/%E5%B0%8F%E8%AE%B0/",{"t":"小记","y":"a","e":"小记 mysql 查不出 null MYSQL 不能使用等于、不等于、大于、小于等算术运算符查询 NULL； mapper 文件与接口不在同一个文件夹下 mybatis 中的 0 和空串 mybatis 中``判断会把 0 和空串划等号，底层源码会把空串转成 0. 常用注解 @Autowired: 自动装配, 如果装配失败则配合@Qualifier(valu","r":{"minutes":17.33,"words":5199}},["/docs/小记/","/docs/%E5%B0%8F%E8%AE%B0/index.html","/docs/小记/readme.md","/docs/%E5%B0%8F%E8%AE%B0/readme.md"]],
  ["v-2e5294e9","/docs/%E5%B0%8F%E8%AE%B0/resultType=int%20%E8%BF%94%E5%9B%9E%E5%80%BC%E6%98%AF%20null.html",{"t":"resultType=int 返回值是 null","i":"note","y":"a","e":"resultType=int 返回值是 null 在 xml 中写 SQL 语句时, 指定的 resultType=\"int\" 当 mysql 中没查到数据时返回值不是 -1, 也不是 0, 而是 null. 原因: mybatis 对 resultType 的官方描述 \" 期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集","c":["note"],"r":{"minutes":0.6,"words":180}},["/docs/小记/resultType=int 返回值是 null.html","/docs/%E5%B0%8F%E8%AE%B0/resultType=int%20%E8%BF%94%E5%9B%9E%E5%80%BC%E6%98%AF%20null","/docs/小记/resultType=int 返回值是 null.md","/docs/%E5%B0%8F%E8%AE%B0/resultType=int%20%E8%BF%94%E5%9B%9E%E5%80%BC%E6%98%AF%20null.md"]],
  ["v-52102f92","/docs/%E5%B0%8F%E8%AE%B0/sentinel%20%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96.html",{"t":"Sentinel 规则持久化","y":"a","e":"Sentinel 规则持久化 一、修改 order-service 服务 修改 OrderService，让其监听 Nacos 中的 sentinel 规则配置。 具体步骤如下： 1.引入依赖 在 order-service 中引入 sentinel 监听 nacos 的依赖： 2.配置 nacos 地址 在 order-service 中的 applica","r":{"minutes":1.99,"words":596}},["/docs/小记/sentinel 规则持久化.html","/docs/%E5%B0%8F%E8%AE%B0/sentinel%20%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96","/docs/小记/sentinel 规则持久化.md","/docs/%E5%B0%8F%E8%AE%B0/sentinel%20%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96.md"]],
  ["v-6af377ba","/docs/%E5%B0%8F%E8%AE%B0/SSM%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html",{"t":"环境搭建","i":"note","y":"a","e":"环境搭建 创建 web 项目并添加相关依赖. 相关依赖和配置 统一项目构建字符编码 为 UTF-8, JDK 版本号为 1.8: 相关依赖: 指定资源文件路径: 项目结构 后端结构: 资源文件: 前端结构: 配置文件 conf/jdbc.properties conf/mybatis.xml conf/spring.xml conf/springmvc.xm","c":["note"],"r":{"minutes":3.2,"words":961}},["/docs/小记/SSM 环境搭建.html","/docs/%E5%B0%8F%E8%AE%B0/SSM%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA","/docs/小记/SSM 环境搭建.md","/docs/%E5%B0%8F%E8%AE%B0/SSM%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md"]],
  ["v-4693ac96","/docs/%E5%B0%8F%E8%AE%B0/TypeReference%20%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E5%B1%9E%E6%80%A7.html",{"t":"TypeReference 获取泛型属性","i":"note","y":"a","e":"TypeReference 获取泛型属性 当一个对象含有的属性有泛型时, 反序列化该对象可以尝试使用 TypeReference. 例如: 当尝试使用 hutool 工具类反序列化该对象时: 使用 FastJson: hutool 工具类中的 TypeReference 是参考 FastJson 中的 TypeReference. FastJson 中的 T","c":["note"],"r":{"minutes":1.19,"words":357}},["/docs/小记/TypeReference 获取泛型属性.html","/docs/%E5%B0%8F%E8%AE%B0/TypeReference%20%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E5%B1%9E%E6%80%A7","/docs/小记/TypeReference 获取泛型属性.md","/docs/%E5%B0%8F%E8%AE%B0/TypeReference%20%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E5%B1%9E%E6%80%A7.md"]],
  ["v-54baea82","/docs/%E5%B0%8F%E8%AE%B0/v-modeldisabled%20%E5%92%8C%20disabled%20%E8%B8%A9%E5%9D%91.html",{"t":"v-modeldisabled 和 disabled 踩坑","i":"note","y":"a","e":"v-modeldisabled 和 disabled 踩坑 双向绑定基本知识 v-model 是 :value 和 @input 的结合, 相当于语法糖. 仅限： ``; ``; ``; components; 修饰符： .lazy —— 监听 change 事件而不是 input .number —— 将输入的合法符串转为数字 .trim —— 移除输入内","c":["note"],"r":{"minutes":1.56,"words":469}},["/docs/小记/v-modeldisabled 和 disabled 踩坑.html","/docs/%E5%B0%8F%E8%AE%B0/v-modeldisabled%20%E5%92%8C%20disabled%20%E8%B8%A9%E5%9D%91","/docs/小记/v-modeldisabled 和 disabled 踩坑.md","/docs/%E5%B0%8F%E8%AE%B0/v-modeldisabled%20%E5%92%8C%20disabled%20%E8%B8%A9%E5%9D%91.md"]],
  ["v-65ec0e52","/docs/%E5%B0%8F%E8%AE%B0/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",{"t":"函数式编程-Stream 流","y":"a","e":"函数式编程-Stream 流 1. 概述 1.1 为什么学？ 能够看懂公司里的代码; 大数量下处理集合效率高; 代码可读性高; 消灭嵌套地狱; 1.2 函数式编程思想 1.2.1 概念 面向对象思想需要关注用什么对象完成什么事情。而函数式编程思想就类似于我们数学中的函数。它主要关注的是对数据进行了什么操作。 1.2.2 优点 代码简洁，开发快速; 接近自然语","r":{"minutes":23.86,"words":7159}},["/docs/小记/函数式编程.html","/docs/%E5%B0%8F%E8%AE%B0/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B","/docs/小记/函数式编程.md","/docs/%E5%B0%8F%E8%AE%B0/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.md"]],
  ["v-2943768a","/docs/%E5%B0%8F%E8%AE%B0/%E5%8E%9F%E6%9D%A5%20@Autowired%20%E6%B3%A8%E8%A7%A3%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E4%B9%88%E7%8E%A9%EF%BC%9F.html",{"t":"原来 @Autowired 注解还可以这么玩？","i":"note","y":"a","e":"原来 @Autowired 注解还可以这么玩？ @Autowired 字段 我们可以把 @Autowired 注解标注在类文件中的字段属性上，通过这种方式，Spring 容器启动的时候会查找相应的 Bean ，然后通过反射的方式注入到这个字段中。 例子如下： 这种方式使用起来非常方便，而且对于字段的要求也比较低，它可以是 public,也可以是 privat","c":["note"],"r":{"minutes":3.29,"words":988}},["/docs/小记/原来 @Autowired 注解还可以这么玩？.html","/docs/%E5%B0%8F%E8%AE%B0/%E5%8E%9F%E6%9D%A5%20@Autowired%20%E6%B3%A8%E8%A7%A3%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E4%B9%88%E7%8E%A9%EF%BC%9F","/docs/小记/原来 @Autowired 注解还可以这么玩？.md","/docs/%E5%B0%8F%E8%AE%B0/%E5%8E%9F%E6%9D%A5%20@Autowired%20%E6%B3%A8%E8%A7%A3%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%99%E4%B9%88%E7%8E%A9%EF%BC%9F.md"]],
  ["v-38e3af79","/docs/%E5%B0%8F%E8%AE%B0/%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC.html",{"t":"处理器方法的返回值","i":"note","y":"a","e":"处理器方法的返回值 返回 ModelAndView 若处理器方法处理完后，需要跳转到其它资源，且又要在跳转的资源间传递数据，此时处理器方法返回 ModelAndView 比较好。 当然，若要返回 ModelAndView，则处理器方法中需要定义 ModelAndView 对象。 在使用时，若该处理器方法只是进行跳转而不传递数据，或只是传递数据而并不向任何资源","c":["note"],"r":{"minutes":8.01,"words":2404}},["/docs/小记/处理器方法的返回值.html","/docs/%E5%B0%8F%E8%AE%B0/%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC","/docs/小记/处理器方法的返回值.md","/docs/%E5%B0%8F%E8%AE%B0/%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC.md"]],
  ["v-4b2ec6b3","/docs/%E5%B0%8F%E8%AE%B0/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E4%B8%8E%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91.html",{"t":"请求转发与请求重定向","i":"note","y":"a","e":"请求转发与请求重定向 forward: 表示转发 redirect: 表示重定向 forward 和 redirect 都是关键字, 有一个共同的特点不和视图解析器一同工作\rforward 和 redirect 他们都可以访问视图文件, 比如某个 jsp, html forward:/hello.jsp forward:/main.html forward ","c":["note"],"r":{"minutes":3.06,"words":919}},["/docs/小记/请求转发与请求重定向.html","/docs/%E5%B0%8F%E8%AE%B0/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E4%B8%8E%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91","/docs/小记/请求转发与请求重定向.md","/docs/%E5%B0%8F%E8%AE%B0/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E4%B8%8E%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91.md"]],
  ["v-19f4fb29","/docs/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99.html",{"t":"设计模式七大原则","y":"a","e":"设计模式七大原则 1) 单一职责原则 2) 接口隔离原则 3) 依赖倒转(倒置)原则 4) 里氏替换原则 5) 开闭原则 6) 迪米特法则 7) 合成复用原则 单一职责原则 对类来说的，即一个类应该只负责一项职责。如类A负责两个不同职责：职责 1，职责 2。 当职责 1 需求变更而改变A时，可能造成职责 2 执行错误，所以需要将类A的粒度分解为A1，A2 应","r":{"minutes":16.61,"words":4984}},["/docs/设计模式/1.设计模式七大原则.html","/docs/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99","/docs/设计模式/1.设计模式七大原则.md","/docs/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99.md"]],
  ["v-d27c7b0e","/docs/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.html",{"t":"创建型模式","y":"a","e":"创建型模式 创建型模式关注点是如何创建对象，其核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。 创建型模式包括：\r工厂方法：Factory Method; \r抽象工厂：Abstract Factory; \r建造者：Builder; \r原型：Prototype; \r单例：Singleton; 单例模式\r\" 保证一个类仅有一个实例，并提供一个","r":{"minutes":6.22,"words":1867}},["/docs/设计模式/2.创建型模式.html","/docs/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F","/docs/设计模式/2.创建型模式.md","/docs/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2.%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F.md"]],
  ["v-f165bcda","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",{"t":"全局异常处理","y":"a","e":"全局异常处理 为集中处理系统异常，自定义统一的错误码，并封装了全局异常处理器 ，屏蔽了项目冗余的报错细节、便于接口调用方理解和统一处理。 @ControllerAdvice 注解 ControllerAdvice本质上是一个Component\r\"Specialization of @Component for classes that declare @Ex","r":{"minutes":1.1,"words":331}},["/docs/项目笔记/全局异常处理.html","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86","/docs/项目笔记/全局异常处理.md","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md"]],
  ["v-17d6efce","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.html",{"t":"分页查询","y":"a","e":"分页查询 为降低开发成本，使用 MyBatis Plus 框架自动生成业务的增删改查重复代码，并使用 LambdaQueryWrapper 实现更灵活地自定义查询。 遵循 Restful 设计规范编写接口，降低前后端接口沟通和理解成本。 前端参数:(page, pagesize, name) mp 插件配置 关于 Page 具体使用","r":{"minutes":0.99,"words":298}},["/docs/项目笔记/分页查询.html","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2","/docs/项目笔记/分页查询.md","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2.md"]],
  ["v-ba308e74","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83.html",{"t":"用户中心","y":"a","e":"用户中心 前端项目初始化 保证 npm, yarn 等包依赖管理器和 node.js 相应路径对应 查看 npm 配置 修改安装路径 修改缓存路径 初始化项目 umi-ui 后端项目初始化 创建一个 SpringBoot 项目, 添加相关依赖: 关于 @RunWith(SpringRunner.class) 注解: 该测试类是 junit 的注解, 使用 j","r":{"minutes":1.7,"words":509}},["/docs/项目笔记/用户中心.html","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83","/docs/项目笔记/用户中心.md","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83.md"]],
  ["v-40fa0584","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8.html",{"t":"自定义消息转换器","y":"a","e":"自定义消息转换器 为兼容请求参数 date 类型的序列化，自定义 Jackson 对象映射器处理日期；并扩展 SpringMVC 的消息转换器，实现自动序列化。 扩展mvc框架的消息转换器","r":{"minutes":1.27,"words":382}},["/docs/项目笔记/自定义消息转换器.html","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8","/docs/项目笔记/自定义消息转换器.md","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF%E8%BD%AC%E6%8D%A2%E5%99%A8.md"]],
  ["v-3e5548d2","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85.html",{"t":"自定义自动填充","y":"a","e":"自定义自动填充 自定义 MyBatis Plus 的 MetaObjectHandler，配合全局上下文实现写数据前的创建时间、用户 id 字段的自动填充。 实体类","r":{"minutes":0.72,"words":217}},["/docs/项目笔记/自定义自动填充.html","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85","/docs/项目笔记/自定义自动填充.md","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85.md"]],
  ["v-839048ac","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E.html",{"t":"谷粒商城","y":"a","e":"谷粒商城 环境搭建 虚拟机, docker, docker 安装 mysql, docker 安装 redis, git 初始化数据库: pms_catelog.sql gulimall_oms.sql gulimall_pms.sql gulimall_sms.sql gulimall_ums.sql gulimall_wms.sql sys_menus.","r":{"minutes":23.75,"words":7126}},["/docs/项目笔记/谷粒商城.html","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E","/docs/项目笔记/谷粒商城.md","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E.md"]],
  ["v-33bcd51d","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/1.%20Redis%20%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html",{"t":"Redis 常见命令","i":"note","y":"a","e":"Redis 常见命令 Redis 是典型的 key-value 数据库，key 一般是字符串，而 value 包含很多不同的数据类型： Redis 为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ ）可以查看到不同的命令： 不同类型的命令称为一个 group，我们也可以通过 help 命令来查看各种不同 group 的命令： Redis 通用命","d":"2022-10-21T00:00:00.000Z","l":"2022年10月21日","c":["Redis"],"r":{"minutes":6.7,"words":2010}},["/docs/Redis/Redis 基础/1. Redis 常见命令.html","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/1.%20Redis%20%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4","/docs/Redis/Redis 基础/1. Redis 常见命令.md","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/1.%20Redis%20%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.md"]],
  ["v-34161bfe","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/2.%20Redis%20%E7%9A%84%20Java%20%E5%AE%A2%E6%88%B7%E7%AB%AF.html",{"t":"Redis 的 Java 客户端","i":"note","y":"a","e":"Redis 的 Java 客户端 在 Redis 官网中提供了各种语言的客户端，地址： 其中 Java 客户端也包含很多： 标记为 * 的就是推荐使用的 java 客户端，包括： Jedis 和 Lettuce：这两个主要是提供了 Redis 命令对应的 API，方便我们操作 Redis，而 SpringDataRedis 又对这两种做了抽象和封装，因此我们","d":"2022-10-21T00:00:00.000Z","l":"2022年10月21日","c":["Redis"],"r":{"minutes":4.85,"words":1456}},["/docs/Redis/Redis 基础/2. Redis 的 Java 客户端.html","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/2.%20Redis%20%E7%9A%84%20Java%20%E5%AE%A2%E6%88%B7%E7%AB%AF","/docs/Redis/Redis 基础/2. Redis 的 Java 客户端.md","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/2.%20Redis%20%E7%9A%84%20Java%20%E5%AE%A2%E6%88%B7%E7%AB%AF.md"]],
  ["v-cfc3ccc0","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/",{"t":"安装 Redis","y":"a","e":"安装 Redis 大多数企业都是基于 Linux 服务器来部署项目，而且 Redis 官方也没有提供 Windows 版本的安装包。 此处选择的 Linux 版本为 CentOS 7. 依赖库 Redis 是基于 C 语言编写的，因此首先需要安装 Redis 所需要的 gcc 依赖： 下载并解压 Redis 的官方网站地址：https: /redis.io/","r":{"minutes":3.52,"words":1055}},["/docs/Redis/Redis 基础/","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/index.html","/docs/Redis/Redis 基础/readme.md","/docs/Redis/Redis%20%E5%9F%BA%E7%A1%80/readme.md"]],
  ["v-0e141eb0","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/1.%20%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95.html",{"t":"短信登录","i":"note","y":"a","e":"短信登录 基本流程 发送验证码： 用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号，如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户 短信验证码登录、注册： 用户将验证码和手机号进行输入，后台从 session 中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则","d":"2022-10-25T00:00:00.000Z","l":"2022年10月25日","c":["Redis"],"r":{"minutes":7.02,"words":2105}},["/docs/Redis/Redis 实战/1. 短信登录.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/1.%20%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95","/docs/Redis/Redis 实战/1. 短信登录.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/1.%20%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95.md"]],
  ["v-44ec9ffe","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/10.%20%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0.html",{"t":"用户签到","y":"a","e":"用户签到 BitMap 功能演示 我们针对签到功能完全可以通过 mysql 来完成，比如说以下这张表 用户一次签到，就是一条记录，假如有 1000 万用户，平均每人每年签到次数为 10 次，则这张表一年的数据量为 1 亿条 每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共 22 字节的内存，一个月则最多需要 600 多字节 我们如何能够简化","r":{"minutes":7.55,"words":2265}},["/docs/Redis/Redis 实战/10. 用户签到.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/10.%20%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0","/docs/Redis/Redis 实战/10. 用户签到.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/10.%20%E7%94%A8%E6%88%B7%E7%AD%BE%E5%88%B0.md"]],
  ["v-f6aa5eba","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/11.%20UV%E7%BB%9F%E8%AE%A1.html",{"t":"UV 统计","y":"a","e":"UV 统计 HyperLogLog 首先我们搞懂两个概念：\rUV：全称 Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1 天内同一个用户多次访问该网站，只记录 1 次。; \rPV：全称 Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录 1 次 PV，用户多次打开页面，则记录多次 PV。往往用","r":{"minutes":1.68,"words":505}},["/docs/Redis/Redis 实战/11. UV统计.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/11.%20UV%E7%BB%9F%E8%AE%A1","/docs/Redis/Redis 实战/11. UV统计.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/11.%20UV%E7%BB%9F%E8%AE%A1.md"]],
  ["v-5aa45e56","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/2.%20%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.html",{"t":"商户查询缓存","i":"note","y":"a","e":"商户查询缓存 缓存(Cache),就是数据交换的缓冲区,俗称的缓存就是缓冲区内的数据,一般从数据库中获取,存储于本地代码 缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大 降低用户访问并发量带来的服务器读写压力 实际开发过程中,企业的数据量,少则几十万,多则几千万,这么大数据量,如果没有缓存来 作为\"避震器\",系统是几乎撑不住","d":"2022-10-26T00:00:00.000Z","l":"2022年10月26日","c":["Redis"],"r":{"minutes":16.83,"words":5049}},["/docs/Redis/Redis 实战/2. 商户查询缓存.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/2.%20%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98","/docs/Redis/Redis 实战/2. 商户查询缓存.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/2.%20%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.md"]],
  ["v-daa15a76","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/3.%20%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80.html",{"t":"优惠卷秒杀","y":"a","e":"优惠卷秒杀 全局唯一 ID 当用户抢购时，就会生成订单并保存到 tbvoucherorder 这张表中，而订单表如果使用数据库自增 ID 就存在一些问题：\rid 的规律性太明显; \r受单表数据量的限制; 如果我们的 id 具有太明显的规则，用户或者说商业对手很容易猜测出来我们的一些敏感信息，比如商城在一天时间内，卖出了多少单，这明显不合适。 随着我们商城规模","r":{"minutes":14.15,"words":4245}},["/docs/Redis/Redis 实战/3. 优惠券秒杀.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/3.%20%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80","/docs/Redis/Redis 实战/3. 优惠券秒杀.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/3.%20%E4%BC%98%E6%83%A0%E5%88%B8%E7%A7%92%E6%9D%80.md"]],
  ["v-8767b658","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/4.%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{"t":"分布式锁","y":"a","e":"分布式锁 基本原理和实现 分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。 分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路 那么分布式锁他应该满足一些什么样的条件呢？ 可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的","r":{"minutes":18.62,"words":5586}},["/docs/Redis/Redis 实战/4. 分布式锁.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/4.%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81","/docs/Redis/Redis 实战/4. 分布式锁.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/4.%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.md"]],
  ["v-d6b988de","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/5.%20%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96.html",{"t":"秒杀优化","y":"a","e":"秒杀优化 异步秒杀思路 我们来回顾一下下单流程 当用户发起请求，此时会请求 nginx，nginx 会访问到 tomcat，而 tomcat 中的程序，会进行串行操作，分成如下几个步骤\r\" 1. 查询优惠卷\"\r\"\"\r\" 2. 判断秒杀库存是否足够\"\r\"\"\r\" 3. 查询订单\"\r\"\"\r\" 4. 校验是否是一人一单\"\r\"\"\r\" 5. 扣减库存\"\r\"\"\r\" 6. ","r":{"minutes":7.44,"words":2232}},["/docs/Redis/Redis 实战/5. 秒杀优化.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/5.%20%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96","/docs/Redis/Redis 实战/5. 秒杀优化.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/5.%20%E7%A7%92%E6%9D%80%E4%BC%98%E5%8C%96.md"]],
  ["v-601f751a","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/6.%20Redis%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.html",{"t":"Redis 消息队列","y":"a","e":"Redis 消息队列 认识消息队列 什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括 3 个角色：\r消息队列：存储和管理消息，也被称为消息代理（Message Broker）; \r生产者：发送消息到消息队列; \r消费者：从消息队列获取消息并处理消息; 使用队列的好处在于 解耦：所谓解耦，举一个生活中的例子就是：快递员(生产者)把快递放到快","r":{"minutes":7.31,"words":2193}},["/docs/Redis/Redis 实战/6. Redis 消息队列.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/6.%20Redis%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97","/docs/Redis/Redis 实战/6. Redis 消息队列.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/6.%20Redis%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.md"]],
  ["v-5bfdfc97","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/7.%20%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97.html",{"t":"达人探店","y":"a","e":"达人探店 发布探店笔记 发布探店笔记 探店笔记类似点评网站的评价，往往是图文结合。对应的表有两个： tb_blog：探店笔记表，包含笔记中的标题、文字、图片等 tbblogcomments：其他用户对探店笔记的评价 具体发布流程: 上传接口 注意：需要修改 SystemConstants.IMAGEUPLOADDIR 为自己图片所在的地址，在实际开发中图片一","r":{"minutes":5.28,"words":1584}},["/docs/Redis/Redis 实战/7. 达人探店.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/7.%20%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97","/docs/Redis/Redis 实战/7. 达人探店.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/7.%20%E8%BE%BE%E4%BA%BA%E6%8E%A2%E5%BA%97.md"]],
  ["v-2e736faa","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/8.%20%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8.html",{"t":"好友关注","y":"a","e":"好友关注 关注和取消关注 针对用户的操作：可以对用户进行关注和取消关注功能。 实现思路： 需求：基于该表数据结构，实现两个接口：\r关注和取关接口; \r判断是否关注的接口; 关注是 User 之间的关系，是博主与粉丝的关系，数据库中有一张 tb_follow 表来标示： 注意: 这里需要把主键修改为自增长，简化开发。 FollowController Foll","r":{"minutes":10.86,"words":3259}},["/docs/Redis/Redis 实战/8. 好友关注.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/8.%20%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8","/docs/Redis/Redis 实战/8. 好友关注.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/8.%20%E5%A5%BD%E5%8F%8B%E5%85%B3%E6%B3%A8.md"]],
  ["v-f6807800","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/9.%20%E9%99%84%E8%BF%91%E5%95%86%E6%88%B7.html",{"t":"附近商户","y":"a","e":"附近商户 GEO 数据结构的基本用法 GEO 就是 Geolocation 的简写形式，代表地理坐标。Redis 在 3.2 版本中加入了对 GEO 的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：\rGEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）; \rGEODIST","r":{"minutes":3.99,"words":1198}},["/docs/Redis/Redis 实战/9. 附近商户.html","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/9.%20%E9%99%84%E8%BF%91%E5%95%86%E6%88%B7","/docs/Redis/Redis 实战/9. 附近商户.md","/docs/Redis/Redis%20%E5%AE%9E%E6%88%98/9.%20%E9%99%84%E8%BF%91%E5%95%86%E6%88%B7.md"]],
  ["v-35b09c2c","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/1.%20SpringBoot.html",{"t":"1. SpringBoot","i":"note","y":"a","e":"1. SpringBoot 介绍 SpringBoot 是 Spring 中的一个成员, 可以简化 Spring, SpringMVC 的使用. 他的核心还是 IOC 容器. 特点:\rCreate stand-alone Spring applications; 创建 spring 应用\rEmbed Tomcat, Jetty or Undertow dir","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["SpringBoot"],"r":{"minutes":14.1,"words":4229}},["/docs/Spring系列/SpringBoot/1. SpringBoot.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/1.%20SpringBoot","/docs/Spring系列/SpringBoot/1. SpringBoot.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/1.%20SpringBoot.md"]],
  ["v-05b88a04","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/2.%20JavaConfig.html",{"t":"2. JavaConfig","i":"note","y":"a","e":"2. JavaConfig JavaConfig\r\" JavaConfig: 使用 java 类作为 xml 配置文件的替代, 是配置 spring 容器的纯 java 的方式. 在这个 java 类这可以创建 java 对象, 把对象放入 spring 容器中(注入到容器), 该配置类本身也是组件\" 使用两个注解:\r\" @Configuration: 放在","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["SpringBoot"],"r":{"minutes":5.59,"words":1677}},["/docs/Spring系列/SpringBoot/2. JavaConfig.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/2.%20JavaConfig","/docs/Spring系列/SpringBoot/2. JavaConfig.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/2.%20JavaConfig.md"]],
  ["v-0141c4fc","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/3.%20Web%E7%BB%84%E4%BB%B6.html",{"t":"3. Web 组件","i":"note","y":"a","e":"3. Web 组件\r\" 拦截器, Servlet , Filter\" 拦截器 拦截器是 SpringMVC 中一种对象, 能拦截器对 Controller 的请求. 拦截器框架中有系统的拦截器, 还可以自定义拦截器, 实现对请求预先处理. SpringMVC 拦截器: 1. 创建类实现 SpringMVC 框架的 HandlerInterceptor 接口 ","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["SpringBoot"],"r":{"minutes":4.45,"words":1335}},["/docs/Spring系列/SpringBoot/3. Web组件.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/3.%20Web%E7%BB%84%E4%BB%B6","/docs/Spring系列/SpringBoot/3. Web组件.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/3.%20Web%E7%BB%84%E4%BB%B6.md"]],
  ["v-422a0dba","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/4.%20ORM%20%E6%93%8D%E4%BD%9C%20MySQL.html",{"t":"4. ORM 操作 MySQL","i":"note","y":"a","e":"4. ORM 操作 MySQL 使用 MyBatis 框架操作数据, 在 SpringBoot 框架集成 MyBatis 使用步骤:\r\" 1. mybatis 起步依赖: 完成 mybatis 对象自动配置, 对象放在容器中\"\r\"\"\r\" 2. pom.xml 指定把 src/main/java 目录中的 xml 文件包含到 classpath 中\"\r\"\"\r\"","d":"2022-09-07T00:00:00.000Z","l":"2022年9月7日","c":["SpringBoot"],"r":{"minutes":4.62,"words":1387}},["/docs/Spring系列/SpringBoot/4. ORM 操作 MySQL.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/4.%20ORM%20%E6%93%8D%E4%BD%9C%20MySQL","/docs/Spring系列/SpringBoot/4. ORM 操作 MySQL.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/4.%20ORM%20%E6%93%8D%E4%BD%9C%20MySQL.md"]],
  ["v-3df4d6e4","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/5.%20RESTful.html",{"t":"5. RESTful","i":"note","y":"a","e":"5. RESTful 接口: API（Application Programming Interface,应用程序接口）是一些预先定义的接口（如函数、HTTP 接口）,或指软件系统不同组成部分衔接的约定. 用来提供应用程序与开发人员基于某软件或硬件得以访问的一组例程,而又无需访问源码,或理解内部工作机制的细节. 接口（API）: 可以指访问 servlet,","d":"2022-09-07T00:00:00.000Z","l":"2022年9月7日","c":["SpringBoot"],"r":{"minutes":4.29,"words":1286}},["/docs/Spring系列/SpringBoot/5. RESTful.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/5.%20RESTful","/docs/Spring系列/SpringBoot/5. RESTful.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/5.%20RESTful.md"]],
  ["v-5353571e","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/6.%20%E6%80%BB%E7%BB%93.html",{"t":"总结","i":"note","y":"a","e":"总结 注解 Spring + SpringMVC + SpringBoot 创建对象的 @Controller 放在类的上面，创建控制器对象，注入到容器中 @RestController 放在类的上面，创建控制器对象，注入到容器中。 作用：复合注解 @Controller , @ResponseBody, 使用这个注解类的，里面的控制器方法的返回值都是数据 ","d":"2022-11-04T00:00:00.000Z","l":"2022年11月4日","c":["SpringBoot"],"r":{"minutes":2.55,"words":765}},["/docs/Spring系列/SpringBoot/6. 总结.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/6.%20%E6%80%BB%E7%BB%93","/docs/Spring系列/SpringBoot/6. 总结.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/6.%20%E6%80%BB%E7%BB%93.md"]],
  ["v-40530bd4","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/",{"t":"SpringBoot2 核心技术","y":"a","e":"SpringBoot2 核心技术 1. 为什么要使用 SpringBoot 因为 Spring, SpringMVC 需要使用的大量的配置文件 （xml 文件） 还需要配置各种对象, 把使用的对象放入到 spring 容器中才能使用对象 需要了解其他框架配置规则. 2. SpringBoot 就相当于 不需要配置文件的 Spring+SpringMVC 常用","r":{"minutes":0.44,"words":131}},["/docs/Spring系列/SpringBoot/","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/index.html","/docs/Spring系列/SpringBoot/readme.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringBoot/readme.md"]],
  ["v-3243f89a","/docs/Spring%E7%B3%BB%E5%88%97/Spring/1.%20IOC.html",{"t":"1. IOC","i":"note","y":"a","e":"1. IOC IoC (Inversion of Control) : 控制反转, 是一个理论,概念,思想 描述: 把对象的创建,赋值,管理工作都交给代码之外的容器实现, 也就是对象的创建是有其它外部资源完成\r\" 正转: 由开发人员在代码中,使用 new 构造方法创建对象, 开发人员主动管理对象\"\r\"\"\r\" public static void main(S","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":1.52,"words":455}},["/docs/Spring系列/Spring/1. IOC.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/1.%20IOC","/docs/Spring系列/Spring/1. IOC.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/1.%20IOC.md"]],
  ["v-0a54010a","/docs/Spring%E7%B3%BB%E5%88%97/Spring/10.%20%E6%95%B4%E5%90%88%20Mybatis.html",{"t":"10. 整合 Mybatis","i":"note","y":"a","e":"10. 整合 Mybatis 把 mybatis 框架和 spring 集成在一起,向一个框架一样使用 用的技术是: ioc 为什么 ioc 能把 mybatis 和 spring 集成在一起,像一个框架; 是因为 ioc 能创建对象 可以把 mybatis 框架中的对象交给 spring 统一创建, 开发人员从 spring 中获取对象 开发人员就不用同时","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":5.74,"words":1722}},["/docs/Spring系列/Spring/10. 整合 Mybatis.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/10.%20%E6%95%B4%E5%90%88%20Mybatis","/docs/Spring系列/Spring/10. 整合 Mybatis.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/10.%20%E6%95%B4%E5%90%88%20Mybatis.md"]],
  ["v-3123207f","/docs/Spring%E7%B3%BB%E5%88%97/Spring/11.%20%E4%BA%8B%E5%8A%A1.html",{"t":"11. 事务","i":"note","y":"a","e":"11. 事务 1. 事务回顾 1. 什么是事务 1. 讲 mysql 的时候,提出了事务 事务是指一组 sql 语句的集合 2. 集合中有多条 sql 语句可能是 insert , update ,select ,delete 3. 我们希望这些多个 sql 语句都能成功, 或者都失败, 这些 sql 语句的执行是一致的,作为一个整体执行 2. 在什么时候想","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":12.4,"words":3721}},["/docs/Spring系列/Spring/11. 事务.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/11.%20%E4%BA%8B%E5%8A%A1","/docs/Spring系列/Spring/11. 事务.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/11.%20%E4%BA%8B%E5%8A%A1.md"]],
  ["v-49dc1b0b","/docs/Spring%E7%B3%BB%E5%88%97/Spring/12.%20%20web%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E5%AF%B9%E8%B1%A1.html",{"t":"12. web 项目使用容器对象","i":"note","y":"a","e":"12. web 项目使用容器对象 以前做的是 javase 项目有 main 方法的, 执行代码是执行 main 方法的, 在 main 里面创建的容器对象. web 项目是在 tomcat 服务器上运行的 tomcat 一起动,项目一直运行的\r需求:; \r\" web 项目中容器对象只需要创建一次, 把容器对象放入到全局作用域 ServletContext ","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":4.49,"words":1348}},["/docs/Spring系列/Spring/12.  web 项目中使用容器对象.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/12.%20%20web%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E5%AF%B9%E8%B1%A1","/docs/Spring系列/Spring/12.  web 项目中使用容器对象.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/12.%20%20web%20%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E5%AF%B9%E8%B1%A1.md"]],
  ["v-41623425","/docs/Spring%E7%B3%BB%E5%88%97/Spring/2.%20Spring%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.html",{"t":"2. Spring 创建对象","i":"note","y":"a","e":"2. Spring 创建对象 spring 是使用的 di 实现了 ioc 的功能, spring 底层创建对象,使用的是反射机制 spring 是一个容器,管理对象,给属性赋值, 底层是反射创建对象\rbean 实例:; \r接口; \r实现类; \rbeans.xml 配置文件; \r测试类; Spring 在创建容器时,会创建配置文件中所有的对象,默认调用的是无","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":2.42,"words":726}},["/docs/Spring系列/Spring/2. Spring创建对象.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/2.%20Spring%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1","/docs/Spring系列/Spring/2. Spring创建对象.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/2.%20Spring%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1.md"]],
  ["v-2c29f565","/docs/Spring%E7%B3%BB%E5%88%97/Spring/3.%20DI%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html",{"t":"3. DI: 依赖注入","i":"note","y":"a","e":"3. DI: 依赖注入 在创建对象时给属性赋值 di 的实现语法: 1. 在 spring 的配置文件中,使用标签和属性完成,叫做基于 XML 的 di 实现 2. 使用 spring 中的注解,完成属性赋值, 叫做基于注解的 id 实现 di 的语法分类: 1. set 注入（设值注入）: spring 调用类的 set 方法,在 set 方法可以实现属性","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":3.2,"words":960}},["/docs/Spring系列/Spring/3. DI 依赖注入.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/3.%20DI%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5","/docs/Spring系列/Spring/3. DI 依赖注入.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/3.%20DI%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.md"]],
  ["v-44f1c0b3","/docs/Spring%E7%B3%BB%E5%88%97/Spring/4.%20Spring%20%E9%85%8D%E7%BD%AE.html",{"t":"4. Spring 配置","i":"note","y":"a","e":"4. Spring 配置 1. 别名 alias 的 name 值与 bean 的 id 绑定,起别名后两个名字都可以获取到对象 2. Bean 配置 3. import 合并多个配置文件\r\" 1. 导入时文件不允许重名\"\r\" 2. 在合并配置文件时,可以通配符（ \\* : 表示任意字符）\"\r主配置文件名称不能包含在通配符的范围内 4. bean 的作用域 ","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":1.32,"words":395}},["/docs/Spring系列/Spring/4. Spring 配置.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/4.%20Spring%20%E9%85%8D%E7%BD%AE","/docs/Spring系列/Spring/4. Spring 配置.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/4.%20Spring%20%E9%85%8D%E7%BD%AE.md"]],
  ["v-8986534e","/docs/Spring%E7%B3%BB%E5%88%97/Spring/5.%20Bean%20%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.html",{"t":"5. Bean 自动装配","i":"note","y":"a","e":"5. Bean 自动装配 引用类型的自动注入: spring 框架根据某些规则可以给引用类型赋值. 不用你在给引用类型赋值了,使用的规则常用的是 byName, byType. Spring 的三种装配方式\r\" 1. xml 文件中显式装配\"\r\" 2. 在 java 中显式装配\"\r\" 3. 隐式自动装配(autowire)\" ByName 自动装配 通过se","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":3.36,"words":1008}},["/docs/Spring系列/Spring/5. Bean 自动装配.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/5.%20Bean%20%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D","/docs/Spring系列/Spring/5. Bean 自动装配.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/5.%20Bean%20%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.md"]],
  ["v-90233224","/docs/Spring%E7%B3%BB%E5%88%97/Spring/6.%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.html",{"t":"6. 使用注解开发","i":"note","y":"a","e":"6. 使用注解开发 基于注解的 di: 通过注解完成 java 对象创建,属性赋值 1. 加入 maven 的依赖 spring-context ,在你加入 spring-context 的同时, 间接加入 spring-aop 的依赖 使用注解必须使用 spring-aop 依赖 2. 在类中加入 spring 的注解（多个不同功能的注解） 3. 在 sp","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":4.65,"words":1396}},["/docs/Spring系列/Spring/6. 使用注解开发.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/6.%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91","/docs/Spring系列/Spring/6. 使用注解开发.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/6.%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.md"]],
  ["v-6ae1d0cb","/docs/Spring%E7%B3%BB%E5%88%97/Spring/7.%20%E4%BD%BF%E7%94%A8%20java%20%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%20Spring.html",{"t":"7. 使用 java 方式配置 Spring","i":"note","y":"a","e":"7. 使用 java 方式配置 Spring 1. 配置类 2. 实体类 3. 测试","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":0.54,"words":161}},["/docs/Spring系列/Spring/7. 使用 java 方式配置 Spring.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/7.%20%E4%BD%BF%E7%94%A8%20java%20%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%20Spring","/docs/Spring系列/Spring/7. 使用 java 方式配置 Spring.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/7.%20%E4%BD%BF%E7%94%A8%20java%20%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%20Spring.md"]],
  ["v-6069dde9","/docs/Spring%E7%B3%BB%E5%88%97/Spring/8.%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html",{"t":"8. 代理模式","i":"note","y":"a","e":"8. 代理模式 _原文_ 在有些情况下，一个客户不能或者不想直接访问另一个对象，这时需要找一个中介帮忙完成某项任务，这个中介就是代理对象。 例如，购买火车票不一定要去火车站买，可以通过 12306 网站或者去火车票代售点买。又如找女朋友、找保姆、找工作等都可以通过找中介完成。 定义 由于某些原因需要给某对象提供一个代理以控制对该对象的访问。 访问对象不适合或","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":4.67,"words":1402}},["/docs/Spring系列/Spring/8. 代理模式.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/8.%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F","/docs/Spring系列/Spring/8. 代理模式.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/8.%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.md"]],
  ["v-77731972","/docs/Spring%E7%B3%BB%E5%88%97/Spring/9.%20Spring%20AOP.html",{"t":"9. Spring AOP","i":"note","y":"a","e":"9. Spring AOP _原文_ 1. 基本概念 AOP (Aspect-Oriented Programming)，即 面向切面编程, 它与 OOP (Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角. 在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AO","d":"2022-09-06T00:00:00.000Z","l":"2022年9月6日","c":["Spring"],"r":{"minutes":12.64,"words":3791}},["/docs/Spring系列/Spring/9. Spring AOP.html","/docs/Spring%E7%B3%BB%E5%88%97/Spring/9.%20Spring%20AOP","/docs/Spring系列/Spring/9. Spring AOP.md","/docs/Spring%E7%B3%BB%E5%88%97/Spring/9.%20Spring%20AOP.md"]],
  ["v-b660cbd2","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E9%9A%BE%E7%82%B9/ThreadLocal.html",{"t":"ThreadLocal","y":"a","e":"ThreadLocal ThreadLocal 详解 | JavaGuide 基于静态 ThreadLocal 封装了线程隔离的全局上下文对象，便于在请求内部存取用户信息，减少用户远程查询次数。 在每次请求的时候时候创建 用完就删除","r":{"minutes":0.71,"words":212}},["/docs/项目笔记/难点/ThreadLocal.html","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E9%9A%BE%E7%82%B9/ThreadLocal","/docs/项目笔记/难点/ThreadLocal.md","/docs/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E9%9A%BE%E7%82%B9/ThreadLocal.md"]],
  ["v-7adbe0b2","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/1.%20%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E7%A8%8B%E5%BA%8F.html",{"t":"1. 第一个 SpringMVC 程序","i":"note","y":"a","e":"1. 第一个 SpringMVC 程序 实现步骤\r\" 1. 新建 web maven 工程\"\r\" 2. 加入依赖\"\r\" spring-webmvc 依赖(间接把 spring 的依赖都加入到项目), jsp 依赖, servlet 依赖\"\r\" 3. 重点：在 web.xml 中注册 springmvc 框架的核心对象 DispatcherServlet\"\r\"","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":5.78,"words":1733}},["/docs/Spring系列/SpringMVC/1. 第一个SpringMVC程序.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/1.%20%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E7%A8%8B%E5%BA%8F","/docs/Spring系列/SpringMVC/1. 第一个SpringMVC程序.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/1.%20%E7%AC%AC%E4%B8%80%E4%B8%AASpringMVC%E7%A8%8B%E5%BA%8F.md"]],
  ["v-56262032","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/10.%20%E6%8B%A6%E6%88%AA%E5%99%A8.html",{"t":"10. 拦截器","i":"note","y":"a","e":"10. 拦截器 SpringMVC 中的 Interceptor 拦截器是非常重要和相当有用的，它的主要作用是拦截指定的用户请求，并进行相应的预处理与后处理 自定义拦截器，需要实现 HandlerInterceptor 接口。而该接口中含有三个方法: preHandle(request,response, Object handler)：\r\" 该方法在处理器","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":6.57,"words":1970}},["/docs/Spring系列/SpringMVC/10. 拦截器.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/10.%20%E6%8B%A6%E6%88%AA%E5%99%A8","/docs/Spring系列/SpringMVC/10. 拦截器.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/10.%20%E6%8B%A6%E6%88%AA%E5%99%A8.md"]],
  ["v-2de7fc45","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/2.%20%E9%85%8D%E7%BD%AE%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8.html",{"t":"2. 配置视图解析器","i":"note","y":"a","e":"2. 配置视图解析器\r\" 对视图文件添加保护措施, 将视图文件添加到 WEB-INF 目录下, 使得用户无法直接访问\"\r\"\"\r\" 在不配置视图解析器的情况下可以使用过滤器进行过滤或者手动指定视图文件的路径\"\r\"\"\r\" ​ mv.setViewName(\"/WEB-INF/view/show.jsp\");\"\r\"\"\r\" ​ mv.setViewName(\"/WE","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":1.97,"words":592}},["/docs/Spring系列/SpringMVC/2. 配置视图解析器.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/2.%20%E9%85%8D%E7%BD%AE%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8","/docs/Spring系列/SpringMVC/2. 配置视图解析器.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/2.%20%E9%85%8D%E7%BD%AE%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8.md"]],
  ["v-8b6ae550","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/3.%20%E6%8E%A7%E5%88%B6%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F.html",{"t":"3. 控制请求方式","i":"note","y":"a","e":"3. 控制请求方式\r\" @RequestMapping : 请求映射\"\r\"\"\r\" 属性：\"\r\"\"\r\" method， 表示请求的方式。 它的值是 RequestMethod 类的枚举值。\"\r\"\"\r\" 例如:\"\r\"\"\r\" get 请求方式, RequestMethod.GET\"\r\"\"\r\" post 方式, RequestMethod.POST\"\r\"\"\r\" 当请","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":0.92,"words":277}},["/docs/Spring系列/SpringMVC/3. 控制请求方式.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/3.%20%E6%8E%A7%E5%88%B6%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F","/docs/Spring系列/SpringMVC/3. 控制请求方式.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/3.%20%E6%8E%A7%E5%88%B6%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F.md"]],
  ["v-b60c7752","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/4.%20%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0.html",{"t":"4. 处理器方法的参数","i":"note","y":"a","e":"4. 处理器方法的参数\r\" 1. HttpServletRequest\"\r\" 2. HttpServletResponse\"\r\" 3. HttpSession\"\r\"\"\r\" 这三个参数使用方式和 servlet 中的 doGetdoPost 方法类似\" 用户提交的数据\r\" 接收用户提交的参数：\"\r\"\"\r\" 1. 逐个接收\"\r\" 2. 对象接收\" 逐个接收 表单","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":3.15,"words":944}},["/docs/Spring系列/SpringMVC/4. 处理器方法的参数.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/4.%20%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0","/docs/Spring系列/SpringMVC/4. 处理器方法的参数.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/4.%20%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0.md"]],
  ["v-271376a0","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/5.%20%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC.html",{"t":"处理器方法的返回值","i":"note","y":"a","e":"处理器方法的返回值 返回 ModelAndView 若处理器方法处理完后，需要跳转到其它资源，且又要在跳转的资源间传递数据，此时处理器方法返回 ModelAndView 比较好。 当然，若要返回 ModelAndView，则处理器方法中需要定义 ModelAndView 对象。 在使用时，若该处理器方法只是进行跳转而不传递数据，或只是传递数据而并不向任何资源","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":8.03,"words":2410}},["/docs/Spring系列/SpringMVC/5. 处理器方法的返回值.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/5.%20%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC","/docs/Spring系列/SpringMVC/5. 处理器方法的返回值.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/5.%20%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC.md"]],
  ["v-1afe6bf6","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/6.%20url-pattern.html",{"t":"6. url-pattern","i":"note","y":"a","e":"6. url-pattern 配置详解:\r\" 1. \\*.do\"\r\"\"\r\" 在没有特殊要求的情况下，SpringMVC 的中央调度器 DispatcherServlet 的 ``\"\r\"\"\r\" 常使用后辍匹配方式，如写为 .do 或者 .action, *.mvc 等。\"\r\"\"\r\" 2. /\"\r\"\"\r\" 可以写为/，因为 DispatcherServlet 会","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":2.59,"words":778}},["/docs/Spring系列/SpringMVC/6. url-pattern.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/6.%20url-pattern","/docs/Spring系列/SpringMVC/6. url-pattern.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/6.%20url-pattern.md"]],
  ["v-f2a5e22c","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/7.%20SSM%E6%95%B4%E5%90%88.html",{"t":"7. SSM 整合","i":"note","y":"a","e":"7. SSM 整合 SSM: SpringMVC + Spring + MyBati SpringMVC: 视图层, 界面层, 负责接收请求, 显示处理结果 Spring: 业务层, 管理 service, dao, 工具类对象 MyBatis: 持久层, 访问数据库 用户发起请求--SpringMVC 接收--Spring 中的 Service 对象--M","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":5.79,"words":1736}},["/docs/Spring系列/SpringMVC/7. SSM整合.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/7.%20SSM%E6%95%B4%E5%90%88","/docs/Spring系列/SpringMVC/7. SSM整合.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/7.%20SSM%E6%95%B4%E5%90%88.md"]],
  ["v-64e6aaf8","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/8.%20%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91.html",{"t":"8. 请求重定向和转发","i":"note","y":"a","e":"8. 请求重定向和转发 forward: 表示转发 redirect: 表示重定向 forward 和 redirect 都是关键字, 有一个共同的特点不和视图解析器一同工作\rforward 和 redirect 他们都可以访问视图文件, 比如某个 jsp, html forward:/hello.jsp forward:/main.html forward","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":1.4,"words":421}},["/docs/Spring系列/SpringMVC/8. 请求重定向和转发.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/8.%20%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91","/docs/Spring系列/SpringMVC/8. 请求重定向和转发.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/8.%20%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91.md"]],
  ["v-0a6e1c00","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/9.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",{"t":"9. 异常处理","i":"note","y":"a","e":"9. 异常处理 @ExceptionHandler 注解: 使用注解@ExceptionHandler 可以将一个方法指定为异常处理方法。 该注解只有一个可选属性 value，为一个 Class数组，用于指定该注解的方法所要处理的异常类，即所要匹配的异常。 而被注解的方法，其返回值可以是 ModelAndView、String，或 void，方法名随意，方法","d":"2022-09-15T00:00:00.000Z","l":"2022年9月15日","c":["SpringMVC"],"r":{"minutes":3.41,"words":1023}},["/docs/Spring系列/SpringMVC/9. 异常处理.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/9.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86","/docs/Spring系列/SpringMVC/9. 异常处理.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/9.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md"]],
  ["v-6213c9dc","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/",{"t":"SpringMVC","y":"a","e":"SpringMVC 1. SpringMVC：是基于 spring 的一个框架， 实际上就是 spring 的一个模块， 专门是做 web 开发的。可以理解为 servlet 的一个升级 2. web 开发底层是 servlet ， 框架是在 servlet 基础上面加入一些功能，让你做 web 开发方便。 3. SpringMVC 就是一个 Spring。","r":{"minutes":1.08,"words":324}},["/docs/Spring系列/SpringMVC/","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/index.html","/docs/Spring系列/SpringMVC/readme.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringMVC/readme.md"]],
  ["v-58fcc0ce","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/1.%20%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1.html",{"t":"1. 认识微服务","i":"note","y":"a","e":"1. 认识微服务 随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？ 1.0.学习目标 了解微服务架构的优缺点 1.1.单体架构 单体架构：将业务的所有功能集中在一个项目中开发，打成一个包部署。 单体架构的优缺点如下： 优点：\r架构简单; \r部署成本低; 缺点：\r耦合度高（维护困难、","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":2.96,"words":889}},["/docs/Spring系列/SpringCloud/1. 认识微服务.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/1.%20%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1","/docs/Spring系列/SpringCloud/1. 认识微服务.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/1.%20%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1.md"]],
  ["v-7dc73f5c","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/10.%20%E5%88%9D%E8%AF%86%20Docker.html",{"t":"10. 初识 Docker","i":"note","y":"a","e":"10. 初识 Docker 10.1.什么是 Docker 微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦。\r分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突。; \r在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题; 10.1.1.应用部署的环境问题 大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":6.9,"words":2071}},["/docs/Spring系列/SpringCloud/10. 初识 Docker.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/10.%20%E5%88%9D%E8%AF%86%20Docker","/docs/Spring系列/SpringCloud/10. 初识 Docker.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/10.%20%E5%88%9D%E8%AF%86%20Docker.md"]],
  ["v-71187c34","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/11.%20Centos%207%20%E5%AE%89%E8%A3%85%20Docker.html",{"t":"11. Centos 安装 Docker","i":"note","y":"a","e":"11. Centos 安装 Docker Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。 Docker CE 分为 stable test 和 nightly 三个更新频道。 官方网站上有各种环境下的 安装指南，这里主要介绍 Docker CE 在 Cent","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":2.98,"words":894}},["/docs/Spring系列/SpringCloud/11. Centos 7 安装 Docker.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/11.%20Centos%207%20%E5%AE%89%E8%A3%85%20Docker","/docs/Spring系列/SpringCloud/11. Centos 7 安装 Docker.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/11.%20Centos%207%20%E5%AE%89%E8%A3%85%20Docker.md"]],
  ["v-6d936012","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/12.%20Docker%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html",{"t":"12. Docker 的基本操作","i":"note","y":"a","e":"12. Docker 的基本操作 12.1.镜像操作 12.1.1.镜像名称 首先来看下镜像的名称组成：\r镜名称一般分两部分组成：[repository]:[tag]。; \r在没有指定 tag 时，默认是 latest，代表最新版本的镜像; 如图： 这里的 mysql 就是 repository，5.7 就是 tag，合一起就是镜像名称，代表 5.7 版本的","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":8.84,"words":2653}},["/docs/Spring系列/SpringCloud/12. Docker 基本操作.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/12.%20Docker%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C","/docs/Spring系列/SpringCloud/12. Docker 基本操作.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/12.%20Docker%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.md"]],
  ["v-7411bb09","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/13.%20Dockerfile%20%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F.html",{"t":"13. Dockerfile 自定义镜像","i":"note","y":"a","e":"13. Dockerfile 自定义镜像 常见的镜像在 DockerHub 就能找到，但是我们自己写的项目就必须自己构建镜像了。 而要自定义镜像，就必须先了解镜像的结构才行。 13.1.镜像结构 镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。 我们以 MySQL 为例，来看看镜像的组成结构： 简单来说，镜像就是在系统函数库、运行环境基础上，","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":3.46,"words":1038}},["/docs/Spring系列/SpringCloud/13. Dockerfile 自定义镜像.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/13.%20Dockerfile%20%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F","/docs/Spring系列/SpringCloud/13. Dockerfile 自定义镜像.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/13.%20Dockerfile%20%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F.md"]],
  ["v-4c391d3b","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/14.%20Docker-Compose.html",{"t":"14. Docker-Compose","i":"note","y":"a","e":"14. Docker-Compose Docker Compose 可以基于 Compose 文件帮我们快速的部署分布式应用，而无需手动一个个创建和运行容器！ 14.1.初识 DockerCompose Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下： 上面的 Compose 文件就描述一个项目，其中包含两个容器：\rmys","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":3.76,"words":1129}},["/docs/Spring系列/SpringCloud/14. Docker-Compose.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/14.%20Docker-Compose","/docs/Spring系列/SpringCloud/14. Docker-Compose.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/14.%20Docker-Compose.md"]],
  ["v-9ab6a6e6","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/15.%20Docker%20%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.html",{"t":"15. Docker 镜像仓库","i":"note","y":"a","e":"15. Docker 镜像仓库 15.1.推送、拉取镜像 推送镜像到私有镜像服务必须先 tag，步骤如下： ① 重新 tag 本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/ ② 推送镜像 ③ 拉取镜像","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":0.31,"words":94}},["/docs/Spring系列/SpringCloud/15. Docker 镜像仓库.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/15.%20Docker%20%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93","/docs/Spring系列/SpringCloud/15. Docker 镜像仓库.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/15.%20Docker%20%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93.md"]],
  ["v-3d567069","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/16.%20%E5%88%9D%E8%AF%86MQ.html",{"t":"16.初识 MQ","i":"note","y":"a","e":"16.初识 MQ 16.1.同步和异步通讯 微服务间通讯有同步和异步两种方式： 同步通讯：就像打电话，需要实时响应。 异步通讯：就像发邮件，不需要马上回复。 两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。 16.1.1.同步通讯 我们之前学习的 Feign 调用就属于同步方式，","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":3.08,"words":925}},["/docs/Spring系列/SpringCloud/16. 初识MQ.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/16.%20%E5%88%9D%E8%AF%86MQ","/docs/Spring系列/SpringCloud/16. 初识MQ.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/16.%20%E5%88%9D%E8%AF%86MQ.md"]],
  ["v-53ba3782","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/17.%20RabbitMQ%20%E5%AE%89%E8%A3%85.html",{"t":"17. RabbitMQ 部署指南","i":"note","y":"a","e":"17. RabbitMQ 部署指南 17.1.单机部署 我们在 Centos7 虚拟机中使用 Docker 来安装。 17.1.1.下载镜像 方式一：在线拉取 方式二：从本地加载 镜像包： 链接: 提取码: 4jfy 上传到虚拟机中后，使用命令加载镜像即可： 17.1.2.安装 MQ 执行下面的命令来运行 MQ 容器： 之后可以通过浏览器访问: 进入管理界面","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":1.58,"words":473}},["/docs/Spring系列/SpringCloud/17. RabbitMQ 安装.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/17.%20RabbitMQ%20%E5%AE%89%E8%A3%85","/docs/Spring系列/SpringCloud/17. RabbitMQ 安装.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/17.%20RabbitMQ%20%E5%AE%89%E8%A3%85.md"]],
  ["v-8558bcd6","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/18.%20MQ%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html",{"t":"18. MQ 快速入门","i":"note","y":"a","e":"18. MQ 快速入门 MQ 的基本结构： RabbitMQ 中的一些角色：\rpublisher：生产者; \rconsumer：消费者; \rexchange 个：交换机，负责消息路由; \rqueue：队列，存储消息; \rvirtualHost：虚拟主机，隔离不同租户的 exchange、queue、消息的隔离; 18.1.RabbitMQ 消息模型 Rabb","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":2.28,"words":684}},["/docs/Spring系列/SpringCloud/18. MQ 快速入门.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/18.%20MQ%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8","/docs/Spring系列/SpringCloud/18. MQ 快速入门.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/18.%20MQ%20%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.md"]],
  ["v-2527cc63","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/19.%20SpringAMQP.html",{"t":"19. SpringAMQP","i":"note","y":"a","e":"19. SpringAMQP SpringAMQP 是基于 RabbitMQ 封装的一套模板，并且还利用 SpringBoot 对其实现了自动装配，使用起来非常方便。 SpringAmqp 的官方地址： SpringAMQP 提供了三个功能：\r自动声明队列、交换机及其绑定关系; \r基于注解的监听器模式，异步接收消息; \r封装了 RabbitTemplate ","d":"2022-11-08T00:00:00.000Z","l":"2022年11月8日","c":["SpringCloud"],"r":{"minutes":10.6,"words":3181}},["/docs/Spring系列/SpringCloud/19. SpringAMQP.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/19.%20SpringAMQP","/docs/Spring系列/SpringCloud/19. SpringAMQP.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/19.%20SpringAMQP.md"]],
  ["v-33f2a044","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/2.%20%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8.html",{"t":"2. 服务拆分和远程调用","i":"note","y":"a","e":"2. 服务拆分和远程调用 任何分布式架构都离不开服务的拆分，微服务也是一样。 2.1.服务拆分原则 这里我总结了微服务拆分时的几个原则：\r不同微服务，不要重复开发相同业务; \r微服务数据独立，不要访问其它微服务的数据库; \r微服务可以将自己的业务暴露为接口，供其它微服务调用; 2.2.服务拆分示例 链接: 提取码: hivy 微服务 cloud-demo，其","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":5.46,"words":1639}},["/docs/Spring系列/SpringCloud/2. 服务的远程调用.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/2.%20%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8","/docs/Spring系列/SpringCloud/2. 服务的远程调用.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/2.%20%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8.md"]],
  ["v-10e811e0","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/20.%20elasticsearch.html",{"t":"20. elasticsearch","i":"note","y":"a","e":"20. elasticsearch 20.1.了解 ES 20.1.1.elasticsearch 的作用 elasticsearch 是一款非常强大的开源搜索引擎，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容 例如：\r在 GitHub 搜索代码; \r在电商网站搜索商品; \r在百度搜索答案; \r在打车软件搜索附近的车; 20.1.2.ELK","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":6.62,"words":1987}},["/docs/Spring系列/SpringCloud/20. elasticsearch.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/20.%20elasticsearch","/docs/Spring系列/SpringCloud/20. elasticsearch.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/20.%20elasticsearch.md"]],
  ["v-32c19da0","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/21.%20%E5%AE%89%E8%A3%85%20es%E3%80%81kibana.html",{"t":"21. 安装 es、kibana","i":"note","y":"a","e":"21. 安装 es、kibana 21.1.部署单点 es 21.1.1.创建网络 因为我们还需要部署 kibana 容器，因此需要让 es 和 kibana 容器互联。这里先创建一个网络： 21.1.2.加载镜像 在线安装: 这里我们采用 elasticsearch 的 7.12.1 版本的镜像，这个镜像体积非常大，接近 1G。 资料提供了镜像的 tar ","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":8.52,"words":2555}},["/docs/Spring系列/SpringCloud/21. 安装 es、kibana.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/21.%20%E5%AE%89%E8%A3%85%20es%E3%80%81kibana","/docs/Spring系列/SpringCloud/21. 安装 es、kibana.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/21.%20%E5%AE%89%E8%A3%85%20es%E3%80%81kibana.md"]],
  ["v-4a26a905","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/22.%20%E7%B4%A2%E5%BC%95%E5%BA%93%E6%93%8D%E4%BD%9C.html",{"t":"22. 索引库操作","i":"note","y":"a","e":"22. 索引库操作 索引库就类似数据库表，mapping 映射就类似表的结构。 我们要向 es 中存储数据，必须先创建“库”和“表”。 初步检索: 查看索引库全部节点 查看 es 健康状况 查看主节点 查看全部索引, 相当于数据库 show databases 22.1.mapping 映射属性 mapping 是对索引库中文档的约束，常见的 mapping","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":3.59,"words":1077}},["/docs/Spring系列/SpringCloud/22. 索引库操作.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/22.%20%E7%B4%A2%E5%BC%95%E5%BA%93%E6%93%8D%E4%BD%9C","/docs/Spring系列/SpringCloud/22. 索引库操作.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/22.%20%E7%B4%A2%E5%BC%95%E5%BA%93%E6%93%8D%E4%BD%9C.md"]],
  ["v-38a03c2e","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/23.%20%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C.html",{"t":"23. 文档操作","i":"note","y":"a","e":"23. 文档操作 23.1.新增文档 语法： 示例： 响应： 23.2.查询文档 根据 rest 风格，新增是 post，查询应该是 get，不过查询一般都需要条件，这里我们把文档 id 带上。 语法： 通过 kibana 查看数据： 查看结果： 23.3.删除文档 删除使用 DELETE 请求，同样，需要根据 id 进行删除： 语法： 示例： 结果： 23","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":1.87,"words":560}},["/docs/Spring系列/SpringCloud/23. 文档操作.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/23.%20%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C","/docs/Spring系列/SpringCloud/23. 文档操作.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/23.%20%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C.md"]],
  ["v-f0b7422a","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/24.%20RestAPI.html",{"t":"24. RestAPI","i":"note","y":"a","e":"24. RestAPI ES 官方提供了各种不同语言的客户端，用来操作 ES。这些客户端的本质就是组装 DSL 语句，通过 http 请求发送给 ES。官方文档地址： 其中的 Java Rest Client 又包括两种：\rJava Low Level Rest Client; \rJava High Level Rest Client; 我们学习的是 Jav","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":46.28,"words":13883}},["/docs/Spring系列/SpringCloud/24. RestAPI.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/24.%20RestAPI","/docs/Spring系列/SpringCloud/24. RestAPI.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/24.%20RestAPI.md"]],
  ["v-5b4deeda","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/25.%20RestClient%20%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3.html",{"t":"25. RestClient 操作文档","i":"note","y":"a","e":"25. RestClient 操作文档 为了与索引库操作分离，我们再次参加一个测试类，做两件事情：\r初始化 RestHighLevelClient; \r我们的酒店数据在数据库，需要利用 IHotelService 去查询，所以注入这个接口; 25.1.新增文档 我们要将数据库的酒店数据查询出来，写入 elasticsearch 中。 25.1.1.索引库实体","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":5.96,"words":1787}},["/docs/Spring系列/SpringCloud/25. RestClient 操作文档.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/25.%20RestClient%20%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3","/docs/Spring系列/SpringCloud/25. RestClient 操作文档.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/25.%20RestClient%20%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3.md"]],
  ["v-0b1b8a6f","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/26.%20DSL%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3.html",{"t":"26. DSL 查询文档","i":"note","y":"a","e":"26. DSL 查询文档 elasticsearch 的查询依然是基于 JSON 风格的 DSL 来实现的。 26.1.DSL 查询分类 Elasticsearch 提供了基于 JSON 的 DSL（Domain Specific Language）来定义查询。常见的查询类型包括：\r查询所有：查询出所有数据，一般测试用。例如：match_all; \r全文检索","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":10.51,"words":3152}},["/docs/Spring系列/SpringCloud/26. DSL查询文档.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/26.%20DSL%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3","/docs/Spring系列/SpringCloud/26. DSL查询文档.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/26.%20DSL%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3.md"]],
  ["v-3845094e","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/27.%20%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86.html",{"t":"27. 搜索结果处理","i":"note","y":"a","e":"27. 搜索结果处理 搜索的结果可以按照用户指定的方式去处理或展示。 27.1.排序 elasticsearch 默认是根据相关度算分（\\_score）来排序，但是也支持自定义方式对搜索结果排序。可以排序字段类型有：keyword 类型、数值类型、地理坐标类型、日期类型等。 27.1.1.普通字段排序 keyword、数值、日期类型排序的语法基本一致。 语法","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":5.18,"words":1553}},["/docs/Spring系列/SpringCloud/27. 搜索结果处理.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/27.%20%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86","/docs/Spring系列/SpringCloud/27. 搜索结果处理.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/27.%20%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86.md"]],
  ["v-42f3cdec","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/28.%20RestClient%20%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3.html",{"t":"28. RestClient 查询文档","i":"note","y":"a","e":"28. RestClient 查询文档 文档的查询同样适用昨天学习的 RestHighLevelClient 对象，基本步骤包括：\r1）准备 Request 对象; \r2）准备请求参数; \r3）发起请求; \r4）解析响应; 28.1.快速入门 我们以 match_all 查询为例 28.1.1.发起查询请求 代码解读：\r第一步，创建SearchRequest","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":5.6,"words":1681}},["/docs/Spring系列/SpringCloud/28. RestClient 查询文档.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/28.%20RestClient%20%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3","/docs/Spring系列/SpringCloud/28. RestClient 查询文档.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/28.%20RestClient%20%E6%9F%A5%E8%AF%A2%E6%96%87%E6%A1%A3.md"]],
  ["v-12ddb758","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/29.%20%E9%BB%91%E9%A9%AC%E6%97%85%E6%B8%B8%E6%A1%88%E4%BE%8B.html",{"t":"29. 黑马旅游案例","i":"note","y":"a","e":"29. 黑马旅游案例 下面，我们通过黑马旅游的案例来实战演练下之前学习的知识。 我们实现四部分功能：\r酒店搜索和分页; \r酒店结果过滤; \r我周边的酒店; \r酒店竞价排名; 启动我们提供的 hotel-demo 项目，其默认端口是 8089，访问 ，就能看到项目页面了： 29.1.酒店搜索和分页 案例需求：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页 2","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":10.34,"words":3102}},["/docs/Spring系列/SpringCloud/29. 黑马旅游案例.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/29.%20%E9%BB%91%E9%A9%AC%E6%97%85%E6%B8%B8%E6%A1%88%E4%BE%8B","/docs/Spring系列/SpringCloud/29. 黑马旅游案例.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/29.%20%E9%BB%91%E9%A9%AC%E6%97%85%E6%B8%B8%E6%A1%88%E4%BE%8B.md"]],
  ["v-3b9d7776","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/3.%20Eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html",{"t":"3. Eureka 注册中心","i":"note","y":"a","e":"3. Eureka 注册中心 假如我们的服务提供者 user-service 部署了多个实例，如图： 大家思考几个问题：\rorder-service 在发起远程调用的时候，该如何得知 user-service 实例的 ip 地址和端口？; \r有多个 user-service 实例地址，order-service 调用时该如何选择？; \rorder-servi","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":4.55,"words":1365}},["/docs/Spring系列/SpringCloud/3. Eureka 注册中心.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/3.%20Eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83","/docs/Spring系列/SpringCloud/3. Eureka 注册中心.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/3.%20Eureka%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.md"]],
  ["v-a7e2316e","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/30.%20%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88.html",{"t":"30. 数据聚合","i":"note","y":"a","e":"30. 数据聚合 聚合[aggregations](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html)） 可以让我们极其方便的实现对数据的统计、分析、运算。例如：\r什么品牌的手机最受欢迎？; \r这些手机的平均价格、最高价格、最低价格","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":6.38,"words":1913}},["/docs/Spring系列/SpringCloud/30. 数据聚合.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/30.%20%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88","/docs/Spring系列/SpringCloud/30. 数据聚合.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/30.%20%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88.md"]],
  ["v-5046cc48","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/31.%20%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8.html",{"t":"31. 自动补全","i":"note","y":"a","e":"31. 自动补全 当用户在搜索框输入字符时，我们应该提示出与该字符有关的搜索项，如图： 这种根据用户输入的字母，提示完整词条的功能，就是自动补全了。 因为需要根据拼音字母来推断，因此要用到拼音分词功能。 31.1.拼音分词器 要实现根据字母做补全，就必须对文档按照拼音分词。在 GitHub 上恰好有 elasticsearch 的拼音分词插件。地址： 拼音分","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":5.97,"words":1791}},["/docs/Spring系列/SpringCloud/31. 自动补全.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/31.%20%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8","/docs/Spring系列/SpringCloud/31. 自动补全.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/31.%20%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8.md"]],
  ["v-2a8003c0","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/32.%20%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5.html",{"t":"32. 数据同步","i":"note","y":"a","e":"32. 数据同步 elasticsearch 中的酒店数据来自于 mysql 数据库，因此 mysql 数据发生改变时，elasticsearch 也必须跟着改变，这个就是 elasticsearch 与 mysql 之间的数据同步。 32.1.思路分析 常见的数据同步方案有三种：\r同步调用; \r异步通知; \r监听 binlog; 32.1.1.同步调用 方","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":3.94,"words":1183}},["/docs/Spring系列/SpringCloud/32. 数据同步.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/32.%20%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5","/docs/Spring系列/SpringCloud/32. 数据同步.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/32.%20%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5.md"]],
  ["v-640df86c","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/33.%20%E9%9B%86%E7%BE%A4.html",{"t":"33. 集群","i":"note","y":"a","e":"33. 集群 单机的 elasticsearch 做数据存储，必然面临两个问题：海量数据存储问题、单点故障问题。\r海量数据存储问题：将索引库从逻辑上拆分为 N 个分片（shard），存储到多个节点; \r单点故障问题：将分片数据在不同节点备份（replica ）; ES 集群相关概念:\r集群（cluster）：一组拥有共同的 cluster name 的 节点","d":"2022-11-09T00:00:00.000Z","l":"2022年11月9日","c":["SpringCloud"],"r":{"minutes":5.6,"words":1679}},["/docs/Spring系列/SpringCloud/33. 集群.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/33.%20%E9%9B%86%E7%BE%A4","/docs/Spring系列/SpringCloud/33. 集群.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/33.%20%E9%9B%86%E7%BE%A4.md"]],
  ["v-31d4261e","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/34.%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4.html",{"t":"34. 微服务保护","i":"note","y":"a","e":"34. 微服务保护 1.初识 Sentinel 1.1.雪崩问题及解决方案 1.1.1.雪崩问题 微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。 如图，如果服务提供者 I 发生了故障，当前的应用的部分业务因为依赖于服务 I，因此也会被阻塞。此时，其它不依赖于服务 I 的业务似乎不受影响。 但是，依赖服务 I 的业务请求被阻塞，用户不会","d":"2022-11-14T00:00:00.000Z","l":"2022年11月14日","c":["SpringCloud"],"r":{"minutes":31.92,"words":9577}},["/docs/Spring系列/SpringCloud/34. 微服务保护.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/34.%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4","/docs/Spring系列/SpringCloud/34. 微服务保护.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/34.%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4.md"]],
  ["v-273c2260","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/4.%20Ribbon%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html",{"t":"4. Ribbon 负载均衡","i":"note","y":"a","e":"4. Ribbon 负载均衡 上一节中，我们添加了@LoadBalanced 注解，即可实现负载均衡功能，这是什么原理呢？ 4.1.负载均衡原理 SpringCloud 底层其实是利用了一个名为 Ribbon 的组件，来实现负载均衡功能的。 那么我们发出的请求明明是 ，怎么变成了 的呢？ 4.2.源码跟踪 为什么我们只输入了 service 名称就可以访问了","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":4.77,"words":1430}},["/docs/Spring系列/SpringCloud/4. Ribbon 负载均衡.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/4.%20Ribbon%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1","/docs/Spring系列/SpringCloud/4. Ribbon 负载均衡.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/4.%20Ribbon%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.md"]],
  ["v-85bbcbe0","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/5.%20Nacos%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html",{"t":"5. Nacos 注册中心","i":"note","y":"a","e":"5. Nacos 注册中心 国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba 也推出了一个名为 Nacos 的注册中心。 官方文档: Nacos discovery · alibaba/spring-cloud-alibaba Wiki (github.com) 5.1.认识和安装 Nacos Nacos是阿里巴巴的产品，","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":5.66,"words":1698}},["/docs/Spring系列/SpringCloud/5. Nacos 注册中心.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/5.%20Nacos%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83","/docs/Spring系列/SpringCloud/5. Nacos 注册中心.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/5.%20Nacos%20%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.md"]],
  ["v-afb94558","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/6.%20Nacos%20%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.html",{"t":"6. Nacos 配置管理","i":"note","y":"a","e":"6. Nacos 配置管理 Nacos 除了可以做注册中心，同样可以做配置管理来使用。 官方文档: Nacos config · alibaba/spring-cloud-alibaba Wiki (github.com) 6.1.统一配置管理 当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":4.34,"words":1302}},["/docs/Spring系列/SpringCloud/6. Nacos 配置管理.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/6.%20Nacos%20%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86","/docs/Spring系列/SpringCloud/6. Nacos 配置管理.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/6.%20Nacos%20%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.md"]],
  ["v-fc9d7098","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/7.%20Nacos%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html",{"t":"7. Nacos 集群搭建","i":"note","y":"a","e":"7. Nacos 集群搭建 7.1.集群结构图 官方给出的 Nacos 集群图： 其中包含 3 个 nacos 节点，然后一个负载均衡器代理 3 个 Nacos。这里负载均衡器可以使用 nginx。 我们计划的集群结构： 三个 nacos 节点的地址： 节点 ip port ------ ------------- ---- nacos1 192.168.1","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":7.01,"words":2103}},["/docs/Spring系列/SpringCloud/7. Nacos 集群搭建.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/7.%20Nacos%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA","/docs/Spring系列/SpringCloud/7. Nacos 集群搭建.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/7.%20Nacos%20%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.md"]],
  ["v-bf4619be","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/8.%20Feign%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8.html",{"t":"8. Feign 远程调用","i":"note","y":"a","e":"8. Feign 远程调用 先来看我们以前利用 RestTemplate 发起远程调用的代码： 存在下面的问题：\r代码可读性差，编程体验不统一; \r参数复杂 URL 难以维护; Feign 是一个声明式的 http 客户端，官方地址： 其作用就是帮助我们优雅的实现 http 请求的发送，解决上面提到的问题。 8.1.Feign 替代 RestTemplate","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":6.21,"words":1862}},["/docs/Spring系列/SpringCloud/8. Feign 远程调用.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/8.%20Feign%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8","/docs/Spring系列/SpringCloud/8. Feign 远程调用.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/8.%20Feign%20%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8.md"]],
  ["v-1fff6ee6","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/9.%20Gateway%20%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3.html",{"t":"9. Gateway 服务网关","i":"note","y":"a","e":"9. Gateway 服务网关 Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。 9.1.为什么需要网关 Gate","d":"2022-11-07T00:00:00.000Z","l":"2022年11月7日","c":["SpringCloud"],"r":{"minutes":9.03,"words":2708}},["/docs/Spring系列/SpringCloud/9. Gateway 服务网关.html","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/9.%20Gateway%20%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3","/docs/Spring系列/SpringCloud/9. Gateway 服务网关.md","/docs/Spring%E7%B3%BB%E5%88%97/SpringCloud/9.%20Gateway%20%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3.md"]],
  ["v-3706649a","/404.html",{"t":"","y":"p"},["/404"]],
  ["v-5bc93818","/category/",{"t":"分类","y":"p"},["/category/index.html"]],
  ["v-744d024e","/tag/",{"t":"标签","y":"p"},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"t":"文章","y":"p"},["/article/index.html"]],
  ["v-75ed4ea4","/encrypted/",{"t":"加密","y":"p"},["/encrypted/index.html"]],
  ["v-d804e652","/slide/",{"t":"幻灯片","y":"p"},["/slide/index.html"]],
  ["v-154dc4c4","/star/",{"t":"收藏","y":"p"},["/star/index.html"]],
  ["v-01560935","/timeline/",{"t":"时间轴","y":"p"},["/timeline/index.html"]],
  ["v-b64fa7ee","/category/dubbo/",{"t":"Dubbo 分类","y":"p"},["/category/dubbo/index.html"]],
  ["v-5831b135","/category/java/",{"t":"java 分类","y":"p"},["/category/java/index.html"]],
  ["v-9c48d85a","/category/linux/",{"t":"linux 分类","y":"p"},["/category/linux/index.html"]],
  ["v-3edf0895","/category/javaweb/",{"t":"JavaWeb 分类","y":"p"},["/category/javaweb/index.html"]],
  ["v-49f5e4d4","/category/mybatis/",{"t":"mybatis 分类","y":"p"},["/category/mybatis/index.html"]],
  ["v-9717cc36","/category/mysql/",{"t":"MySQL 分类","y":"p"},["/category/mysql/index.html"]],
  ["v-65f6d381","/category/vue/",{"t":"Vue 分类","y":"p"},["/category/vue/index.html"]],
  ["v-58706565","/category/note/",{"t":"note 分类","y":"p"},["/category/note/index.html"]],
  ["v-58702955","/category/node/",{"t":"node 分类","y":"p"},["/category/node/index.html"]],
  ["v-8848dfa8","/category/redis/",{"t":"Redis 分类","y":"p"},["/category/redis/index.html"]],
  ["v-0667aa78","/category/springboot/",{"t":"SpringBoot 分类","y":"p"},["/category/springboot/index.html"]],
  ["v-08073caa","/category/spring/",{"t":"Spring 分类","y":"p"},["/category/spring/index.html"]],
  ["v-424a813a","/category/springmvc/",{"t":"SpringMVC 分类","y":"p"},["/category/springmvc/index.html"]],
  ["v-6fcf7e02","/category/springcloud/",{"t":"SpringCloud 分类","y":"p"},["/category/springcloud/index.html"]],
  ["v-61c19d27","/docs/%E5%B0%8F%E8%AE%B0/.~%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",{"t":"","y":"a"},["/docs/小记/.~函数式编程.html","/docs/%E5%B0%8F%E8%AE%B0/.~%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B","/docs/小记/.~函数式编程.md","/docs/%E5%B0%8F%E8%AE%B0/.~%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.md"]],
]
